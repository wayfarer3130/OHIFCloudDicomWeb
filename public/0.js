(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../../../node_modules/react-cornerstone-viewport/dist/index.umd.js":
/*!********************************************************************************!*\
  !*** C:/src/Viewers/node_modules/react-cornerstone-viewport/dist/index.umd.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! cornerstone-core */ \"../../../../cornerstone/dist/cornerstone.js\"), __webpack_require__(/*! cornerstone-wado-image-loader */ \"../../../node_modules/cornerstone-wado-image-loader/dist/cornerstoneWADOImageLoader.min.js\"), __webpack_require__(/*! dicom-parser */ \"../../../node_modules/dicom-parser/dist/dicomParser.min.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"), __webpack_require__(/*! cornerstone-tools */ \"../../../../bwCornerstoneTools/dist/cornerstoneTools.js\"), __webpack_require__(/*! react-dom */ \"../../../node_modules/react-dom/index.js\")) :\n  undefined;\n}(this, function (exports, cornerstone, cornerstoneWADOImageLoader, dicomParser, React, cornerstoneTools, reactDom) { 'use strict';\n\n  cornerstone = cornerstone && cornerstone.hasOwnProperty('default') ? cornerstone['default'] : cornerstone;\n  cornerstoneWADOImageLoader = cornerstoneWADOImageLoader && cornerstoneWADOImageLoader.hasOwnProperty('default') ? cornerstoneWADOImageLoader['default'] : cornerstoneWADOImageLoader;\n  dicomParser = dicomParser && dicomParser.hasOwnProperty('default') ? dicomParser['default'] : dicomParser;\n  var React__default = 'default' in React ? React['default'] : React;\n  cornerstoneTools = cornerstoneTools && cornerstoneTools.hasOwnProperty('default') ? cornerstoneTools['default'] : cornerstoneTools;\n  reactDom = reactDom && reactDom.hasOwnProperty('default') ? reactDom['default'] : reactDom;\n\n  var _cornerstoneWADOImage = cornerstoneWADOImageLoader.wadors.metaData,\n      getNumberValue = _cornerstoneWADOImage.getNumberValue,\n      getValue = _cornerstoneWADOImage.getValue;\n\n  function wadoRsMetaDataProvider(type, imageId) {\n    var metaData = cornerstoneWADOImageLoader.wadors.metaDataManager.get(imageId);\n\n    if (!metaData) {\n      return;\n    }\n\n    if (metaData[type] !== undefined && metaData[type].Value !== undefined && metaData[type].Value.length) {\n      return metaData[type].Value[0];\n    }\n\n    var typeCleaned = type.replace('x', '');\n\n    if (metaData[typeCleaned] !== undefined && metaData[typeCleaned].Value !== undefined && metaData[typeCleaned].Value.length) {\n      return metaData[typeCleaned].Value[0];\n    }\n\n    if (type === 'generalImageModule') {\n      return {\n        sopInstanceUid: getValue(metaData['00080018']),\n        instanceNumber: getNumberValue(metaData['00200013']),\n        lossyImageCompression: getValue(metaData['00282110']),\n        lossyImageCompressionRatio: getValue(metaData['00282112']),\n        lossyImageCompressionMethod: getValue(metaData['00282114'])\n      };\n    }\n\n    if (type === 'patientModule') {\n      return {\n        patientName: getValue(metaData['00100010']),\n        patientId: getValue(metaData['00100020']),\n        patientSex: getValue(metaData['00100040']),\n        patientBirthDate: getValue(metaData['00100030'])\n      };\n    }\n\n    if (type === 'spacingBetweenSlices') {\n      return getValue(metaData['00180088']);\n    }\n\n    if (type === 'generalStudyModule') {\n      return {\n        studyDescription: getValue(metaData['00081030']),\n        studyDate: getValue(metaData['00080020']),\n        studyTime: getValue(metaData['00080030']),\n        accessionNumber: getValue(metaData['00080050'])\n      };\n    }\n\n    if (type === 'cineModule') {\n      return {\n        frameTime: getNumberValue(metaData['00181063'])\n      };\n    }\n  }\n\n  cornerstone.metaData.addProvider(wadoRsMetaDataProvider);\n\n  function wadoUriMetaDataProvider(type, imageId) {\n    var _cornerstoneWADOImage2 = cornerstoneWADOImageLoader.wadouri,\n        parseImageId = _cornerstoneWADOImage2.parseImageId,\n        dataSetCacheManager = _cornerstoneWADOImage2.dataSetCacheManager;\n    var parsedImageId = parseImageId(imageId);\n    var dataSet = dataSetCacheManager.get(parsedImageId.url);\n\n    if (!dataSet) {\n      return;\n    }\n\n    if (type === 'generalImageModule') {\n      return {\n        sopInstanceUid: dataSet.string('x00080018'),\n        instanceNumber: dataSet.intString('x00200013'),\n        lossyImageCompression: dataSet.string('x00282110'),\n        lossyImageCompressionRatio: dataSet.string('x00282112'),\n        lossyImageCompressionMethod: dataSet.string('x00282114')\n      };\n    }\n\n    if (type === 'patientModule') {\n      return {\n        patientName: dataSet.string('x00100010'),\n        patientId: dataSet.string('x00100020')\n      };\n    }\n\n    if (type === 'generalStudyModule') {\n      return {\n        studyDescription: dataSet.string('x00081030'),\n        studyDate: dataSet.string('x00080020'),\n        studyTime: dataSet.string('x00080030')\n      };\n    }\n\n    if (type === 'cineModule') {\n      return {\n        frameTime: dataSet.float('x00181063')\n      };\n    }\n\n    if (dataSet.elements[type] !== undefined) {\n      var element = dataSet.elements[type];\n\n      if (!element.vr) {\n        return;\n      }\n\n      return dicomParser.explicitElementToString(dataSet, element);\n    }\n  }\n\n  cornerstone.metaData.addProvider(wadoUriMetaDataProvider);\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function unwrapExports (x) {\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var runtime = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  !(function(global) {\n\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    var runtime = global.regeneratorRuntime;\n    if (runtime) {\n      {\n        // If regeneratorRuntime is defined globally and we're in a module,\n        // make the exports object identical to regeneratorRuntime.\n        module.exports = runtime;\n      }\n      // Don't bother evaluating the rest of this file if the runtime was\n      // already defined globally.\n      return;\n    }\n\n    // Define the runtime globally (as expected by generated code) as either\n    // module.exports (if we're in a module) or a new, empty object.\n    runtime = global.regeneratorRuntime =  module.exports ;\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []);\n\n      // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n      return generator;\n    }\n    runtime.wrap = wrap;\n\n    // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n    function tryCatch(fn, obj, arg) {\n      try {\n        return { type: \"normal\", arg: fn.call(obj, arg) };\n      } catch (err) {\n        return { type: \"throw\", arg: err };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\";\n\n    // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n    var ContinueSentinel = {};\n\n    // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n\n    // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n    var IteratorPrototype = {};\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    if (NativeIteratorPrototype &&\n        NativeIteratorPrototype !== Op &&\n        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype =\n      Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunctionPrototype[toStringTagSymbol] =\n      GeneratorFunction.displayName = \"GeneratorFunction\";\n\n    // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function(method) {\n        prototype[method] = function(arg) {\n          return this._invoke(method, arg);\n        };\n      });\n    }\n\n    runtime.isGeneratorFunction = function(genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor\n        ? ctor === GeneratorFunction ||\n          // For the native GeneratorFunction constructor, the best we can\n          // do is to check its .name property.\n          (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n        : false;\n    };\n\n    runtime.mark = function(genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        if (!(toStringTagSymbol in genFun)) {\n          genFun[toStringTagSymbol] = \"GeneratorFunction\";\n        }\n      }\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    };\n\n    // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n    runtime.awrap = function(arg) {\n      return { __await: arg };\n    };\n\n    function AsyncIterator(generator) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n          if (value &&\n              typeof value === \"object\" &&\n              hasOwn.call(value, \"__await\")) {\n            return Promise.resolve(value.__await).then(function(value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function(err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return Promise.resolve(value).then(function(unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function(error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new Promise(function(resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise =\n          // If enqueue has been called before, then we want to wait until\n          // all previous Promises have been resolved before calling invoke,\n          // so that results are always delivered in the correct order. If\n          // enqueue has not been called before, then it is important to\n          // call invoke immediately, without waiting on a callback to fire,\n          // so that the async generator function has the opportunity to do\n          // any necessary setup in a predictable way. This predictability\n          // is why the Promise constructor synchronously invokes its\n          // executor callback, and why async functions synchronously\n          // execute code before the first await. Since we implement simple\n          // async functions in terms of async generators, it is especially\n          // important to get this right, even though it requires care.\n          previousPromise ? previousPromise.then(\n            callInvokeWithMethodAndArg,\n            // Avoid propagating failures to Promises returned by later\n            // invocations of the iterator.\n            callInvokeWithMethodAndArg\n          ) : callInvokeWithMethodAndArg();\n      }\n\n      // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n    runtime.AsyncIterator = AsyncIterator;\n\n    // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n    runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n      var iter = new AsyncIterator(\n        wrap(innerFn, outerFn, self, tryLocsList)\n      );\n\n      return runtime.isGeneratorFunction(outerFn)\n        ? iter // If outerFn is a generator, return the full iterator.\n        : iter.next().then(function(result) {\n            return result.done ? result.value : iter.next();\n          });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          }\n\n          // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n\n          var record = tryCatch(innerFn, self, context);\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done\n              ? GenStateCompleted\n              : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted;\n            // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    }\n\n    // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          if (delegate.iterator.return) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\n            \"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (! info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value;\n\n        // Resume execution at the desired location (see delegateYield).\n        context.next = delegate.nextLoc;\n\n        // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      }\n\n      // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n    defineIteratorMethods(Gp);\n\n    Gp[toStringTagSymbol] = \"Generator\";\n\n    // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n    Gp[iteratorSymbol] = function() {\n      return this;\n    };\n\n    Gp.toString = function() {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = { tryLoc: locs[0] };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{ tryLoc: \"root\" }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    runtime.keys = function(object) {\n      var keys = [];\n      for (var key in object) {\n        keys.push(key);\n      }\n      keys.reverse();\n\n      // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        }\n\n        // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1, next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n\n            return next;\n          };\n\n          return next.next = next;\n        }\n      }\n\n      // Return an iterator with no values.\n      return { next: doneResult };\n    }\n    runtime.values = values;\n\n    function doneResult() {\n      return { value: undefined$1, done: true };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n\n      reset: function(skipTempReset) {\n        this.prev = 0;\n        this.next = 0;\n        // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n\n        this.method = \"next\";\n        this.arg = undefined$1;\n\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" &&\n                hasOwn.call(this, name) &&\n                !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n\n      stop: function() {\n        this.done = true;\n\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n\n      dispatchException: function(exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !! caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n\n      abrupt: function(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc <= this.prev &&\n              hasOwn.call(entry, \"finallyLoc\") &&\n              this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry &&\n            (type === \"break\" ||\n             type === \"continue\") &&\n            finallyEntry.tryLoc <= arg &&\n            arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n\n      complete: function(record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" ||\n            record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n\n      finish: function(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n\n      \"catch\": function(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n            return thrown;\n          }\n        }\n\n        // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n        throw new Error(\"illegal catch attempt\");\n      },\n\n      delegateYield: function(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    };\n  })(\n    // In sloppy mode, unbound `this` refers to the global object, fallback to\n    // Function constructor if we're in global strict mode. That is sadly a form\n    // of indirect eval which violates Content Security Policy.\n    (function() {\n      return this || (typeof self === \"object\" && self);\n    })() || Function(\"return this\")()\n  );\n  });\n\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  // This method of obtaining a reference to the global object needs to be\n  // kept identical to the way it is obtained in runtime.js\n  var g = (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")();\n\n  // Use `getOwnPropertyNames` because not all browsers support calling\n  // `hasOwnProperty` on the global `self` object in a worker. See #183.\n  var hadRuntime = g.regeneratorRuntime &&\n    Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n  // Save the old regeneratorRuntime in case it needs to be restored later.\n  var oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n  // Force reevalutation of runtime.js.\n  g.regeneratorRuntime = undefined;\n\n  var runtimeModule = runtime;\n\n  if (hadRuntime) {\n    // Restore the original runtime.\n    g.regeneratorRuntime = oldRuntime;\n  } else {\n    // Remove the global property added by runtime.js.\n    try {\n      delete g.regeneratorRuntime;\n    } catch(e) {\n      g.regeneratorRuntime = undefined;\n    }\n  }\n\n  var regenerator = runtimeModule;\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    }\n  }\n\n  var arrayWithoutHoles = _arrayWithoutHoles;\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  var iterableToArray = _iterableToArray;\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var nonIterableSpread = _nonIterableSpread;\n\n  function _toConsumableArray(arr) {\n    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n  }\n\n  var toConsumableArray = _toConsumableArray;\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n          args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  var asyncToGenerator = _asyncToGenerator;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var classCallCheck = _classCallCheck;\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  var createClass = _createClass;\n\n  var _typeof_1 = createCommonjsModule(function (module) {\n  function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n      module.exports = _typeof = function _typeof(obj) {\n        return _typeof2(obj);\n      };\n    } else {\n      module.exports = _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  module.exports = _typeof;\n  });\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  var assertThisInitialized = _assertThisInitialized;\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (_typeof_1(call) === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return assertThisInitialized(self);\n  }\n\n  var possibleConstructorReturn = _possibleConstructorReturn;\n\n  var getPrototypeOf = createCommonjsModule(function (module) {\n  function _getPrototypeOf(o) {\n    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  module.exports = _getPrototypeOf;\n  });\n\n  var setPrototypeOf = createCommonjsModule(function (module) {\n  function _setPrototypeOf(o, p) {\n    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  module.exports = _setPrototypeOf;\n  });\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) setPrototypeOf(subClass, superClass);\n  }\n\n  var inherits = _inherits;\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var defineProperty = _defineProperty;\n\n  var reactIs_production_min = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports,\"__esModule\",{value:!0});\n  var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?Symbol.for(\"react.suspense_list\"):\n  60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.fundamental\"):60117,w=b?Symbol.for(\"react.responder\"):60118,x=b?Symbol.for(\"react.scope\"):60119;function y(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case t:case r:case d:return u}}}function z(a){return y(a)===m}\n  exports.typeOf=y;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;\n  exports.isValidElementType=function(a){return \"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===v||a.$$typeof===w||a.$$typeof===x)};exports.isAsyncMode=function(a){return z(a)||y(a)===l};exports.isConcurrentMode=z;exports.isContextConsumer=function(a){return y(a)===k};exports.isContextProvider=function(a){return y(a)===h};\n  exports.isElement=function(a){return \"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return y(a)===n};exports.isFragment=function(a){return y(a)===e};exports.isLazy=function(a){return y(a)===t};exports.isMemo=function(a){return y(a)===r};exports.isPortal=function(a){return y(a)===d};exports.isProfiler=function(a){return y(a)===g};exports.isStrictMode=function(a){return y(a)===f};exports.isSuspense=function(a){return y(a)===p};\n  });\n\n  unwrapExports(reactIs_production_min);\n  var reactIs_production_min_1 = reactIs_production_min.typeOf;\n  var reactIs_production_min_2 = reactIs_production_min.AsyncMode;\n  var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;\n  var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;\n  var reactIs_production_min_5 = reactIs_production_min.ContextProvider;\n  var reactIs_production_min_6 = reactIs_production_min.Element;\n  var reactIs_production_min_7 = reactIs_production_min.ForwardRef;\n  var reactIs_production_min_8 = reactIs_production_min.Fragment;\n  var reactIs_production_min_9 = reactIs_production_min.Lazy;\n  var reactIs_production_min_10 = reactIs_production_min.Memo;\n  var reactIs_production_min_11 = reactIs_production_min.Portal;\n  var reactIs_production_min_12 = reactIs_production_min.Profiler;\n  var reactIs_production_min_13 = reactIs_production_min.StrictMode;\n  var reactIs_production_min_14 = reactIs_production_min.Suspense;\n  var reactIs_production_min_15 = reactIs_production_min.isValidElementType;\n  var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;\n  var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;\n  var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;\n  var reactIs_production_min_19 = reactIs_production_min.isContextProvider;\n  var reactIs_production_min_20 = reactIs_production_min.isElement;\n  var reactIs_production_min_21 = reactIs_production_min.isForwardRef;\n  var reactIs_production_min_22 = reactIs_production_min.isFragment;\n  var reactIs_production_min_23 = reactIs_production_min.isLazy;\n  var reactIs_production_min_24 = reactIs_production_min.isMemo;\n  var reactIs_production_min_25 = reactIs_production_min.isPortal;\n  var reactIs_production_min_26 = reactIs_production_min.isProfiler;\n  var reactIs_production_min_27 = reactIs_production_min.isStrictMode;\n  var reactIs_production_min_28 = reactIs_production_min.isSuspense;\n\n  var reactIs_development = createCommonjsModule(function (module, exports) {\n\n\n\n  if (true) {\n    (function() {\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n  // nor polyfill, then a plain number is used for performance.\n  var hasSymbol = typeof Symbol === 'function' && Symbol.for;\n  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\n  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\n  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\n  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\n  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\n  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\n  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n  // (unstable) APIs that have been removed. Can we remove the symbols?\n\n  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\n  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\n  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\n  var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\n  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\n  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n  var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\n  var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\n  var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\n  function isValidElementType(type) {\n    return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);\n  }\n\n  /**\n   * Forked from fbjs/warning:\n   * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n   *\n   * Only change is we use console.warn instead of console.error,\n   * and do nothing when 'console' is not supported.\n   * This really simplifies the code.\n   * ---\n   * Similar to invariant but only logs a warning if the condition is not met.\n   * This can be used to log issues in development environments in critical\n   * paths. Removing the logging code for production environments will keep the\n   * same logic and follow the same code paths.\n   */\n  var lowPriorityWarningWithoutStack = function () {};\n\n  {\n    var printWarning = function (format) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n\n      if (typeof console !== 'undefined') {\n        console.warn(message);\n      }\n\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n\n    lowPriorityWarningWithoutStack = function (condition, format) {\n      if (format === undefined) {\n        throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n      }\n\n      if (!condition) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n\n        printWarning.apply(void 0, [format].concat(args));\n      }\n    };\n  }\n\n  var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;\n\n  function typeOf(object) {\n    if (typeof object === 'object' && object !== null) {\n      var $$typeof = object.$$typeof;\n\n      switch ($$typeof) {\n        case REACT_ELEMENT_TYPE:\n          var type = object.type;\n\n          switch (type) {\n            case REACT_ASYNC_MODE_TYPE:\n            case REACT_CONCURRENT_MODE_TYPE:\n            case REACT_FRAGMENT_TYPE:\n            case REACT_PROFILER_TYPE:\n            case REACT_STRICT_MODE_TYPE:\n            case REACT_SUSPENSE_TYPE:\n              return type;\n\n            default:\n              var $$typeofType = type && type.$$typeof;\n\n              switch ($$typeofType) {\n                case REACT_CONTEXT_TYPE:\n                case REACT_FORWARD_REF_TYPE:\n                case REACT_PROVIDER_TYPE:\n                  return $$typeofType;\n\n                default:\n                  return $$typeof;\n              }\n\n          }\n\n        case REACT_LAZY_TYPE:\n        case REACT_MEMO_TYPE:\n        case REACT_PORTAL_TYPE:\n          return $$typeof;\n      }\n    }\n\n    return undefined;\n  } // AsyncMode is deprecated along with isAsyncMode\n\n  var AsyncMode = REACT_ASYNC_MODE_TYPE;\n  var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n  var ContextConsumer = REACT_CONTEXT_TYPE;\n  var ContextProvider = REACT_PROVIDER_TYPE;\n  var Element = REACT_ELEMENT_TYPE;\n  var ForwardRef = REACT_FORWARD_REF_TYPE;\n  var Fragment = REACT_FRAGMENT_TYPE;\n  var Lazy = REACT_LAZY_TYPE;\n  var Memo = REACT_MEMO_TYPE;\n  var Portal = REACT_PORTAL_TYPE;\n  var Profiler = REACT_PROFILER_TYPE;\n  var StrictMode = REACT_STRICT_MODE_TYPE;\n  var Suspense = REACT_SUSPENSE_TYPE;\n  var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\n  function isAsyncMode(object) {\n    {\n      if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n        hasWarnedAboutDeprecatedIsAsyncMode = true;\n        lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n      }\n    }\n\n    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n  }\n  function isConcurrentMode(object) {\n    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n  }\n  function isContextConsumer(object) {\n    return typeOf(object) === REACT_CONTEXT_TYPE;\n  }\n  function isContextProvider(object) {\n    return typeOf(object) === REACT_PROVIDER_TYPE;\n  }\n  function isElement(object) {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n  function isForwardRef(object) {\n    return typeOf(object) === REACT_FORWARD_REF_TYPE;\n  }\n  function isFragment(object) {\n    return typeOf(object) === REACT_FRAGMENT_TYPE;\n  }\n  function isLazy(object) {\n    return typeOf(object) === REACT_LAZY_TYPE;\n  }\n  function isMemo(object) {\n    return typeOf(object) === REACT_MEMO_TYPE;\n  }\n  function isPortal(object) {\n    return typeOf(object) === REACT_PORTAL_TYPE;\n  }\n  function isProfiler(object) {\n    return typeOf(object) === REACT_PROFILER_TYPE;\n  }\n  function isStrictMode(object) {\n    return typeOf(object) === REACT_STRICT_MODE_TYPE;\n  }\n  function isSuspense(object) {\n    return typeOf(object) === REACT_SUSPENSE_TYPE;\n  }\n\n  exports.typeOf = typeOf;\n  exports.AsyncMode = AsyncMode;\n  exports.ConcurrentMode = ConcurrentMode;\n  exports.ContextConsumer = ContextConsumer;\n  exports.ContextProvider = ContextProvider;\n  exports.Element = Element;\n  exports.ForwardRef = ForwardRef;\n  exports.Fragment = Fragment;\n  exports.Lazy = Lazy;\n  exports.Memo = Memo;\n  exports.Portal = Portal;\n  exports.Profiler = Profiler;\n  exports.StrictMode = StrictMode;\n  exports.Suspense = Suspense;\n  exports.isValidElementType = isValidElementType;\n  exports.isAsyncMode = isAsyncMode;\n  exports.isConcurrentMode = isConcurrentMode;\n  exports.isContextConsumer = isContextConsumer;\n  exports.isContextProvider = isContextProvider;\n  exports.isElement = isElement;\n  exports.isForwardRef = isForwardRef;\n  exports.isFragment = isFragment;\n  exports.isLazy = isLazy;\n  exports.isMemo = isMemo;\n  exports.isPortal = isPortal;\n  exports.isProfiler = isProfiler;\n  exports.isStrictMode = isStrictMode;\n  exports.isSuspense = isSuspense;\n    })();\n  }\n  });\n\n  unwrapExports(reactIs_development);\n  var reactIs_development_1 = reactIs_development.typeOf;\n  var reactIs_development_2 = reactIs_development.AsyncMode;\n  var reactIs_development_3 = reactIs_development.ConcurrentMode;\n  var reactIs_development_4 = reactIs_development.ContextConsumer;\n  var reactIs_development_5 = reactIs_development.ContextProvider;\n  var reactIs_development_6 = reactIs_development.Element;\n  var reactIs_development_7 = reactIs_development.ForwardRef;\n  var reactIs_development_8 = reactIs_development.Fragment;\n  var reactIs_development_9 = reactIs_development.Lazy;\n  var reactIs_development_10 = reactIs_development.Memo;\n  var reactIs_development_11 = reactIs_development.Portal;\n  var reactIs_development_12 = reactIs_development.Profiler;\n  var reactIs_development_13 = reactIs_development.StrictMode;\n  var reactIs_development_14 = reactIs_development.Suspense;\n  var reactIs_development_15 = reactIs_development.isValidElementType;\n  var reactIs_development_16 = reactIs_development.isAsyncMode;\n  var reactIs_development_17 = reactIs_development.isConcurrentMode;\n  var reactIs_development_18 = reactIs_development.isContextConsumer;\n  var reactIs_development_19 = reactIs_development.isContextProvider;\n  var reactIs_development_20 = reactIs_development.isElement;\n  var reactIs_development_21 = reactIs_development.isForwardRef;\n  var reactIs_development_22 = reactIs_development.isFragment;\n  var reactIs_development_23 = reactIs_development.isLazy;\n  var reactIs_development_24 = reactIs_development.isMemo;\n  var reactIs_development_25 = reactIs_development.isPortal;\n  var reactIs_development_26 = reactIs_development.isProfiler;\n  var reactIs_development_27 = reactIs_development.isStrictMode;\n  var reactIs_development_28 = reactIs_development.isSuspense;\n\n  var reactIs = createCommonjsModule(function (module) {\n\n  if (false) {} else {\n    module.exports = reactIs_development;\n  }\n  });\n\n  /*\n  object-assign\n  (c) Sindre Sorhus\n  @license MIT\n  */\n  /* eslint-disable no-unused-vars */\n  var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n  function toObject(val) {\n  \tif (val === null || val === undefined) {\n  \t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n  \t}\n\n  \treturn Object(val);\n  }\n\n  function shouldUseNative() {\n  \ttry {\n  \t\tif (!Object.assign) {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\t// Detect buggy property enumeration order in older V8 versions.\n\n  \t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n  \t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n  \t\ttest1[5] = 'de';\n  \t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n  \t\tvar test2 = {};\n  \t\tfor (var i = 0; i < 10; i++) {\n  \t\t\ttest2['_' + String.fromCharCode(i)] = i;\n  \t\t}\n  \t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n  \t\t\treturn test2[n];\n  \t\t});\n  \t\tif (order2.join('') !== '0123456789') {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n  \t\tvar test3 = {};\n  \t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n  \t\t\ttest3[letter] = letter;\n  \t\t});\n  \t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n  \t\t\t\t'abcdefghijklmnopqrst') {\n  \t\t\treturn false;\n  \t\t}\n\n  \t\treturn true;\n  \t} catch (err) {\n  \t\t// We don't expect any of the above to throw, but better to be safe.\n  \t\treturn false;\n  \t}\n  }\n\n  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  \tvar from;\n  \tvar to = toObject(target);\n  \tvar symbols;\n\n  \tfor (var s = 1; s < arguments.length; s++) {\n  \t\tfrom = Object(arguments[s]);\n\n  \t\tfor (var key in from) {\n  \t\t\tif (hasOwnProperty.call(from, key)) {\n  \t\t\t\tto[key] = from[key];\n  \t\t\t}\n  \t\t}\n\n  \t\tif (getOwnPropertySymbols) {\n  \t\t\tsymbols = getOwnPropertySymbols(from);\n  \t\t\tfor (var i = 0; i < symbols.length; i++) {\n  \t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n  \t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n\n  \treturn to;\n  };\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\n  var ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\n  var printWarning = function() {};\n\n  if (true) {\n    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;\n    var loggedTypeFailures = {};\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    printWarning = function(text) {\n      var message = 'Warning: ' + text;\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n  }\n\n  /**\n   * Assert that the values match with the type specs.\n   * Error messages are memorized and will only be shown once.\n   *\n   * @param {object} typeSpecs Map of name to a ReactPropType\n   * @param {object} values Runtime values that need to be type-checked\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @param {string} componentName Name of the component for error messages.\n   * @param {?Function} getStack Returns the component stack.\n   * @private\n   */\n  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n    if (true) {\n      for (var typeSpecName in typeSpecs) {\n        if (has(typeSpecs, typeSpecName)) {\n          var error;\n          // Prop type validation may throw. In case they do, we don't want to\n          // fail the render phase where it didn't fail before. So we log it.\n          // After these have been cleaned up, we'll let them throw.\n          try {\n            // This is intentionally an invariant that gets caught. It's the same\n            // behavior as without this statement except with a better message.\n            if (typeof typeSpecs[typeSpecName] !== 'function') {\n              var err = Error(\n                (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n              );\n              err.name = 'Invariant Violation';\n              throw err;\n            }\n            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);\n          } catch (ex) {\n            error = ex;\n          }\n          if (error && !(error instanceof Error)) {\n            printWarning(\n              (componentName || 'React class') + ': type specification of ' +\n              location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).'\n            );\n          }\n          if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n            // Only monitor this failure once because there tends to be a lot of the\n            // same error.\n            loggedTypeFailures[error.message] = true;\n\n            var stack = getStack ? getStack() : '';\n\n            printWarning(\n              'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets warning cache when testing.\n   *\n   * @private\n   */\n  checkPropTypes.resetWarningCache = function() {\n    if (true) {\n      loggedTypeFailures = {};\n    }\n  };\n\n  var checkPropTypes_1 = checkPropTypes;\n\n  var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);\n  var printWarning$1 = function() {};\n\n  if (true) {\n    printWarning$1 = function(text) {\n      var message = 'Warning: ' + text;\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n  }\n\n  function emptyFunctionThatReturnsNull() {\n    return null;\n  }\n\n  var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {\n    /* global Symbol */\n    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n    /**\n     * Returns the iterator method function contained on the iterable object.\n     *\n     * Be sure to invoke the function with the iterable as context:\n     *\n     *     var iteratorFn = getIteratorFn(myIterable);\n     *     if (iteratorFn) {\n     *       var iterator = iteratorFn.call(myIterable);\n     *       ...\n     *     }\n     *\n     * @param {?object} maybeIterable\n     * @return {?function}\n     */\n    function getIteratorFn(maybeIterable) {\n      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n      if (typeof iteratorFn === 'function') {\n        return iteratorFn;\n      }\n    }\n\n    /**\n     * Collection of methods that allow declaration and validation of props that are\n     * supplied to React components. Example usage:\n     *\n     *   var Props = require('ReactPropTypes');\n     *   var MyArticle = React.createClass({\n     *     propTypes: {\n     *       // An optional string prop named \"description\".\n     *       description: Props.string,\n     *\n     *       // A required enum prop named \"category\".\n     *       category: Props.oneOf(['News','Photos']).isRequired,\n     *\n     *       // A prop named \"dialog\" that requires an instance of Dialog.\n     *       dialog: Props.instanceOf(Dialog).isRequired\n     *     },\n     *     render: function() { ... }\n     *   });\n     *\n     * A more formal specification of how these methods are used:\n     *\n     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n     *   decl := ReactPropTypes.{type}(.isRequired)?\n     *\n     * Each and every declaration produces a function with the same signature. This\n     * allows the creation of custom validation functions. For example:\n     *\n     *  var MyLink = React.createClass({\n     *    propTypes: {\n     *      // An optional string or URI prop named \"href\".\n     *      href: function(props, propName, componentName) {\n     *        var propValue = props[propName];\n     *        if (propValue != null && typeof propValue !== 'string' &&\n     *            !(propValue instanceof URI)) {\n     *          return new Error(\n     *            'Expected a string or an URI for ' + propName + ' in ' +\n     *            componentName\n     *          );\n     *        }\n     *      }\n     *    },\n     *    render: function() {...}\n     *  });\n     *\n     * @internal\n     */\n\n    var ANONYMOUS = '<<anonymous>>';\n\n    // Important!\n    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n    var ReactPropTypes = {\n      array: createPrimitiveTypeChecker('array'),\n      bool: createPrimitiveTypeChecker('boolean'),\n      func: createPrimitiveTypeChecker('function'),\n      number: createPrimitiveTypeChecker('number'),\n      object: createPrimitiveTypeChecker('object'),\n      string: createPrimitiveTypeChecker('string'),\n      symbol: createPrimitiveTypeChecker('symbol'),\n\n      any: createAnyTypeChecker(),\n      arrayOf: createArrayOfTypeChecker,\n      element: createElementTypeChecker(),\n      elementType: createElementTypeTypeChecker(),\n      instanceOf: createInstanceTypeChecker,\n      node: createNodeChecker(),\n      objectOf: createObjectOfTypeChecker,\n      oneOf: createEnumTypeChecker,\n      oneOfType: createUnionTypeChecker,\n      shape: createShapeTypeChecker,\n      exact: createStrictShapeTypeChecker,\n    };\n\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n    /*eslint-disable no-self-compare*/\n    function is(x, y) {\n      // SameValue algorithm\n      if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n      } else {\n        // Step 6.a: NaN == NaN\n        return x !== x && y !== y;\n      }\n    }\n    /*eslint-enable no-self-compare*/\n\n    /**\n     * We use an Error-like object for backward compatibility as people may call\n     * PropTypes directly and inspect their output. However, we don't use real\n     * Errors anymore. We don't inspect their stack anyway, and creating them\n     * is prohibitively expensive if they are created too often, such as what\n     * happens in oneOfType() for any type before the one that matched.\n     */\n    function PropTypeError(message) {\n      this.message = message;\n      this.stack = '';\n    }\n    // Make `instanceof Error` still work for returned errors.\n    PropTypeError.prototype = Error.prototype;\n\n    function createChainableTypeChecker(validate) {\n      if (true) {\n        var manualPropTypeCallCache = {};\n        var manualPropTypeWarningCount = 0;\n      }\n      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n        componentName = componentName || ANONYMOUS;\n        propFullName = propFullName || propName;\n\n        if (secret !== ReactPropTypesSecret_1) {\n          if (throwOnDirectAccess) {\n            // New behavior only for users of `prop-types` package\n            var err = new Error(\n              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n              'Use `PropTypes.checkPropTypes()` to call them. ' +\n              'Read more at http://fb.me/use-check-prop-types'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          } else if ( true && typeof console !== 'undefined') {\n            // Old behavior for people using React.PropTypes\n            var cacheKey = componentName + ':' + propName;\n            if (\n              !manualPropTypeCallCache[cacheKey] &&\n              // Avoid spamming the console because they are often not actionable except for lib authors\n              manualPropTypeWarningCount < 3\n            ) {\n              printWarning$1(\n                'You are manually calling a React.PropTypes validation ' +\n                'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n                'and will throw in the standalone `prop-types` package. ' +\n                'You may be seeing this warning due to a third-party PropTypes ' +\n                'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n              );\n              manualPropTypeCallCache[cacheKey] = true;\n              manualPropTypeWarningCount++;\n            }\n          }\n        }\n        if (props[propName] == null) {\n          if (isRequired) {\n            if (props[propName] === null) {\n              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n            }\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n          }\n          return null;\n        } else {\n          return validate(props, propName, componentName, location, propFullName);\n        }\n      }\n\n      var chainedCheckType = checkType.bind(null, false);\n      chainedCheckType.isRequired = checkType.bind(null, true);\n\n      return chainedCheckType;\n    }\n\n    function createPrimitiveTypeChecker(expectedType) {\n      function validate(props, propName, componentName, location, propFullName, secret) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== expectedType) {\n          // `propValue` being instance of, say, date/regexp, pass the 'object'\n          // check, but we can offer a more precise error message here rather than\n          // 'of type `object`'.\n          var preciseType = getPreciseType(propValue);\n\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createAnyTypeChecker() {\n      return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n    }\n\n    function createArrayOfTypeChecker(typeChecker) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (typeof typeChecker !== 'function') {\n          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n        }\n        var propValue = props[propName];\n        if (!Array.isArray(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n        }\n        for (var i = 0; i < propValue.length; i++) {\n          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createElementTypeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        if (!isValidElement(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createElementTypeTypeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        if (!reactIs.isValidElementType(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createInstanceTypeChecker(expectedClass) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (!(props[propName] instanceof expectedClass)) {\n          var expectedClassName = expectedClass.name || ANONYMOUS;\n          var actualClassName = getClassName(props[propName]);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createEnumTypeChecker(expectedValues) {\n      if (!Array.isArray(expectedValues)) {\n        if (true) {\n          if (arguments.length > 1) {\n            printWarning$1(\n              'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n              'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n            );\n          } else {\n            printWarning$1('Invalid argument supplied to oneOf, expected an array.');\n          }\n        }\n        return emptyFunctionThatReturnsNull;\n      }\n\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        for (var i = 0; i < expectedValues.length; i++) {\n          if (is(propValue, expectedValues[i])) {\n            return null;\n          }\n        }\n\n        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n          var type = getPreciseType(value);\n          if (type === 'symbol') {\n            return String(value);\n          }\n          return value;\n        });\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createObjectOfTypeChecker(typeChecker) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (typeof typeChecker !== 'function') {\n          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n        }\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n        }\n        for (var key in propValue) {\n          if (has$1(propValue, key)) {\n            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n            if (error instanceof Error) {\n              return error;\n            }\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createUnionTypeChecker(arrayOfTypeCheckers) {\n      if (!Array.isArray(arrayOfTypeCheckers)) {\n         true ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;\n        return emptyFunctionThatReturnsNull;\n      }\n\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (typeof checker !== 'function') {\n          printWarning$1(\n            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n            'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n          );\n          return emptyFunctionThatReturnsNull;\n        }\n      }\n\n      function validate(props, propName, componentName, location, propFullName) {\n        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n          var checker = arrayOfTypeCheckers[i];\n          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {\n            return null;\n          }\n        }\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createNodeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (!isNode(props[propName])) {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createShapeTypeChecker(shapeTypes) {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n        }\n        for (var key in shapeTypes) {\n          var checker = shapeTypes[key];\n          if (!checker) {\n            continue;\n          }\n          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n          if (error) {\n            return error;\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n\n    function createStrictShapeTypeChecker(shapeTypes) {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n        }\n        // We need to check all keys in case some are required but missing from\n        // props.\n        var allKeys = objectAssign({}, props[propName], shapeTypes);\n        for (var key in allKeys) {\n          var checker = shapeTypes[key];\n          if (!checker) {\n            return new PropTypeError(\n              'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n              '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n              '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n            );\n          }\n          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n          if (error) {\n            return error;\n          }\n        }\n        return null;\n      }\n\n      return createChainableTypeChecker(validate);\n    }\n\n    function isNode(propValue) {\n      switch (typeof propValue) {\n        case 'number':\n        case 'string':\n        case 'undefined':\n          return true;\n        case 'boolean':\n          return !propValue;\n        case 'object':\n          if (Array.isArray(propValue)) {\n            return propValue.every(isNode);\n          }\n          if (propValue === null || isValidElement(propValue)) {\n            return true;\n          }\n\n          var iteratorFn = getIteratorFn(propValue);\n          if (iteratorFn) {\n            var iterator = iteratorFn.call(propValue);\n            var step;\n            if (iteratorFn !== propValue.entries) {\n              while (!(step = iterator.next()).done) {\n                if (!isNode(step.value)) {\n                  return false;\n                }\n              }\n            } else {\n              // Iterator will provide entry [k,v] tuples rather than values.\n              while (!(step = iterator.next()).done) {\n                var entry = step.value;\n                if (entry) {\n                  if (!isNode(entry[1])) {\n                    return false;\n                  }\n                }\n              }\n            }\n          } else {\n            return false;\n          }\n\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    function isSymbol(propType, propValue) {\n      // Native Symbol.\n      if (propType === 'symbol') {\n        return true;\n      }\n\n      // falsy value can't be a Symbol\n      if (!propValue) {\n        return false;\n      }\n\n      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n      if (propValue['@@toStringTag'] === 'Symbol') {\n        return true;\n      }\n\n      // Fallback for non-spec compliant Symbols which are polyfilled.\n      if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n        return true;\n      }\n\n      return false;\n    }\n\n    // Equivalent of `typeof` but with special handling for array and regexp.\n    function getPropType(propValue) {\n      var propType = typeof propValue;\n      if (Array.isArray(propValue)) {\n        return 'array';\n      }\n      if (propValue instanceof RegExp) {\n        // Old webkits (at least until Android 4.0) return 'function' rather than\n        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n        // passes PropTypes.object.\n        return 'object';\n      }\n      if (isSymbol(propType, propValue)) {\n        return 'symbol';\n      }\n      return propType;\n    }\n\n    // This handles more types than `getPropType`. Only used for error messages.\n    // See `createPrimitiveTypeChecker`.\n    function getPreciseType(propValue) {\n      if (typeof propValue === 'undefined' || propValue === null) {\n        return '' + propValue;\n      }\n      var propType = getPropType(propValue);\n      if (propType === 'object') {\n        if (propValue instanceof Date) {\n          return 'date';\n        } else if (propValue instanceof RegExp) {\n          return 'regexp';\n        }\n      }\n      return propType;\n    }\n\n    // Returns a string that is postfixed to a warning about an invalid type.\n    // For example, \"undefined\" or \"of type array\"\n    function getPostfixForTypeWarning(value) {\n      var type = getPreciseType(value);\n      switch (type) {\n        case 'array':\n        case 'object':\n          return 'an ' + type;\n        case 'boolean':\n        case 'date':\n        case 'regexp':\n          return 'a ' + type;\n        default:\n          return type;\n      }\n    }\n\n    // Returns class name of the object, if any.\n    function getClassName(propValue) {\n      if (!propValue.constructor || !propValue.constructor.name) {\n        return ANONYMOUS;\n      }\n      return propValue.constructor.name;\n    }\n\n    ReactPropTypes.checkPropTypes = checkPropTypes_1;\n    ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n\n    return ReactPropTypes;\n  };\n\n  function emptyFunction() {}\n  function emptyFunctionWithReset() {}\n  emptyFunctionWithReset.resetWarningCache = emptyFunction;\n\n  var factoryWithThrowingShims = function() {\n    function shim(props, propName, componentName, location, propFullName, secret) {\n      if (secret === ReactPropTypesSecret_1) {\n        // It is still safe when called from React.\n        return;\n      }\n      var err = new Error(\n        'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n        'Use PropTypes.checkPropTypes() to call them. ' +\n        'Read more at http://fb.me/use-check-prop-types'\n      );\n      err.name = 'Invariant Violation';\n      throw err;\n    }  shim.isRequired = shim;\n    function getShim() {\n      return shim;\n    }  // Important!\n    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n    var ReactPropTypes = {\n      array: shim,\n      bool: shim,\n      func: shim,\n      number: shim,\n      object: shim,\n      string: shim,\n      symbol: shim,\n\n      any: shim,\n      arrayOf: getShim,\n      element: shim,\n      elementType: shim,\n      instanceOf: getShim,\n      node: shim,\n      objectOf: getShim,\n      oneOf: getShim,\n      oneOfType: getShim,\n      shape: getShim,\n      exact: getShim,\n\n      checkPropTypes: emptyFunctionWithReset,\n      resetWarningCache: emptyFunction\n    };\n\n    ReactPropTypes.PropTypes = ReactPropTypes;\n\n    return ReactPropTypes;\n  };\n\n  var propTypes = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  if (true) {\n    var ReactIs = reactIs;\n\n    // By explicitly using `prop-types` you are opting into new development behavior.\n    // http://fb.me/prop-types-in-prod\n    var throwOnDirectAccess = true;\n    module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);\n  } else {}\n  });\n\n  var classnames = createCommonjsModule(function (module) {\n  /*!\n    Copyright (c) 2017 Jed Watson.\n    Licensed under the MIT License (MIT), see\n    http://jedwatson.github.io/classnames\n  */\n  /* global define */\n\n  (function () {\n\n  \tvar hasOwn = {}.hasOwnProperty;\n\n  \tfunction classNames () {\n  \t\tvar classes = [];\n\n  \t\tfor (var i = 0; i < arguments.length; i++) {\n  \t\t\tvar arg = arguments[i];\n  \t\t\tif (!arg) continue;\n\n  \t\t\tvar argType = typeof arg;\n\n  \t\t\tif (argType === 'string' || argType === 'number') {\n  \t\t\t\tclasses.push(arg);\n  \t\t\t} else if (Array.isArray(arg) && arg.length) {\n  \t\t\t\tvar inner = classNames.apply(null, arg);\n  \t\t\t\tif (inner) {\n  \t\t\t\t\tclasses.push(inner);\n  \t\t\t\t}\n  \t\t\t} else if (argType === 'object') {\n  \t\t\t\tfor (var key in arg) {\n  \t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n  \t\t\t\t\t\tclasses.push(key);\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\treturn classes.join(' ');\n  \t}\n\n  \tif ( module.exports) {\n  \t\tclassNames.default = classNames;\n  \t\tmodule.exports = classNames;\n  \t} else {\n  \t\twindow.classNames = classNames;\n  \t}\n  }());\n  });\n\n  function styleInject(css, ref) {\n    if ( ref === void 0 ) ref = {};\n    var insertAt = ref.insertAt;\n\n    if (!css || typeof document === 'undefined') { return; }\n\n    var head = document.head || document.getElementsByTagName('head')[0];\n    var style = document.createElement('style');\n    style.type = 'text/css';\n\n    if (insertAt === 'top') {\n      if (head.firstChild) {\n        head.insertBefore(style, head.firstChild);\n      } else {\n        head.appendChild(style);\n      }\n    } else {\n      head.appendChild(style);\n    }\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(document.createTextNode(css));\n    }\n  }\n\n  var css = \".scroll {\\n  height: 100%;\\n  padding: 5px;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n.scroll .scroll-holder {\\n  height: calc(100% - 20px);\\n  margin-top: 5px;\\n  position: relative;\\n  width: 12px;\\n}\\n.scroll .scroll-holder .imageSlider {\\n  height: 12px;\\n  left: 12px;\\n  padding: 0;\\n  position: absolute;\\n  top: 0;\\n  transform: rotate(90deg);\\n  transform-origin: top left;\\n  -webkit-appearance: none;\\n  background-color: rgba(0, 0, 0, 0);\\n}\\n.scroll .scroll-holder .imageSlider:focus {\\n  outline: none;\\n}\\n.scroll .scroll-holder .imageSlider::-moz-focus-outer {\\n  border: none;\\n}\\n.scroll .scroll-holder .imageSlider::-webkit-slider-runnable-track {\\n  background-color: rgba(0, 0, 0, 0);\\n  border: none;\\n  cursor: pointer;\\n  height: 5px;\\n  z-index: 6;\\n}\\n.scroll .scroll-holder .imageSlider::-moz-range-track {\\n  background-color: rgba(0, 0, 0, 0);\\n  border: none;\\n  cursor: pointer;\\n  height: 2px;\\n  z-index: 6;\\n}\\n.scroll .scroll-holder .imageSlider::-ms-track {\\n  animate: 0.2s;\\n  background: transparent;\\n  border: none;\\n  border-width: 15px 0;\\n  color: rgba(0, 0, 0, 0);\\n  cursor: pointer;\\n  height: 12px;\\n  width: 100%;\\n}\\n.scroll .scroll-holder .imageSlider::-ms-fill-lower {\\n  background: rgba(0, 0, 0, 0);\\n}\\n.scroll .scroll-holder .imageSlider::-ms-fill-upper {\\n  background: rgba(0, 0, 0, 0);\\n}\\n.scroll .scroll-holder .imageSlider::-webkit-slider-thumb {\\n  -webkit-appearance: none !important;\\n  background-color: #163239;\\n  border: none;\\n  border-radius: 57px;\\n  cursor: -webkit-grab;\\n  height: 12px;\\n  margin-top: -4px;\\n  width: 39px;\\n}\\n.scroll .scroll-holder .imageSlider::-webkit-slider-thumb:active {\\n  background-color: #20a5d6;\\n  cursor: -webkit-grabbing;\\n}\\n.scroll .scroll-holder .imageSlider::-moz-range-thumb {\\n  background-color: #163239;\\n  border: none;\\n  border-radius: 57px;\\n  cursor: -moz-grab;\\n  height: 12px;\\n  width: 39px;\\n  z-index: 7;\\n}\\n.scroll .scroll-holder .imageSlider::-moz-range-thumb:active {\\n  background-color: #20a5d6;\\n  cursor: -moz-grabbing;\\n}\\n.scroll .scroll-holder .imageSlider::-ms-thumb {\\n  background-color: #163239;\\n  border: none;\\n  border-radius: 57px;\\n  cursor: ns-resize;\\n  height: 12px;\\n  width: 39px;\\n}\\n.scroll .scroll-holder .imageSlider::-ms-thumb:active {\\n  background-color: #20a5d6;\\n}\\n.scroll .scroll-holder .imageSlider::-ms-tooltip {\\n  display: none;\\n}\\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\\n  .imageSlider {\\n    left: 50px;\\n  }\\n}\\n\";\n  styleInject(css);\n\n  var ImageScrollbar =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    inherits(ImageScrollbar, _PureComponent);\n\n    function ImageScrollbar() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      classCallCheck(this, ImageScrollbar);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ImageScrollbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      defineProperty(assertThisInitialized(_this), \"onChange\", function (event) {\n        var intValue = parseInt(event.target.value, 10);\n\n        _this.props.onInputCallback(intValue);\n      });\n\n      defineProperty(assertThisInitialized(_this), \"onKeyDown\", function (event) {\n        // We don't allow direct keyboard up/down input on the\n        // image sliders since the natural direction is reversed (0 is at the top)\n        // Store the KeyCodes in an object for readability\n        var keys = {\n          DOWN: 40,\n          UP: 38\n        }; // TODO: Enable scroll down / scroll up without depending on ohif-core\n\n        if (event.which === keys.DOWN) {\n          //OHIF.commands.run('scrollDown');\n          event.preventDefault();\n        } else if (event.which === keys.UP) {\n          //OHIF.commands.run('scrollUp');\n          event.preventDefault();\n        }\n      });\n\n      return _this;\n    }\n\n    createClass(ImageScrollbar, [{\n      key: \"render\",\n      value: function render() {\n        if (this.props.max === 0) {\n          return null;\n        }\n\n        this.style = {\n          width: \"\".concat(this.props.height)\n        };\n        return React__default.createElement(\"div\", {\n          className: \"scroll\"\n        }, React__default.createElement(\"div\", {\n          className: \"scroll-holder\"\n        }, React__default.createElement(\"input\", {\n          className: \"imageSlider\",\n          style: this.style,\n          type: \"range\",\n          min: \"0\",\n          max: this.props.max,\n          step: \"1\",\n          value: this.props.value,\n          onChange: this.onChange,\n          onKeyDown: this.onKeyDown\n        })));\n      }\n    }]);\n\n    return ImageScrollbar;\n  }(React.PureComponent);\n\n  defineProperty(ImageScrollbar, \"propTypes\", {\n    value: propTypes.number.isRequired,\n    max: propTypes.number.isRequired,\n    height: propTypes.string.isRequired,\n    onInputCallback: propTypes.func.isRequired\n  });\n\n  /**\n   * Formats a patient name for display purposes\n   */\n  function formatPN(name) {\n    if (!name) {\n      return;\n    } // Convert the first ^ to a ', '. String.replace() only affects\n    // the first appearance of the character.\n\n\n    var commaBetweenFirstAndLast = name.replace('^', ', '); // Replace any remaining '^' characters with spaces\n\n    var cleaned = commaBetweenFirstAndLast.replace(/\\^/g, ' '); // Trim any extraneous whitespace\n\n    return cleaned.trim();\n  }\n\n  /**\n   * @name toDate\n   * @category Common Helpers\n   * @summary Convert the given argument to an instance of Date.\n   *\n   * @description\n   * Convert the given argument to an instance of Date.\n   *\n   * If the argument is an instance of Date, the function returns its clone.\n   *\n   * If the argument is a number, it is treated as a timestamp.\n   *\n   * If the argument is none of the above, the function returns Invalid Date.\n   *\n   * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n   *\n   * @param {Date|Number} argument - the value to convert\n   * @returns {Date} the parsed date in the local time zone\n   * @throws {TypeError} 1 argument required\n   *\n   * @example\n   * // Clone the date:\n   * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n   * //=> Tue Feb 11 2014 11:30:30\n   *\n   * @example\n   * // Convert the timestamp to date:\n   * const result = toDate(1392098430000)\n   * //=> Tue Feb 11 2014 11:30:30\n   */\n  function toDate(argument) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n    if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n      // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n      return new Date(argument.getTime());\n    } else if (typeof argument === 'number' || argStr === '[object Number]') {\n      return new Date(argument);\n    } else {\n      if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n        // eslint-disable-next-line no-console\n        console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n        console.warn(new Error().stack);\n      }\n\n      return new Date(NaN);\n    }\n  }\n\n  function toInteger(dirtyNumber) {\n    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n      return NaN;\n    }\n\n    var number = Number(dirtyNumber);\n\n    if (isNaN(number)) {\n      return number;\n    }\n\n    return number < 0 ? Math.ceil(number) : Math.floor(number);\n  }\n\n  /**\n   * @name addMilliseconds\n   * @category Millisecond Helpers\n   * @summary Add the specified number of milliseconds to the given date.\n   *\n   * @description\n   * Add the specified number of milliseconds to the given date.\n   *\n   * ### v2.0.0 breaking changes:\n   *\n   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n   *\n   * @param {Date|Number} date - the date to be changed\n   * @param {Number} amount - the amount of milliseconds to be added\n   * @returns {Date} the new date with the milliseconds added\n   * @throws {TypeError} 2 arguments required\n   *\n   * @example\n   * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n   * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n   * //=> Thu Jul 10 2014 12:45:30.750\n   */\n\n  function addMilliseconds(dirtyDate, dirtyAmount) {\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var timestamp = toDate(dirtyDate).getTime();\n    var amount = toInteger(dirtyAmount);\n    return new Date(timestamp + amount);\n  }\n\n  var MILLISECONDS_IN_MINUTE = 60000;\n  /**\n   * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n   * They usually appear for dates that denote time before the timezones were introduced\n   * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n   * and GMT+01:00:00 after that date)\n   *\n   * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n   * which would lead to incorrect calculations.\n   *\n   * This function returns the timezone offset in milliseconds that takes seconds in account.\n   */\n\n  function getTimezoneOffsetInMilliseconds(dirtyDate) {\n    var date = new Date(dirtyDate.getTime());\n    var baseTimezoneOffset = date.getTimezoneOffset();\n    date.setSeconds(0, 0);\n    var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n    return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n  }\n\n  /**\n   * @name isValid\n   * @category Common Helpers\n   * @summary Is the given date valid?\n   *\n   * @description\n   * Returns false if argument is Invalid Date and true otherwise.\n   * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n   * Invalid Date is a Date, whose time value is NaN.\n   *\n   * Time value of Date: http://es5.github.io/#x15.9.1.1\n   *\n   * ### v2.0.0 breaking changes:\n   *\n   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n   *\n   * - Now `isValid` doesn't throw an exception\n   *   if the first argument is not an instance of Date.\n   *   Instead, argument is converted beforehand using `toDate`.\n   *\n   *   Examples:\n   *\n   *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n   *   |---------------------------|---------------|---------------|\n   *   | `new Date()`              | `true`        | `true`        |\n   *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n   *   | `new Date('')`            | `false`       | `false`       |\n   *   | `new Date(1488370835081)` | `true`        | `true`        |\n   *   | `new Date(NaN)`           | `false`       | `false`       |\n   *   | `'2016-01-01'`            | `TypeError`   | `true`        |\n   *   | `''`                      | `TypeError`   | `false`       |\n   *   | `1488370835081`           | `TypeError`   | `true`        |\n   *   | `NaN`                     | `TypeError`   | `false`       |\n   *\n   *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n   *   that try to coerce arguments to the expected type\n   *   (which is also the case with other *date-fns* functions).\n   *\n   * @param {*} date - the date to check\n   * @returns {Boolean} the date is valid\n   * @throws {TypeError} 1 argument required\n   *\n   * @example\n   * // For the valid date:\n   * var result = isValid(new Date(2014, 1, 31))\n   * //=> true\n   *\n   * @example\n   * // For the value, convertable into a date:\n   * var result = isValid(1393804800000)\n   * //=> true\n   *\n   * @example\n   * // For the invalid date:\n   * var result = isValid(new Date(''))\n   * //=> false\n   */\n\n  function isValid(dirtyDate) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate);\n    return !isNaN(date);\n  }\n\n  var formatDistanceLocale = {\n    lessThanXSeconds: {\n      one: 'less than a second',\n      other: 'less than {{count}} seconds'\n    },\n    xSeconds: {\n      one: '1 second',\n      other: '{{count}} seconds'\n    },\n    halfAMinute: 'half a minute',\n    lessThanXMinutes: {\n      one: 'less than a minute',\n      other: 'less than {{count}} minutes'\n    },\n    xMinutes: {\n      one: '1 minute',\n      other: '{{count}} minutes'\n    },\n    aboutXHours: {\n      one: 'about 1 hour',\n      other: 'about {{count}} hours'\n    },\n    xHours: {\n      one: '1 hour',\n      other: '{{count}} hours'\n    },\n    xDays: {\n      one: '1 day',\n      other: '{{count}} days'\n    },\n    aboutXMonths: {\n      one: 'about 1 month',\n      other: 'about {{count}} months'\n    },\n    xMonths: {\n      one: '1 month',\n      other: '{{count}} months'\n    },\n    aboutXYears: {\n      one: 'about 1 year',\n      other: 'about {{count}} years'\n    },\n    xYears: {\n      one: '1 year',\n      other: '{{count}} years'\n    },\n    overXYears: {\n      one: 'over 1 year',\n      other: 'over {{count}} years'\n    },\n    almostXYears: {\n      one: 'almost 1 year',\n      other: 'almost {{count}} years'\n    }\n  };\n  function formatDistance(token, count, options) {\n    options = options || {};\n    var result;\n\n    if (typeof formatDistanceLocale[token] === 'string') {\n      result = formatDistanceLocale[token];\n    } else if (count === 1) {\n      result = formatDistanceLocale[token].one;\n    } else {\n      result = formatDistanceLocale[token].other.replace('{{count}}', count);\n    }\n\n    if (options.addSuffix) {\n      if (options.comparison > 0) {\n        return 'in ' + result;\n      } else {\n        return result + ' ago';\n      }\n    }\n\n    return result;\n  }\n\n  function buildFormatLongFn(args) {\n    return function (dirtyOptions) {\n      var options = dirtyOptions || {};\n      var width = options.width ? String(options.width) : args.defaultWidth;\n      var format = args.formats[width] || args.formats[args.defaultWidth];\n      return format;\n    };\n  }\n\n  var dateFormats = {\n    full: 'EEEE, MMMM do, y',\n    long: 'MMMM do, y',\n    medium: 'MMM d, y',\n    short: 'MM/dd/yyyy'\n  };\n  var timeFormats = {\n    full: 'h:mm:ss a zzzz',\n    long: 'h:mm:ss a z',\n    medium: 'h:mm:ss a',\n    short: 'h:mm a'\n  };\n  var dateTimeFormats = {\n    full: \"{{date}} 'at' {{time}}\",\n    long: \"{{date}} 'at' {{time}}\",\n    medium: '{{date}}, {{time}}',\n    short: '{{date}}, {{time}}'\n  };\n  var formatLong = {\n    date: buildFormatLongFn({\n      formats: dateFormats,\n      defaultWidth: 'full'\n    }),\n    time: buildFormatLongFn({\n      formats: timeFormats,\n      defaultWidth: 'full'\n    }),\n    dateTime: buildFormatLongFn({\n      formats: dateTimeFormats,\n      defaultWidth: 'full'\n    })\n  };\n\n  var formatRelativeLocale = {\n    lastWeek: \"'last' eeee 'at' p\",\n    yesterday: \"'yesterday at' p\",\n    today: \"'today at' p\",\n    tomorrow: \"'tomorrow at' p\",\n    nextWeek: \"eeee 'at' p\",\n    other: 'P'\n  };\n  function formatRelative(token, _date, _baseDate, _options) {\n    return formatRelativeLocale[token];\n  }\n\n  function buildLocalizeFn(args) {\n    return function (dirtyIndex, dirtyOptions) {\n      var options = dirtyOptions || {};\n      var context = options.context ? String(options.context) : 'standalone';\n      var valuesArray;\n\n      if (context === 'formatting' && args.formattingValues) {\n        var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n        var width = options.width ? String(options.width) : defaultWidth;\n        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n      } else {\n        var _defaultWidth = args.defaultWidth;\n\n        var _width = options.width ? String(options.width) : args.defaultWidth;\n\n        valuesArray = args.values[_width] || args.values[_defaultWidth];\n      }\n\n      var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n      return valuesArray[index];\n    };\n  }\n\n  var eraValues = {\n    narrow: ['B', 'A'],\n    abbreviated: ['BC', 'AD'],\n    wide: ['Before Christ', 'Anno Domini']\n  };\n  var quarterValues = {\n    narrow: ['1', '2', '3', '4'],\n    abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n    wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n    // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n    // Generally, formatted dates should look like they are in the middle of a sentence,\n    // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n  };\n  var monthValues = {\n    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n    abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  };\n  var dayValues = {\n    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n    short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n    abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  };\n  var dayPeriodValues = {\n    narrow: {\n      am: 'a',\n      pm: 'p',\n      midnight: 'mi',\n      noon: 'n',\n      morning: 'morning',\n      afternoon: 'afternoon',\n      evening: 'evening',\n      night: 'night'\n    },\n    abbreviated: {\n      am: 'AM',\n      pm: 'PM',\n      midnight: 'midnight',\n      noon: 'noon',\n      morning: 'morning',\n      afternoon: 'afternoon',\n      evening: 'evening',\n      night: 'night'\n    },\n    wide: {\n      am: 'a.m.',\n      pm: 'p.m.',\n      midnight: 'midnight',\n      noon: 'noon',\n      morning: 'morning',\n      afternoon: 'afternoon',\n      evening: 'evening',\n      night: 'night'\n    }\n  };\n  var formattingDayPeriodValues = {\n    narrow: {\n      am: 'a',\n      pm: 'p',\n      midnight: 'mi',\n      noon: 'n',\n      morning: 'in the morning',\n      afternoon: 'in the afternoon',\n      evening: 'in the evening',\n      night: 'at night'\n    },\n    abbreviated: {\n      am: 'AM',\n      pm: 'PM',\n      midnight: 'midnight',\n      noon: 'noon',\n      morning: 'in the morning',\n      afternoon: 'in the afternoon',\n      evening: 'in the evening',\n      night: 'at night'\n    },\n    wide: {\n      am: 'a.m.',\n      pm: 'p.m.',\n      midnight: 'midnight',\n      noon: 'noon',\n      morning: 'in the morning',\n      afternoon: 'in the afternoon',\n      evening: 'in the evening',\n      night: 'at night'\n    }\n  };\n\n  function ordinalNumber(dirtyNumber, _dirtyOptions) {\n    var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n    // if they are different for different grammatical genders,\n    // use `options.unit`:\n    //\n    //   var options = dirtyOptions || {}\n    //   var unit = String(options.unit)\n    //\n    // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n    // 'day', 'hour', 'minute', 'second'\n\n    var rem100 = number % 100;\n\n    if (rem100 > 20 || rem100 < 10) {\n      switch (rem100 % 10) {\n        case 1:\n          return number + 'st';\n\n        case 2:\n          return number + 'nd';\n\n        case 3:\n          return number + 'rd';\n      }\n    }\n\n    return number + 'th';\n  }\n\n  var localize = {\n    ordinalNumber: ordinalNumber,\n    era: buildLocalizeFn({\n      values: eraValues,\n      defaultWidth: 'wide'\n    }),\n    quarter: buildLocalizeFn({\n      values: quarterValues,\n      defaultWidth: 'wide',\n      argumentCallback: function (quarter) {\n        return Number(quarter) - 1;\n      }\n    }),\n    month: buildLocalizeFn({\n      values: monthValues,\n      defaultWidth: 'wide'\n    }),\n    day: buildLocalizeFn({\n      values: dayValues,\n      defaultWidth: 'wide'\n    }),\n    dayPeriod: buildLocalizeFn({\n      values: dayPeriodValues,\n      defaultWidth: 'wide',\n      formattingValues: formattingDayPeriodValues,\n      defaultFormattingWidth: 'wide'\n    })\n  };\n\n  function buildMatchPatternFn(args) {\n    return function (dirtyString, dirtyOptions) {\n      var string = String(dirtyString);\n      var options = dirtyOptions || {};\n      var matchResult = string.match(args.matchPattern);\n\n      if (!matchResult) {\n        return null;\n      }\n\n      var matchedString = matchResult[0];\n      var parseResult = string.match(args.parsePattern);\n\n      if (!parseResult) {\n        return null;\n      }\n\n      var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n      value = options.valueCallback ? options.valueCallback(value) : value;\n      return {\n        value: value,\n        rest: string.slice(matchedString.length)\n      };\n    };\n  }\n\n  function buildMatchFn(args) {\n    return function (dirtyString, dirtyOptions) {\n      var string = String(dirtyString);\n      var options = dirtyOptions || {};\n      var width = options.width;\n      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n      var matchResult = string.match(matchPattern);\n\n      if (!matchResult) {\n        return null;\n      }\n\n      var matchedString = matchResult[0];\n      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n      var value;\n\n      if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n        value = parsePatterns.findIndex(function (pattern) {\n          return pattern.test(string);\n        });\n      } else {\n        value = findKey(parsePatterns, function (pattern) {\n          return pattern.test(string);\n        });\n      }\n\n      value = args.valueCallback ? args.valueCallback(value) : value;\n      value = options.valueCallback ? options.valueCallback(value) : value;\n      return {\n        value: value,\n        rest: string.slice(matchedString.length)\n      };\n    };\n  }\n\n  function findKey(object, predicate) {\n    for (var key in object) {\n      if (object.hasOwnProperty(key) && predicate(object[key])) {\n        return key;\n      }\n    }\n  }\n\n  var matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\n  var parseOrdinalNumberPattern = /\\d+/i;\n  var matchEraPatterns = {\n    narrow: /^(b|a)/i,\n    abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n    wide: /^(before christ|before common era|anno domini|common era)/i\n  };\n  var parseEraPatterns = {\n    any: [/^b/i, /^(a|c)/i]\n  };\n  var matchQuarterPatterns = {\n    narrow: /^[1234]/i,\n    abbreviated: /^q[1234]/i,\n    wide: /^[1234](th|st|nd|rd)? quarter/i\n  };\n  var parseQuarterPatterns = {\n    any: [/1/i, /2/i, /3/i, /4/i]\n  };\n  var matchMonthPatterns = {\n    narrow: /^[jfmasond]/i,\n    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n  };\n  var parseMonthPatterns = {\n    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n  };\n  var matchDayPatterns = {\n    narrow: /^[smtwf]/i,\n    short: /^(su|mo|tu|we|th|fr|sa)/i,\n    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n  };\n  var parseDayPatterns = {\n    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n  };\n  var matchDayPeriodPatterns = {\n    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n    any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n  };\n  var parseDayPeriodPatterns = {\n    any: {\n      am: /^a/i,\n      pm: /^p/i,\n      midnight: /^mi/i,\n      noon: /^no/i,\n      morning: /morning/i,\n      afternoon: /afternoon/i,\n      evening: /evening/i,\n      night: /night/i\n    }\n  };\n  var match = {\n    ordinalNumber: buildMatchPatternFn({\n      matchPattern: matchOrdinalNumberPattern,\n      parsePattern: parseOrdinalNumberPattern,\n      valueCallback: function (value) {\n        return parseInt(value, 10);\n      }\n    }),\n    era: buildMatchFn({\n      matchPatterns: matchEraPatterns,\n      defaultMatchWidth: 'wide',\n      parsePatterns: parseEraPatterns,\n      defaultParseWidth: 'any'\n    }),\n    quarter: buildMatchFn({\n      matchPatterns: matchQuarterPatterns,\n      defaultMatchWidth: 'wide',\n      parsePatterns: parseQuarterPatterns,\n      defaultParseWidth: 'any',\n      valueCallback: function (index) {\n        return index + 1;\n      }\n    }),\n    month: buildMatchFn({\n      matchPatterns: matchMonthPatterns,\n      defaultMatchWidth: 'wide',\n      parsePatterns: parseMonthPatterns,\n      defaultParseWidth: 'any'\n    }),\n    day: buildMatchFn({\n      matchPatterns: matchDayPatterns,\n      defaultMatchWidth: 'wide',\n      parsePatterns: parseDayPatterns,\n      defaultParseWidth: 'any'\n    }),\n    dayPeriod: buildMatchFn({\n      matchPatterns: matchDayPeriodPatterns,\n      defaultMatchWidth: 'any',\n      parsePatterns: parseDayPeriodPatterns,\n      defaultParseWidth: 'any'\n    })\n  };\n\n  /**\n   * @type {Locale}\n   * @category Locales\n   * @summary English locale (United States).\n   * @language English\n   * @iso-639-2 eng\n   * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n   * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n   */\n\n  var locale = {\n    formatDistance: formatDistance,\n    formatLong: formatLong,\n    formatRelative: formatRelative,\n    localize: localize,\n    match: match,\n    options: {\n      weekStartsOn: 0\n      /* Sunday */\n      ,\n      firstWeekContainsDate: 1\n    }\n  };\n\n  /**\n   * @name subMilliseconds\n   * @category Millisecond Helpers\n   * @summary Subtract the specified number of milliseconds from the given date.\n   *\n   * @description\n   * Subtract the specified number of milliseconds from the given date.\n   *\n   * ### v2.0.0 breaking changes:\n   *\n   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n   *\n   * @param {Date|Number} date - the date to be changed\n   * @param {Number} amount - the amount of milliseconds to be subtracted\n   * @returns {Date} the new date with the milliseconds subtracted\n   * @throws {TypeError} 2 arguments required\n   *\n   * @example\n   * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n   * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n   * //=> Thu Jul 10 2014 12:45:29.250\n   */\n\n  function subMilliseconds(dirtyDate, dirtyAmount) {\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var amount = toInteger(dirtyAmount);\n    return addMilliseconds(dirtyDate, -amount);\n  }\n\n  function addLeadingZeros(number, targetLength) {\n    var sign = number < 0 ? '-' : '';\n    var output = Math.abs(number).toString();\n\n    while (output.length < targetLength) {\n      output = '0' + output;\n    }\n\n    return sign + output;\n  }\n\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* |                                |\n   * |  d  | Day of month                   |  D  |                                |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  y  | Year (abs)                     |  Y  |                                |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   */\n\n  var formatters = {\n    // Year\n    y: function (date, token) {\n      // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n      // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n      // |----------|-------|----|-------|-------|-------|\n      // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n      // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n      // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n      // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n      // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n    },\n    // Month\n    M: function (date, token) {\n      var month = date.getUTCMonth();\n      return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n    },\n    // Day of the month\n    d: function (date, token) {\n      return addLeadingZeros(date.getUTCDate(), token.length);\n    },\n    // AM or PM\n    a: function (date, token) {\n      var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return dayPeriodEnumValue.toUpperCase();\n\n        case 'aaaaa':\n          return dayPeriodEnumValue[0];\n\n        case 'aaaa':\n        default:\n          return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n      }\n    },\n    // Hour [1-12]\n    h: function (date, token) {\n      return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n    },\n    // Hour [0-23]\n    H: function (date, token) {\n      return addLeadingZeros(date.getUTCHours(), token.length);\n    },\n    // Minute\n    m: function (date, token) {\n      return addLeadingZeros(date.getUTCMinutes(), token.length);\n    },\n    // Second\n    s: function (date, token) {\n      return addLeadingZeros(date.getUTCSeconds(), token.length);\n    },\n    // Fraction of second\n    S: function (date, token) {\n      var numberOfDigits = token.length;\n      var milliseconds = date.getUTCMilliseconds();\n      var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n      return addLeadingZeros(fractionalSeconds, token.length);\n    }\n  };\n\n  var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function getUTCDayOfYear(dirtyDate) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate);\n    var timestamp = date.getTime();\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n    var startOfYearTimestamp = date.getTime();\n    var difference = timestamp - startOfYearTimestamp;\n    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function startOfUTCISOWeek(dirtyDate) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var weekStartsOn = 1;\n    var date = toDate(dirtyDate);\n    var day = date.getUTCDay();\n    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n    date.setUTCDate(date.getUTCDate() - diff);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function getUTCISOWeekYear(dirtyDate) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate);\n    var year = date.getUTCFullYear();\n    var fourthOfJanuaryOfNextYear = new Date(0);\n    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n    var fourthOfJanuaryOfThisYear = new Date(0);\n    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n    if (date.getTime() >= startOfNextYear.getTime()) {\n      return year + 1;\n    } else if (date.getTime() >= startOfThisYear.getTime()) {\n      return year;\n    } else {\n      return year - 1;\n    }\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function startOfUTCISOWeekYear(dirtyDate) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var year = getUTCISOWeekYear(dirtyDate);\n    var fourthOfJanuary = new Date(0);\n    fourthOfJanuary.setUTCFullYear(year, 0, 4);\n    fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n    var date = startOfUTCISOWeek(fourthOfJanuary);\n    return date;\n  }\n\n  var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function getUTCISOWeek(dirtyDate) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate);\n    var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n    // because the number of milliseconds in a week is not constant\n    // (e.g. it's different in the week of the daylight saving time clock shift)\n\n    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function startOfUTCWeek(dirtyDate, dirtyOptions) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var options = dirtyOptions || {};\n    var locale = options.locale;\n    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n    }\n\n    var date = toDate(dirtyDate);\n    var day = date.getUTCDay();\n    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n    date.setUTCDate(date.getUTCDate() - diff);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function getUTCWeekYear(dirtyDate, dirtyOptions) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate, dirtyOptions);\n    var year = date.getUTCFullYear();\n    var options = dirtyOptions || {};\n    var locale = options.locale;\n    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n      throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n    }\n\n    var firstWeekOfNextYear = new Date(0);\n    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n    var firstWeekOfThisYear = new Date(0);\n    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n    if (date.getTime() >= startOfNextYear.getTime()) {\n      return year + 1;\n    } else if (date.getTime() >= startOfThisYear.getTime()) {\n      return year;\n    } else {\n      return year - 1;\n    }\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var options = dirtyOptions || {};\n    var locale = options.locale;\n    var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n    var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n    var firstWeek = new Date(0);\n    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n    firstWeek.setUTCHours(0, 0, 0, 0);\n    var date = startOfUTCWeek(firstWeek, dirtyOptions);\n    return date;\n  }\n\n  var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function getUTCWeek(dirtyDate, options) {\n    if (arguments.length < 1) {\n      throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate);\n    var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n    // because the number of milliseconds in a week is not constant\n    // (e.g. it's different in the week of the daylight saving time clock shift)\n\n    return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;\n  }\n\n  var dayPeriodEnum = {\n    am: 'am',\n    pm: 'pm',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n    /*\n     * |     | Unit                           |     | Unit                           |\n     * |-----|--------------------------------|-----|--------------------------------|\n     * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n     * |  d  | Day of month                   |  D  | Day of year                    |\n     * |  e  | Local day of week              |  E  | Day of week                    |\n     * |  f  |                                |  F* | Day of week in month           |\n     * |  g* | Modified Julian day            |  G  | Era                            |\n     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n     * |  i! | ISO day of week                |  I! | ISO week of year               |\n     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n     * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n     * |  m  | Minute                         |  M  | Month                          |\n     * |  n  |                                |  N  |                                |\n     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n     * |  p! | Long localized time            |  P! | Long localized date            |\n     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n     * |  s  | Second                         |  S  | Fraction of second             |\n     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n     * |  u  | Extended year                  |  U* | Cyclic year                    |\n     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n     * |  w  | Local week of year             |  W* | Week of month                  |\n     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n     *\n     * Letters marked by * are not implemented but reserved by Unicode standard.\n     *\n     * Letters marked by ! are non-standard, but implemented by date-fns:\n     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n     *   i.e. 7 for Sunday, 1 for Monday, etc.\n     * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n     *   `R` is supposed to be used in conjunction with `I` and `i`\n     *   for universal ISO week-numbering date, whereas\n     *   `Y` is supposed to be used in conjunction with `w` and `e`\n     *   for week-numbering date specific to the locale.\n     * - `P` is long localized date format\n     * - `p` is long localized time format\n     */\n\n  };\n  var formatters$1 = {\n    // Era\n    G: function (date, token, localize) {\n      var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return localize.era(era, {\n            width: 'abbreviated'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return localize.era(era, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return localize.era(era, {\n            width: 'wide'\n          });\n      }\n    },\n    // Year\n    y: function (date, token, localize) {\n      // Ordinal number\n      if (token === 'yo') {\n        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n        var year = signedYear > 0 ? signedYear : 1 - signedYear;\n        return localize.ordinalNumber(year, {\n          unit: 'year'\n        });\n      }\n\n      return formatters.y(date, token);\n    },\n    // Local week-numbering year\n    Y: function (date, token, localize, options) {\n      var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n      if (token === 'YY') {\n        var twoDigitYear = weekYear % 100;\n        return addLeadingZeros(twoDigitYear, 2);\n      } // Ordinal number\n\n\n      if (token === 'Yo') {\n        return localize.ordinalNumber(weekYear, {\n          unit: 'year'\n        });\n      } // Padding\n\n\n      return addLeadingZeros(weekYear, token.length);\n    },\n    // ISO week-numbering year\n    R: function (date, token) {\n      var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n      return addLeadingZeros(isoWeekYear, token.length);\n    },\n    // Extended year. This is a single number designating the year of this calendar system.\n    // The main difference between `y` and `u` localizers are B.C. years:\n    // | Year | `y` | `u` |\n    // |------|-----|-----|\n    // | AC 1 |   1 |   1 |\n    // | BC 1 |   1 |   0 |\n    // | BC 2 |   2 |  -1 |\n    // Also `yy` always returns the last two digits of a year,\n    // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n    u: function (date, token) {\n      var year = date.getUTCFullYear();\n      return addLeadingZeros(year, token.length);\n    },\n    // Quarter\n    Q: function (date, token, localize) {\n      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n          return String(quarter);\n        // 01, 02, 03, 04\n\n        case 'QQ':\n          return addLeadingZeros(quarter, 2);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return localize.ordinalNumber(quarter, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return localize.quarter(quarter, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return localize.quarter(quarter, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return localize.quarter(quarter, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // Stand-alone quarter\n    q: function (date, token, localize) {\n      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n          return String(quarter);\n        // 01, 02, 03, 04\n\n        case 'qq':\n          return addLeadingZeros(quarter, 2);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return localize.ordinalNumber(quarter, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return localize.quarter(quarter, {\n            width: 'abbreviated',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return localize.quarter(quarter, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return localize.quarter(quarter, {\n            width: 'wide',\n            context: 'standalone'\n          });\n      }\n    },\n    // Month\n    M: function (date, token, localize) {\n      var month = date.getUTCMonth();\n\n      switch (token) {\n        case 'M':\n        case 'MM':\n          return formatters.M(date, token);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return localize.ordinalNumber(month + 1, {\n            unit: 'month'\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return localize.month(month, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return localize.month(month, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return localize.month(month, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // Stand-alone month\n    L: function (date, token, localize) {\n      var month = date.getUTCMonth();\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return String(month + 1);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return addLeadingZeros(month + 1, 2);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return localize.ordinalNumber(month + 1, {\n            unit: 'month'\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return localize.month(month, {\n            width: 'abbreviated',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return localize.month(month, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return localize.month(month, {\n            width: 'wide',\n            context: 'standalone'\n          });\n      }\n    },\n    // Local week of year\n    w: function (date, token, localize, options) {\n      var week = getUTCWeek(date, options);\n\n      if (token === 'wo') {\n        return localize.ordinalNumber(week, {\n          unit: 'week'\n        });\n      }\n\n      return addLeadingZeros(week, token.length);\n    },\n    // ISO week of year\n    I: function (date, token, localize) {\n      var isoWeek = getUTCISOWeek(date);\n\n      if (token === 'Io') {\n        return localize.ordinalNumber(isoWeek, {\n          unit: 'week'\n        });\n      }\n\n      return addLeadingZeros(isoWeek, token.length);\n    },\n    // Day of the month\n    d: function (date, token, localize) {\n      if (token === 'do') {\n        return localize.ordinalNumber(date.getUTCDate(), {\n          unit: 'date'\n        });\n      }\n\n      return formatters.d(date, token);\n    },\n    // Day of year\n    D: function (date, token, localize) {\n      var dayOfYear = getUTCDayOfYear(date);\n\n      if (token === 'Do') {\n        return localize.ordinalNumber(dayOfYear, {\n          unit: 'dayOfYear'\n        });\n      }\n\n      return addLeadingZeros(dayOfYear, token.length);\n    },\n    // Day of week\n    E: function (date, token, localize) {\n      var dayOfWeek = date.getUTCDay();\n\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return localize.day(dayOfWeek, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return localize.day(dayOfWeek, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return localize.day(dayOfWeek, {\n            width: 'short',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return localize.day(dayOfWeek, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // Local day of week\n    e: function (date, token, localize, options) {\n      var dayOfWeek = date.getUTCDay();\n      var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n      switch (token) {\n        // Numerical value (Nth day of week with current locale or weekStartsOn)\n        case 'e':\n          return String(localDayOfWeek);\n        // Padded numerical value\n\n        case 'ee':\n          return addLeadingZeros(localDayOfWeek, 2);\n        // 1st, 2nd, ..., 7th\n\n        case 'eo':\n          return localize.ordinalNumber(localDayOfWeek, {\n            unit: 'day'\n          });\n\n        case 'eee':\n          return localize.day(dayOfWeek, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return localize.day(dayOfWeek, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return localize.day(dayOfWeek, {\n            width: 'short',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return localize.day(dayOfWeek, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // Stand-alone local day of week\n    c: function (date, token, localize, options) {\n      var dayOfWeek = date.getUTCDay();\n      var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n      switch (token) {\n        // Numerical value (same as in `e`)\n        case 'c':\n          return String(localDayOfWeek);\n        // Padded numerical value\n\n        case 'cc':\n          return addLeadingZeros(localDayOfWeek, token.length);\n        // 1st, 2nd, ..., 7th\n\n        case 'co':\n          return localize.ordinalNumber(localDayOfWeek, {\n            unit: 'day'\n          });\n\n        case 'ccc':\n          return localize.day(dayOfWeek, {\n            width: 'abbreviated',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return localize.day(dayOfWeek, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return localize.day(dayOfWeek, {\n            width: 'short',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return localize.day(dayOfWeek, {\n            width: 'wide',\n            context: 'standalone'\n          });\n      }\n    },\n    // ISO day of week\n    i: function (date, token, localize) {\n      var dayOfWeek = date.getUTCDay();\n      var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n      switch (token) {\n        // 2\n        case 'i':\n          return String(isoDayOfWeek);\n        // 02\n\n        case 'ii':\n          return addLeadingZeros(isoDayOfWeek, token.length);\n        // 2nd\n\n        case 'io':\n          return localize.ordinalNumber(isoDayOfWeek, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return localize.day(dayOfWeek, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n        // T\n\n        case 'iiiii':\n          return localize.day(dayOfWeek, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'iiiiii':\n          return localize.day(dayOfWeek, {\n            width: 'short',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return localize.day(dayOfWeek, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // AM or PM\n    a: function (date, token, localize) {\n      var hours = date.getUTCHours();\n      var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // AM, PM, midnight, noon\n    b: function (date, token, localize) {\n      var hours = date.getUTCHours();\n      var dayPeriodEnumValue;\n\n      if (hours === 12) {\n        dayPeriodEnumValue = dayPeriodEnum.noon;\n      } else if (hours === 0) {\n        dayPeriodEnumValue = dayPeriodEnum.midnight;\n      } else {\n        dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n      }\n\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // in the morning, in the afternoon, in the evening, at night\n    B: function (date, token, localize) {\n      var hours = date.getUTCHours();\n      var dayPeriodEnumValue;\n\n      if (hours >= 17) {\n        dayPeriodEnumValue = dayPeriodEnum.evening;\n      } else if (hours >= 12) {\n        dayPeriodEnumValue = dayPeriodEnum.afternoon;\n      } else if (hours >= 4) {\n        dayPeriodEnumValue = dayPeriodEnum.morning;\n      } else {\n        dayPeriodEnumValue = dayPeriodEnum.night;\n      }\n\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'abbreviated',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return localize.dayPeriod(dayPeriodEnumValue, {\n            width: 'wide',\n            context: 'formatting'\n          });\n      }\n    },\n    // Hour [1-12]\n    h: function (date, token, localize) {\n      if (token === 'ho') {\n        var hours = date.getUTCHours() % 12;\n        if (hours === 0) hours = 12;\n        return localize.ordinalNumber(hours, {\n          unit: 'hour'\n        });\n      }\n\n      return formatters.h(date, token);\n    },\n    // Hour [0-23]\n    H: function (date, token, localize) {\n      if (token === 'Ho') {\n        return localize.ordinalNumber(date.getUTCHours(), {\n          unit: 'hour'\n        });\n      }\n\n      return formatters.H(date, token);\n    },\n    // Hour [0-11]\n    K: function (date, token, localize) {\n      var hours = date.getUTCHours() % 12;\n\n      if (token === 'Ko') {\n        return localize.ordinalNumber(hours, {\n          unit: 'hour'\n        });\n      }\n\n      return addLeadingZeros(hours, token.length);\n    },\n    // Hour [1-24]\n    k: function (date, token, localize) {\n      var hours = date.getUTCHours();\n      if (hours === 0) hours = 24;\n\n      if (token === 'ko') {\n        return localize.ordinalNumber(hours, {\n          unit: 'hour'\n        });\n      }\n\n      return addLeadingZeros(hours, token.length);\n    },\n    // Minute\n    m: function (date, token, localize) {\n      if (token === 'mo') {\n        return localize.ordinalNumber(date.getUTCMinutes(), {\n          unit: 'minute'\n        });\n      }\n\n      return formatters.m(date, token);\n    },\n    // Second\n    s: function (date, token, localize) {\n      if (token === 'so') {\n        return localize.ordinalNumber(date.getUTCSeconds(), {\n          unit: 'second'\n        });\n      }\n\n      return formatters.s(date, token);\n    },\n    // Fraction of second\n    S: function (date, token) {\n      return formatters.S(date, token);\n    },\n    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n    X: function (date, token, _localize, options) {\n      var originalDate = options._originalDate || date;\n      var timezoneOffset = originalDate.getTimezoneOffset();\n\n      if (timezoneOffset === 0) {\n        return 'Z';\n      }\n\n      switch (token) {\n        // Hours and optional minutes\n        case 'X':\n          return formatTimezoneWithOptionalMinutes(timezoneOffset);\n        // Hours, minutes and optional seconds without `:` delimiter\n        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n        // so this token always has the same output as `XX`\n\n        case 'XXXX':\n        case 'XX':\n          // Hours and minutes without `:` delimiter\n          return formatTimezone(timezoneOffset);\n        // Hours, minutes and optional seconds with `:` delimiter\n        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n        // so this token always has the same output as `XXX`\n\n        case 'XXXXX':\n        case 'XXX': // Hours and minutes with `:` delimiter\n\n        default:\n          return formatTimezone(timezoneOffset, ':');\n      }\n    },\n    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n    x: function (date, token, _localize, options) {\n      var originalDate = options._originalDate || date;\n      var timezoneOffset = originalDate.getTimezoneOffset();\n\n      switch (token) {\n        // Hours and optional minutes\n        case 'x':\n          return formatTimezoneWithOptionalMinutes(timezoneOffset);\n        // Hours, minutes and optional seconds without `:` delimiter\n        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n        // so this token always has the same output as `xx`\n\n        case 'xxxx':\n        case 'xx':\n          // Hours and minutes without `:` delimiter\n          return formatTimezone(timezoneOffset);\n        // Hours, minutes and optional seconds with `:` delimiter\n        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n        // so this token always has the same output as `xxx`\n\n        case 'xxxxx':\n        case 'xxx': // Hours and minutes with `:` delimiter\n\n        default:\n          return formatTimezone(timezoneOffset, ':');\n      }\n    },\n    // Timezone (GMT)\n    O: function (date, token, _localize, options) {\n      var originalDate = options._originalDate || date;\n      var timezoneOffset = originalDate.getTimezoneOffset();\n\n      switch (token) {\n        // Short\n        case 'O':\n        case 'OO':\n        case 'OOO':\n          return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n        // Long\n\n        case 'OOOO':\n        default:\n          return 'GMT' + formatTimezone(timezoneOffset, ':');\n      }\n    },\n    // Timezone (specific non-location)\n    z: function (date, token, _localize, options) {\n      var originalDate = options._originalDate || date;\n      var timezoneOffset = originalDate.getTimezoneOffset();\n\n      switch (token) {\n        // Short\n        case 'z':\n        case 'zz':\n        case 'zzz':\n          return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n        // Long\n\n        case 'zzzz':\n        default:\n          return 'GMT' + formatTimezone(timezoneOffset, ':');\n      }\n    },\n    // Seconds timestamp\n    t: function (date, token, _localize, options) {\n      var originalDate = options._originalDate || date;\n      var timestamp = Math.floor(originalDate.getTime() / 1000);\n      return addLeadingZeros(timestamp, token.length);\n    },\n    // Milliseconds timestamp\n    T: function (date, token, _localize, options) {\n      var originalDate = options._originalDate || date;\n      var timestamp = originalDate.getTime();\n      return addLeadingZeros(timestamp, token.length);\n    }\n  };\n\n  function formatTimezoneShort(offset, dirtyDelimiter) {\n    var sign = offset > 0 ? '-' : '+';\n    var absOffset = Math.abs(offset);\n    var hours = Math.floor(absOffset / 60);\n    var minutes = absOffset % 60;\n\n    if (minutes === 0) {\n      return sign + String(hours);\n    }\n\n    var delimiter = dirtyDelimiter || '';\n    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n  }\n\n  function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n    if (offset % 60 === 0) {\n      var sign = offset > 0 ? '-' : '+';\n      return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n    }\n\n    return formatTimezone(offset, dirtyDelimiter);\n  }\n\n  function formatTimezone(offset, dirtyDelimiter) {\n    var delimiter = dirtyDelimiter || '';\n    var sign = offset > 0 ? '-' : '+';\n    var absOffset = Math.abs(offset);\n    var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n    var minutes = addLeadingZeros(absOffset % 60, 2);\n    return sign + hours + delimiter + minutes;\n  }\n\n  function dateLongFormatter(pattern, formatLong) {\n    switch (pattern) {\n      case 'P':\n        return formatLong.date({\n          width: 'short'\n        });\n\n      case 'PP':\n        return formatLong.date({\n          width: 'medium'\n        });\n\n      case 'PPP':\n        return formatLong.date({\n          width: 'long'\n        });\n\n      case 'PPPP':\n      default:\n        return formatLong.date({\n          width: 'full'\n        });\n    }\n  }\n\n  function timeLongFormatter(pattern, formatLong) {\n    switch (pattern) {\n      case 'p':\n        return formatLong.time({\n          width: 'short'\n        });\n\n      case 'pp':\n        return formatLong.time({\n          width: 'medium'\n        });\n\n      case 'ppp':\n        return formatLong.time({\n          width: 'long'\n        });\n\n      case 'pppp':\n      default:\n        return formatLong.time({\n          width: 'full'\n        });\n    }\n  }\n\n  function dateTimeLongFormatter(pattern, formatLong) {\n    var matchResult = pattern.match(/(P+)(p+)?/);\n    var datePattern = matchResult[1];\n    var timePattern = matchResult[2];\n\n    if (!timePattern) {\n      return dateLongFormatter(pattern, formatLong);\n    }\n\n    var dateTimeFormat;\n\n    switch (datePattern) {\n      case 'P':\n        dateTimeFormat = formatLong.dateTime({\n          width: 'short'\n        });\n        break;\n\n      case 'PP':\n        dateTimeFormat = formatLong.dateTime({\n          width: 'medium'\n        });\n        break;\n\n      case 'PPP':\n        dateTimeFormat = formatLong.dateTime({\n          width: 'long'\n        });\n        break;\n\n      case 'PPPP':\n      default:\n        dateTimeFormat = formatLong.dateTime({\n          width: 'full'\n        });\n        break;\n    }\n\n    return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n  }\n\n  var longFormatters = {\n    p: timeLongFormatter,\n    P: dateTimeLongFormatter\n  };\n\n  var protectedDayOfYearTokens = ['D', 'DD'];\n  var protectedWeekYearTokens = ['YY', 'YYYY'];\n  function isProtectedDayOfYearToken(token) {\n    return protectedDayOfYearTokens.indexOf(token) !== -1;\n  }\n  function isProtectedWeekYearToken(token) {\n    return protectedWeekYearTokens.indexOf(token) !== -1;\n  }\n  function throwProtectedError(token) {\n    if (token === 'YYYY') {\n      throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr');\n    } else if (token === 'YY') {\n      throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr');\n    } else if (token === 'D') {\n      throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr');\n    } else if (token === 'DD') {\n      throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr');\n    }\n  }\n\n  // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n  //   (one of the certain letters followed by `o`)\n  // - (\\w)\\1* matches any sequences of the same letter\n  // - '' matches two quote characters in a row\n  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n  //   except a single quote symbol, which ends the sequence.\n  //   Two quote characters do not end the sequence.\n  //   If there is no matching single quote\n  //   then the sequence will continue until the end of the string.\n  // - . matches any single character unmatched by previous parts of the RegExps\n\n  var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n  // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\n  var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n  var escapedStringRegExp = /^'([^]*?)'?$/;\n  var doubleQuoteRegExp = /''/g;\n  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n  /**\n   * @name format\n   * @category Common Helpers\n   * @summary Format the date.\n   *\n   * @description\n   * Return the formatted date string in the given format. The result may vary by locale.\n   *\n   * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n   * > See: https://git.io/fxCyr\n   *\n   * The characters wrapped between two single quotes characters (') are escaped.\n   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n   * (see the last example)\n   *\n   * Format of the string is based on Unicode Technical Standard #35:\n   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   * with a few additions (see note 7 below the table).\n   *\n   * Accepted patterns:\n   * | Unit                            | Pattern | Result examples                   | Notes |\n   * |---------------------------------|---------|-----------------------------------|-------|\n   * | Era                             | G..GGG  | AD, BC                            |       |\n   * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n   * |                                 | GGGGG   | A, B                              |       |\n   * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n   * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n   * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n   * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n   * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n   * |                                 | yyyyy   | ...                               | 3,5   |\n   * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n   * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n   * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n   * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n   * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n   * |                                 | YYYYY   | ...                               | 3,5   |\n   * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n   * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n   * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n   * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n   * |                                 | RRRRR   | ...                               | 3,5,7 |\n   * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n   * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n   * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n   * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n   * |                                 | uuuuu   | ...                               | 3,5   |\n   * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n   * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n   * |                                 | QQ      | 01, 02, 03, 04                    |       |\n   * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n   * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n   * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n   * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n   * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n   * |                                 | qq      | 01, 02, 03, 04                    |       |\n   * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n   * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n   * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n   * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n   * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n   * |                                 | MM      | 01, 02, ..., 12                   |       |\n   * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n   * |                                 | MMMM    | January, February, ..., December  | 2     |\n   * |                                 | MMMMM   | J, F, ..., D                      |       |\n   * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n   * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n   * |                                 | LL      | 01, 02, ..., 12                   |       |\n   * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n   * |                                 | LLLL    | January, February, ..., December  | 2     |\n   * |                                 | LLLLL   | J, F, ..., D                      |       |\n   * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n   * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n   * |                                 | ww      | 01, 02, ..., 53                   |       |\n   * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n   * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n   * |                                 | II      | 01, 02, ..., 53                   | 7     |\n   * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n   * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n   * |                                 | dd      | 01, 02, ..., 31                   |       |\n   * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n   * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n   * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n   * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n   * |                                 | DDDD    | ...                               | 3     |\n   * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n   * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n   * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n   * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n   * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n   * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n   * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n   * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n   * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n   * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n   * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n   * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n   * |                                 | ee      | 02, 03, ..., 01                   |       |\n   * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n   * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n   * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n   * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n   * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n   * |                                 | cc      | 02, 03, ..., 01                   |       |\n   * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n   * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n   * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n   * | AM, PM                          | a..aaa  | AM, PM                            |       |\n   * |                                 | aaaa    | a.m., p.m.                        | 2     |\n   * |                                 | aaaaa   | a, p                              |       |\n   * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n   * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n   * |                                 | bbbbb   | a, p, n, mi                       |       |\n   * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n   * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n   * |                                 | BBBBB   | at night, in the morning, ...     |       |\n   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n   * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n   * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n   * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n   * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n   * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n   * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n   * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n   * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n   * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n   * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n   * | Minute                          | m       | 0, 1, ..., 59                     |       |\n   * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n   * |                                 | mm      | 00, 01, ..., 59                   |       |\n   * | Second                          | s       | 0, 1, ..., 59                     |       |\n   * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n   * |                                 | ss      | 00, 01, ..., 59                   |       |\n   * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n   * |                                 | SS      | 00, 01, ..., 99                   |       |\n   * |                                 | SSS     | 000, 0001, ..., 999               |       |\n   * |                                 | SSSS    | ...                               | 3     |\n   * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n   * |                                 | XX      | -0800, +0530, Z                   |       |\n   * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n   * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n   * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n   * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n   * |                                 | xx      | -0800, +0530, +0000               |       |\n   * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n   * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n   * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n   * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n   * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n   * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n   * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n   * | Seconds timestamp               | t       | 512969520                         | 7     |\n   * |                                 | tt      | ...                               | 3,7   |\n   * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n   * |                                 | TT      | ...                               | 3,7   |\n   * | Long localized date             | P       | 05/29/1453                        | 7     |\n   * |                                 | PP      | May 29, 1453                      | 7     |\n   * |                                 | PPP     | May 29th, 1453                    | 7     |\n   * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n   * | Long localized time             | p       | 12:00 AM                          | 7     |\n   * |                                 | pp      | 12:00:00 AM                       | 7     |\n   * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n   * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n   * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n   * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n   * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n   * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n   * Notes:\n   * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n   *    are the same as \"stand-alone\" units, but are different in some languages.\n   *    \"Formatting\" units are declined according to the rules of the language\n   *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n   *\n   *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n   *\n   *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n   *\n   * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n   *    the single quote characters (see below).\n   *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n   *    the output will be the same as default pattern for this unit, usually\n   *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n   *    are marked with \"2\" in the last column of the table.\n   *\n   *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n   *\n   *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n   *\n   * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n   *    The output will be padded with zeros to match the length of the pattern.\n   *\n   *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n   *\n   * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n   *    These tokens represent the shortest form of the quarter.\n   *\n   * 5. The main difference between `y` and `u` patterns are B.C. years:\n   *\n   *    | Year | `y` | `u` |\n   *    |------|-----|-----|\n   *    | AC 1 |   1 |   1 |\n   *    | BC 1 |   1 |   0 |\n   *    | BC 2 |   2 |  -1 |\n   *\n   *    Also `yy` always returns the last two digits of a year,\n   *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n   *\n   *    | Year | `yy` | `uu` |\n   *    |------|------|------|\n   *    | 1    |   01 |   01 |\n   *    | 14   |   14 |   14 |\n   *    | 376  |   76 |  376 |\n   *    | 1453 |   53 | 1453 |\n   *\n   *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n   *    except local week-numbering years are dependent on `options.weekStartsOn`\n   *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n   *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n   *\n   * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n   *    so right now these tokens fall back to GMT timezones.\n   *\n   * 7. These patterns are not in the Unicode Technical Standard #35:\n   *    - `i`: ISO day of week\n   *    - `I`: ISO week of year\n   *    - `R`: ISO week-numbering year\n   *    - `t`: seconds timestamp\n   *    - `T`: milliseconds timestamp\n   *    - `o`: ordinal number modifier\n   *    - `P`: long localized date\n   *    - `p`: long localized time\n   *\n   * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n   *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n   *\n   * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n   *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n   *\n   * ### v2.0.0 breaking changes:\n   *\n   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n   *\n   * - The second argument is now required for the sake of explicitness.\n   *\n   *   ```javascript\n   *   // Before v2.0.0\n   *   format(new Date(2016, 0, 1))\n   *\n   *   // v2.0.0 onward\n   *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n   *   ```\n   *\n   * - New format string API for `format` function\n   *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n   *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n   *\n   * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n   *\n   * @param {Date|Number} date - the original date\n   * @param {String} format - the string of tokens\n   * @param {Object} [options] - an object with options.\n   * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n   * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n   * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n   * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n   *   see: https://git.io/fxCyr\n   * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n   *   see: https://git.io/fxCyr\n   * @returns {String} the formatted date string\n   * @throws {TypeError} 2 arguments required\n   * @throws {RangeError} `options.locale` must contain `localize` property\n   * @throws {RangeError} `options.locale` must contain `formatLong` property\n   * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n   * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n   * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n   * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n   * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n   * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n   * @throws {RangeError} format string contains an unescaped latin alphabet character\n   *\n   * @example\n   * // Represent 11 February 2014 in middle-endian format:\n   * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n   * //=> '02/11/2014'\n   *\n   * @example\n   * // Represent 2 July 2014 in Esperanto:\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n   *   locale: eoLocale\n   * })\n   * //=> '2-a de julio 2014'\n   *\n   * @example\n   * // Escape string by single quote characters:\n   * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n   * //=> \"3 o'clock\"\n   */\n\n  function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var formatStr = String(dirtyFormatStr);\n    var options = dirtyOptions || {};\n    var locale$1 = options.locale || locale;\n    var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;\n    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n      throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n    }\n\n    var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;\n    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n    }\n\n    if (!locale$1.localize) {\n      throw new RangeError('locale must contain localize property');\n    }\n\n    if (!locale$1.formatLong) {\n      throw new RangeError('locale must contain formatLong property');\n    }\n\n    var originalDate = toDate(dirtyDate);\n\n    if (!isValid(originalDate)) {\n      throw new RangeError('Invalid time value');\n    } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n    // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n    var utcDate = subMilliseconds(originalDate, timezoneOffset);\n    var formatterOptions = {\n      firstWeekContainsDate: firstWeekContainsDate,\n      weekStartsOn: weekStartsOn,\n      locale: locale$1,\n      _originalDate: originalDate\n    };\n    var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n      var firstCharacter = substring[0];\n\n      if (firstCharacter === 'p' || firstCharacter === 'P') {\n        var longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale$1.formatLong, formatterOptions);\n      }\n\n      return substring;\n    }).join('').match(formattingTokensRegExp).map(function (substring) {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\";\n      }\n\n      var firstCharacter = substring[0];\n\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring);\n      }\n\n      var formatter = formatters$1[firstCharacter];\n\n      if (formatter) {\n        if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n          throwProtectedError(substring);\n        }\n\n        if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n          throwProtectedError(substring);\n        }\n\n        return formatter(utcDate, substring, locale$1.localize, formatterOptions);\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      }\n\n      return substring;\n    }).join('');\n    return result;\n  }\n\n  function cleanEscapedString(input) {\n    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n  }\n\n  function assign(target, dirtyObject) {\n    if (target == null) {\n      throw new TypeError('assign requires that input parameter not be null or undefined');\n    }\n\n    dirtyObject = dirtyObject || {};\n\n    for (var property in dirtyObject) {\n      if (dirtyObject.hasOwnProperty(property)) {\n        target[property] = dirtyObject[property];\n      }\n    }\n\n    return target;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var options = dirtyOptions || {};\n    var locale = options.locale;\n    var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n    }\n\n    var date = toDate(dirtyDate);\n    var day = toInteger(dirtyDay);\n    var currentDay = date.getUTCDay();\n    var remainder = day % 7;\n    var dayIndex = (remainder + 7) % 7;\n    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n    date.setUTCDate(date.getUTCDate() + diff);\n    return date;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function setUTCISODay(dirtyDate, dirtyDay) {\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var day = toInteger(dirtyDay);\n\n    if (day % 7 === 0) {\n      day = day - 7;\n    }\n\n    var weekStartsOn = 1;\n    var date = toDate(dirtyDate);\n    var currentDay = date.getUTCDay();\n    var remainder = day % 7;\n    var dayIndex = (remainder + 7) % 7;\n    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n    date.setUTCDate(date.getUTCDate() + diff);\n    return date;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate);\n    var isoWeek = toInteger(dirtyISOWeek);\n    var diff = getUTCISOWeek(date) - isoWeek;\n    date.setUTCDate(date.getUTCDate() - diff * 7);\n    return date;\n  }\n\n  // See issue: https://github.com/date-fns/date-fns/issues/376\n\n  function setUTCWeek(dirtyDate, dirtyWeek, options) {\n    if (arguments.length < 2) {\n      throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var date = toDate(dirtyDate);\n    var week = toInteger(dirtyWeek);\n    var diff = getUTCWeek(date, options) - week;\n    date.setUTCDate(date.getUTCDate() - diff * 7);\n    return date;\n  }\n\n  var MILLISECONDS_IN_HOUR = 3600000;\n  var MILLISECONDS_IN_MINUTE$1 = 60000;\n  var MILLISECONDS_IN_SECOND = 1000;\n  var numericPatterns = {\n    month: /^(1[0-2]|0?\\d)/,\n    // 0 to 12\n    date: /^(3[0-1]|[0-2]?\\d)/,\n    // 0 to 31\n    dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n    // 0 to 366\n    week: /^(5[0-3]|[0-4]?\\d)/,\n    // 0 to 53\n    hour23h: /^(2[0-3]|[0-1]?\\d)/,\n    // 0 to 23\n    hour24h: /^(2[0-4]|[0-1]?\\d)/,\n    // 0 to 24\n    hour11h: /^(1[0-1]|0?\\d)/,\n    // 0 to 11\n    hour12h: /^(1[0-2]|0?\\d)/,\n    // 0 to 12\n    minute: /^[0-5]?\\d/,\n    // 0 to 59\n    second: /^[0-5]?\\d/,\n    // 0 to 59\n    singleDigit: /^\\d/,\n    // 0 to 9\n    twoDigits: /^\\d{1,2}/,\n    // 0 to 99\n    threeDigits: /^\\d{1,3}/,\n    // 0 to 999\n    fourDigits: /^\\d{1,4}/,\n    // 0 to 9999\n    anyDigitsSigned: /^-?\\d+/,\n    singleDigitSigned: /^-?\\d/,\n    // 0 to 9, -0 to -9\n    twoDigitsSigned: /^-?\\d{1,2}/,\n    // 0 to 99, -0 to -99\n    threeDigitsSigned: /^-?\\d{1,3}/,\n    // 0 to 999, -0 to -999\n    fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n  };\n  var timezonePatterns = {\n    basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n    basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n    basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n    extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n    extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n  };\n\n  function parseNumericPattern(pattern, string, valueCallback) {\n    var matchResult = string.match(pattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var value = parseInt(matchResult[0], 10);\n    return {\n      value: valueCallback ? valueCallback(value) : value,\n      rest: string.slice(matchResult[0].length)\n    };\n  }\n\n  function parseTimezonePattern(pattern, string) {\n    var matchResult = string.match(pattern);\n\n    if (!matchResult) {\n      return null;\n    } // Input is 'Z'\n\n\n    if (matchResult[0] === 'Z') {\n      return {\n        value: 0,\n        rest: string.slice(1)\n      };\n    }\n\n    var sign = matchResult[1] === '+' ? 1 : -1;\n    var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n    var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n    var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n    return {\n      value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE$1 + seconds * MILLISECONDS_IN_SECOND),\n      rest: string.slice(matchResult[0].length)\n    };\n  }\n\n  function parseAnyDigitsSigned(string, valueCallback) {\n    return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n  }\n\n  function parseNDigits(n, string, valueCallback) {\n    switch (n) {\n      case 1:\n        return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n      case 2:\n        return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n      case 3:\n        return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n      case 4:\n        return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n      default:\n        return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n    }\n  }\n\n  function parseNDigitsSigned(n, string, valueCallback) {\n    switch (n) {\n      case 1:\n        return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n      case 2:\n        return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n      case 3:\n        return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n      case 4:\n        return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n      default:\n        return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n    }\n  }\n\n  function dayPeriodEnumToHours(enumValue) {\n    switch (enumValue) {\n      case 'morning':\n        return 4;\n\n      case 'evening':\n        return 17;\n\n      case 'pm':\n      case 'noon':\n      case 'afternoon':\n        return 12;\n\n      case 'am':\n      case 'midnight':\n      case 'night':\n      default:\n        return 0;\n    }\n  }\n\n  function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n    var isCommonEra = currentYear > 0; // Absolute number of the current year:\n    // 1 -> 1 AC\n    // 0 -> 1 BC\n    // -1 -> 2 BC\n\n    var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n    var result;\n\n    if (absCurrentYear <= 50) {\n      result = twoDigitYear || 100;\n    } else {\n      var rangeEnd = absCurrentYear + 50;\n      var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n      var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n      result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n    }\n\n    return isCommonEra ? result : 1 - result;\n  }\n\n  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\n  function isLeapYearIndex(year) {\n    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n  }\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n   * |  p  |                                |  P  |                                |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   */\n\n\n  var parsers = {\n    // Era\n    G: {\n      priority: 140,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          // AD, BC\n          case 'G':\n          case 'GG':\n          case 'GGG':\n            return match.era(string, {\n              width: 'abbreviated'\n            }) || match.era(string, {\n              width: 'narrow'\n            });\n          // A, B\n\n          case 'GGGGG':\n            return match.era(string, {\n              width: 'narrow'\n            });\n          // Anno Domini, Before Christ\n\n          case 'GGGG':\n          default:\n            return match.era(string, {\n              width: 'wide'\n            }) || match.era(string, {\n              width: 'abbreviated'\n            }) || match.era(string, {\n              width: 'narrow'\n            });\n        }\n      },\n      set: function (date, flags, value, _options) {\n        flags.era = value;\n        date.setUTCFullYear(value, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['R', 'u', 't', 'T']\n    },\n    // Year\n    y: {\n      // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n      // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n      // |----------|-------|----|-------|-------|-------|\n      // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n      // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n      // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n      // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n      // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n      priority: 130,\n      parse: function (string, token, match, _options) {\n        var valueCallback = function (year) {\n          return {\n            year: year,\n            isTwoDigitYear: token === 'yy'\n          };\n        };\n\n        switch (token) {\n          case 'y':\n            return parseNDigits(4, string, valueCallback);\n\n          case 'yo':\n            return match.ordinalNumber(string, {\n              unit: 'year',\n              valueCallback: valueCallback\n            });\n\n          default:\n            return parseNDigits(token.length, string, valueCallback);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value.isTwoDigitYear || value.year > 0;\n      },\n      set: function (date, flags, value, _options) {\n        var currentYear = date.getUTCFullYear();\n\n        if (value.isTwoDigitYear) {\n          var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n          date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n          date.setUTCHours(0, 0, 0, 0);\n          return date;\n        }\n\n        var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n        date.setUTCFullYear(year, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n    },\n    // Local week-numbering year\n    Y: {\n      priority: 130,\n      parse: function (string, token, match, _options) {\n        var valueCallback = function (year) {\n          return {\n            year: year,\n            isTwoDigitYear: token === 'YY'\n          };\n        };\n\n        switch (token) {\n          case 'Y':\n            return parseNDigits(4, string, valueCallback);\n\n          case 'Yo':\n            return match.ordinalNumber(string, {\n              unit: 'year',\n              valueCallback: valueCallback\n            });\n\n          default:\n            return parseNDigits(token.length, string, valueCallback);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value.isTwoDigitYear || value.year > 0;\n      },\n      set: function (date, flags, value, options) {\n        var currentYear = getUTCWeekYear(date, options);\n\n        if (value.isTwoDigitYear) {\n          var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n          date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n          date.setUTCHours(0, 0, 0, 0);\n          return startOfUTCWeek(date, options);\n        }\n\n        var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n        date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      },\n      incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n    },\n    // ISO week-numbering year\n    R: {\n      priority: 130,\n      parse: function (string, token, _match, _options) {\n        if (token === 'R') {\n          return parseNDigitsSigned(4, string);\n        }\n\n        return parseNDigitsSigned(token.length, string);\n      },\n      set: function (_date, _flags, value, _options) {\n        var firstWeekOfYear = new Date(0);\n        firstWeekOfYear.setUTCFullYear(value, 0, 4);\n        firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n        return startOfUTCISOWeek(firstWeekOfYear);\n      },\n      incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n    },\n    // Extended year\n    u: {\n      priority: 130,\n      parse: function (string, token, _match, _options) {\n        if (token === 'u') {\n          return parseNDigitsSigned(4, string);\n        }\n\n        return parseNDigitsSigned(token.length, string);\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCFullYear(value, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n    },\n    // Quarter\n    Q: {\n      priority: 120,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          // 1, 2, 3, 4\n          case 'Q':\n          case 'QQ':\n            // 01, 02, 03, 04\n            return parseNDigits(token.length, string);\n          // 1st, 2nd, 3rd, 4th\n\n          case 'Qo':\n            return match.ordinalNumber(string, {\n              unit: 'quarter'\n            });\n          // Q1, Q2, Q3, Q4\n\n          case 'QQQ':\n            return match.quarter(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.quarter(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n          case 'QQQQQ':\n            return match.quarter(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // 1st quarter, 2nd quarter, ...\n\n          case 'QQQQ':\n          default:\n            return match.quarter(string, {\n              width: 'wide',\n              context: 'formatting'\n            }) || match.quarter(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.quarter(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 1 && value <= 4;\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCMonth((value - 1) * 3, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n    },\n    // Stand-alone quarter\n    q: {\n      priority: 120,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          // 1, 2, 3, 4\n          case 'q':\n          case 'qq':\n            // 01, 02, 03, 04\n            return parseNDigits(token.length, string);\n          // 1st, 2nd, 3rd, 4th\n\n          case 'qo':\n            return match.ordinalNumber(string, {\n              unit: 'quarter'\n            });\n          // Q1, Q2, Q3, Q4\n\n          case 'qqq':\n            return match.quarter(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) || match.quarter(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n          // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n          case 'qqqqq':\n            return match.quarter(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n          // 1st quarter, 2nd quarter, ...\n\n          case 'qqqq':\n          default:\n            return match.quarter(string, {\n              width: 'wide',\n              context: 'standalone'\n            }) || match.quarter(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) || match.quarter(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 1 && value <= 4;\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCMonth((value - 1) * 3, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n    },\n    // Month\n    M: {\n      priority: 110,\n      parse: function (string, token, match, _options) {\n        var valueCallback = function (value) {\n          return value - 1;\n        };\n\n        switch (token) {\n          // 1, 2, ..., 12\n          case 'M':\n            return parseNumericPattern(numericPatterns.month, string, valueCallback);\n          // 01, 02, ..., 12\n\n          case 'MM':\n            return parseNDigits(2, string, valueCallback);\n          // 1st, 2nd, ..., 12th\n\n          case 'Mo':\n            return match.ordinalNumber(string, {\n              unit: 'month',\n              valueCallback: valueCallback\n            });\n          // Jan, Feb, ..., Dec\n\n          case 'MMM':\n            return match.month(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.month(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // J, F, ..., D\n\n          case 'MMMMM':\n            return match.month(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // January, February, ..., December\n\n          case 'MMMM':\n          default:\n            return match.month(string, {\n              width: 'wide',\n              context: 'formatting'\n            }) || match.month(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.month(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 11;\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCMonth(value, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n    },\n    // Stand-alone month\n    L: {\n      priority: 110,\n      parse: function (string, token, match, _options) {\n        var valueCallback = function (value) {\n          return value - 1;\n        };\n\n        switch (token) {\n          // 1, 2, ..., 12\n          case 'L':\n            return parseNumericPattern(numericPatterns.month, string, valueCallback);\n          // 01, 02, ..., 12\n\n          case 'LL':\n            return parseNDigits(2, string, valueCallback);\n          // 1st, 2nd, ..., 12th\n\n          case 'Lo':\n            return match.ordinalNumber(string, {\n              unit: 'month',\n              valueCallback: valueCallback\n            });\n          // Jan, Feb, ..., Dec\n\n          case 'LLL':\n            return match.month(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) || match.month(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n          // J, F, ..., D\n\n          case 'LLLLL':\n            return match.month(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n          // January, February, ..., December\n\n          case 'LLLL':\n          default:\n            return match.month(string, {\n              width: 'wide',\n              context: 'standalone'\n            }) || match.month(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) || match.month(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 11;\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCMonth(value, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n    },\n    // Local week of year\n    w: {\n      priority: 100,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'w':\n            return parseNumericPattern(numericPatterns.week, string);\n\n          case 'wo':\n            return match.ordinalNumber(string, {\n              unit: 'week'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 1 && value <= 53;\n      },\n      set: function (date, _flags, value, options) {\n        return startOfUTCWeek(setUTCWeek(date, value, options), options);\n      },\n      incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n    },\n    // ISO week of year\n    I: {\n      priority: 100,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'I':\n            return parseNumericPattern(numericPatterns.week, string);\n\n          case 'Io':\n            return match.ordinalNumber(string, {\n              unit: 'week'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 1 && value <= 53;\n      },\n      set: function (date, _flags, value, options) {\n        return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n      },\n      incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n    },\n    // Day of the month\n    d: {\n      priority: 90,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'd':\n            return parseNumericPattern(numericPatterns.date, string);\n\n          case 'do':\n            return match.ordinalNumber(string, {\n              unit: 'date'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (date, value, _options) {\n        var year = date.getUTCFullYear();\n        var isLeapYear = isLeapYearIndex(year);\n        var month = date.getUTCMonth();\n\n        if (isLeapYear) {\n          return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n        } else {\n          return value >= 1 && value <= DAYS_IN_MONTH[month];\n        }\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCDate(value);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n    },\n    // Day of year\n    D: {\n      priority: 90,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'D':\n          case 'DD':\n            return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n          case 'Do':\n            return match.ordinalNumber(string, {\n              unit: 'date'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (date, value, _options) {\n        var year = date.getUTCFullYear();\n        var isLeapYear = isLeapYearIndex(year);\n\n        if (isLeapYear) {\n          return value >= 1 && value <= 366;\n        } else {\n          return value >= 1 && value <= 365;\n        }\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCMonth(0, value);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n    },\n    // Day of week\n    E: {\n      priority: 90,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          // Tue\n          case 'E':\n          case 'EE':\n          case 'EEE':\n            return match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'short',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // T\n\n          case 'EEEEE':\n            return match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // Tu\n\n          case 'EEEEEE':\n            return match.day(string, {\n              width: 'short',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // Tuesday\n\n          case 'EEEE':\n          default:\n            return match.day(string, {\n              width: 'wide',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'short',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 6;\n      },\n      set: function (date, _flags, value, options) {\n        date = setUTCDay(date, value, options);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n    },\n    // Local day of week\n    e: {\n      priority: 90,\n      parse: function (string, token, match, options) {\n        var valueCallback = function (value) {\n          var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n          return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n        };\n\n        switch (token) {\n          // 3\n          case 'e':\n          case 'ee':\n            // 03\n            return parseNDigits(token.length, string, valueCallback);\n          // 3rd\n\n          case 'eo':\n            return match.ordinalNumber(string, {\n              unit: 'day',\n              valueCallback: valueCallback\n            });\n          // Tue\n\n          case 'eee':\n            return match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'short',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // T\n\n          case 'eeeee':\n            return match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // Tu\n\n          case 'eeeeee':\n            return match.day(string, {\n              width: 'short',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n          // Tuesday\n\n          case 'eeee':\n          default:\n            return match.day(string, {\n              width: 'wide',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'short',\n              context: 'formatting'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 6;\n      },\n      set: function (date, _flags, value, options) {\n        date = setUTCDay(date, value, options);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n    },\n    // Stand-alone local day of week\n    c: {\n      priority: 90,\n      parse: function (string, token, match, options) {\n        var valueCallback = function (value) {\n          var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n          return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n        };\n\n        switch (token) {\n          // 3\n          case 'c':\n          case 'cc':\n            // 03\n            return parseNDigits(token.length, string, valueCallback);\n          // 3rd\n\n          case 'co':\n            return match.ordinalNumber(string, {\n              unit: 'day',\n              valueCallback: valueCallback\n            });\n          // Tue\n\n          case 'ccc':\n            return match.day(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) || match.day(string, {\n              width: 'short',\n              context: 'standalone'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n          // T\n\n          case 'ccccc':\n            return match.day(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n          // Tu\n\n          case 'cccccc':\n            return match.day(string, {\n              width: 'short',\n              context: 'standalone'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n          // Tuesday\n\n          case 'cccc':\n          default:\n            return match.day(string, {\n              width: 'wide',\n              context: 'standalone'\n            }) || match.day(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) || match.day(string, {\n              width: 'short',\n              context: 'standalone'\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'standalone'\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 6;\n      },\n      set: function (date, _flags, value, options) {\n        date = setUTCDay(date, value, options);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n    },\n    // ISO day of week\n    i: {\n      priority: 90,\n      parse: function (string, token, match, _options) {\n        var valueCallback = function (value) {\n          if (value === 0) {\n            return 7;\n          }\n\n          return value;\n        };\n\n        switch (token) {\n          // 2\n          case 'i':\n          case 'ii':\n            // 02\n            return parseNDigits(token.length, string);\n          // 2nd\n\n          case 'io':\n            return match.ordinalNumber(string, {\n              unit: 'day'\n            });\n          // Tue\n\n          case 'iii':\n            return match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) || match.day(string, {\n              width: 'short',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting',\n              valueCallback: valueCallback\n            });\n          // T\n\n          case 'iiiii':\n            return match.day(string, {\n              width: 'narrow',\n              context: 'formatting',\n              valueCallback: valueCallback\n            });\n          // Tu\n\n          case 'iiiiii':\n            return match.day(string, {\n              width: 'short',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting',\n              valueCallback: valueCallback\n            });\n          // Tuesday\n\n          case 'iiii':\n          default:\n            return match.day(string, {\n              width: 'wide',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) || match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) || match.day(string, {\n              width: 'short',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) || match.day(string, {\n              width: 'narrow',\n              context: 'formatting',\n              valueCallback: valueCallback\n            });\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 1 && value <= 7;\n      },\n      set: function (date, _flags, value, options) {\n        date = setUTCISODay(date, value, options);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n    },\n    // AM or PM\n    a: {\n      priority: 80,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'a':\n          case 'aa':\n          case 'aaa':\n            return match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n\n          case 'aaaaa':\n            return match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n\n          case 'aaaa':\n          default:\n            return match.dayPeriod(string, {\n              width: 'wide',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n        }\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n    },\n    // AM, PM, midnight\n    b: {\n      priority: 80,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'b':\n          case 'bb':\n          case 'bbb':\n            return match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n\n          case 'bbbbb':\n            return match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n\n          case 'bbbb':\n          default:\n            return match.dayPeriod(string, {\n              width: 'wide',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n        }\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n    },\n    // in the morning, in the afternoon, in the evening, at night\n    B: {\n      priority: 80,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'B':\n          case 'BB':\n          case 'BBB':\n            return match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n\n          case 'BBBBB':\n            return match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n\n          case 'BBBB':\n          default:\n            return match.dayPeriod(string, {\n              width: 'wide',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) || match.dayPeriod(string, {\n              width: 'narrow',\n              context: 'formatting'\n            });\n        }\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['a', 'b', 't', 'T']\n    },\n    // Hour [1-12]\n    h: {\n      priority: 70,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'h':\n            return parseNumericPattern(numericPatterns.hour12h, string);\n\n          case 'ho':\n            return match.ordinalNumber(string, {\n              unit: 'hour'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 1 && value <= 12;\n      },\n      set: function (date, _flags, value, _options) {\n        var isPM = date.getUTCHours() >= 12;\n\n        if (isPM && value < 12) {\n          date.setUTCHours(value + 12, 0, 0, 0);\n        } else if (!isPM && value === 12) {\n          date.setUTCHours(0, 0, 0, 0);\n        } else {\n          date.setUTCHours(value, 0, 0, 0);\n        }\n\n        return date;\n      },\n      incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n    },\n    // Hour [0-23]\n    H: {\n      priority: 70,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'H':\n            return parseNumericPattern(numericPatterns.hour23h, string);\n\n          case 'Ho':\n            return match.ordinalNumber(string, {\n              unit: 'hour'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 23;\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCHours(value, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n    },\n    // Hour [0-11]\n    K: {\n      priority: 70,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'K':\n            return parseNumericPattern(numericPatterns.hour11h, string);\n\n          case 'Ko':\n            return match.ordinalNumber(string, {\n              unit: 'hour'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 11;\n      },\n      set: function (date, _flags, value, _options) {\n        var isPM = date.getUTCHours() >= 12;\n\n        if (isPM && value < 12) {\n          date.setUTCHours(value + 12, 0, 0, 0);\n        } else {\n          date.setUTCHours(value, 0, 0, 0);\n        }\n\n        return date;\n      },\n      incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n    },\n    // Hour [1-24]\n    k: {\n      priority: 70,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'k':\n            return parseNumericPattern(numericPatterns.hour24h, string);\n\n          case 'ko':\n            return match.ordinalNumber(string, {\n              unit: 'hour'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 1 && value <= 24;\n      },\n      set: function (date, _flags, value, _options) {\n        var hours = value <= 24 ? value % 24 : value;\n        date.setUTCHours(hours, 0, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n    },\n    // Minute\n    m: {\n      priority: 60,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 'm':\n            return parseNumericPattern(numericPatterns.minute, string);\n\n          case 'mo':\n            return match.ordinalNumber(string, {\n              unit: 'minute'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 59;\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCMinutes(value, 0, 0);\n        return date;\n      },\n      incompatibleTokens: ['t', 'T']\n    },\n    // Second\n    s: {\n      priority: 50,\n      parse: function (string, token, match, _options) {\n        switch (token) {\n          case 's':\n            return parseNumericPattern(numericPatterns.second, string);\n\n          case 'so':\n            return match.ordinalNumber(string, {\n              unit: 'second'\n            });\n\n          default:\n            return parseNDigits(token.length, string);\n        }\n      },\n      validate: function (_date, value, _options) {\n        return value >= 0 && value <= 59;\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCSeconds(value, 0);\n        return date;\n      },\n      incompatibleTokens: ['t', 'T']\n    },\n    // Fraction of second\n    S: {\n      priority: 30,\n      parse: function (string, token, _match, _options) {\n        var valueCallback = function (value) {\n          return Math.floor(value * Math.pow(10, -token.length + 3));\n        };\n\n        return parseNDigits(token.length, string, valueCallback);\n      },\n      set: function (date, _flags, value, _options) {\n        date.setUTCMilliseconds(value);\n        return date;\n      },\n      incompatibleTokens: ['t', 'T']\n    },\n    // Timezone (ISO-8601. +00:00 is `'Z'`)\n    X: {\n      priority: 10,\n      parse: function (string, token, _match, _options) {\n        switch (token) {\n          case 'X':\n            return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n          case 'XX':\n            return parseTimezonePattern(timezonePatterns.basic, string);\n\n          case 'XXXX':\n            return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n          case 'XXXXX':\n            return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n          case 'XXX':\n          default:\n            return parseTimezonePattern(timezonePatterns.extended, string);\n        }\n      },\n      set: function (date, flags, value, _options) {\n        if (flags.timestampIsSet) {\n          return date;\n        }\n\n        return new Date(date.getTime() - value);\n      },\n      incompatibleTokens: ['t', 'T', 'x']\n    },\n    // Timezone (ISO-8601)\n    x: {\n      priority: 10,\n      parse: function (string, token, _match, _options) {\n        switch (token) {\n          case 'x':\n            return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n          case 'xx':\n            return parseTimezonePattern(timezonePatterns.basic, string);\n\n          case 'xxxx':\n            return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n          case 'xxxxx':\n            return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n          case 'xxx':\n          default:\n            return parseTimezonePattern(timezonePatterns.extended, string);\n        }\n      },\n      set: function (date, flags, value, _options) {\n        if (flags.timestampIsSet) {\n          return date;\n        }\n\n        return new Date(date.getTime() - value);\n      },\n      incompatibleTokens: ['t', 'T', 'X']\n    },\n    // Seconds timestamp\n    t: {\n      priority: 40,\n      parse: function (string, _token, _match, _options) {\n        return parseAnyDigitsSigned(string);\n      },\n      set: function (_date, _flags, value, _options) {\n        return [new Date(value * 1000), {\n          timestampIsSet: true\n        }];\n      },\n      incompatibleTokens: '*'\n    },\n    // Milliseconds timestamp\n    T: {\n      priority: 20,\n      parse: function (string, _token, _match, _options) {\n        return parseAnyDigitsSigned(string);\n      },\n      set: function (_date, _flags, value, _options) {\n        return [new Date(value), {\n          timestampIsSet: true\n        }];\n      },\n      incompatibleTokens: '*'\n    }\n  };\n\n  var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n  // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n  //   (one of the certain letters followed by `o`)\n  // - (\\w)\\1* matches any sequences of the same letter\n  // - '' matches two quote characters in a row\n  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n  //   except a single quote symbol, which ends the sequence.\n  //   Two quote characters do not end the sequence.\n  //   If there is no matching single quote\n  //   then the sequence will continue until the end of the string.\n  // - . matches any single character unmatched by previous parts of the RegExps\n\n  var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n  // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\n  var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n  var escapedStringRegExp$1 = /^'([^]*?)'?$/;\n  var doubleQuoteRegExp$1 = /''/g;\n  var notWhitespaceRegExp = /\\S/;\n  var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;\n  /**\n   * @name parse\n   * @category Common Helpers\n   * @summary Parse the date.\n   *\n   * @description\n   * Return the date parsed from string using the given format string.\n   *\n   * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n   * > See: https://git.io/fxCyr\n   *\n   * The characters in the format string wrapped between two single quotes characters (') are escaped.\n   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n   *\n   * Format of the format string is based on Unicode Technical Standard #35:\n   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   * with a few additions (see note 5 below the table).\n   *\n   * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n   * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n   *\n   * ```javascript\n   * parse('23 AM', 'HH a', new Date())\n   * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n   * ```\n   *\n   * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n   *\n   * Accepted format string patterns:\n   * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n   * |---------------------------------|-----|---------|-----------------------------------|-------|\n   * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n   * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n   * |                                 |     | GGGGG   | A, B                              |       |\n   * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n   * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n   * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n   * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n   * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n   * |                                 |     | yyyyy   | ...                               | 2,4   |\n   * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n   * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n   * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n   * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n   * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n   * |                                 |     | YYYYY   | ...                               | 2,4   |\n   * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n   * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n   * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n   * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n   * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n   * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n   * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n   * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n   * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n   * |                                 |     | uuuuu   | ...                               | 2,4   |\n   * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n   * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n   * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n   * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n   * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n   * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n   * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n   * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n   * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n   * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n   * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n   * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n   * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n   * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n   * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n   * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n   * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n   * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n   * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n   * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n   * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n   * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n   * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n   * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n   * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n   * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n   * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n   * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n   * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n   * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n   * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n   * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n   * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n   * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n   * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n   * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n   * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n   * |                                 |     | DDDD    | ...                               | 2     |\n   * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n   * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n   * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n   * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n   * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n   * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n   * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n   * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n   * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n   * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n   * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n   * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n   * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n   * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n   * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n   * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n   * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n   * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n   * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n   * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n   * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n   * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n   * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n   * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n   * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n   * |                                 |     | aaaaa   | a, p                              |       |\n   * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n   * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n   * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n   * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n   * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n   * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n   * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n   * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n   * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n   * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n   * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n   * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n   * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n   * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n   * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |\n   * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n   * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n   * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n   * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n   * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n   * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n   * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n   * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n   * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n   * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n   * |                                 |     | tt      | ...                               | 2     |\n   * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n   * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n   * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n   * |                                 |     | SSSS    | ...                               | 2     |\n   * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n   * |                                 |     | TT      | ...                               | 2     |\n   * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n   * |                                 |     | XX      | -0800, +0530, Z                   |       |\n   * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n   * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n   * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n   * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n   * |                                 |     | xx      | -0800, +0530, +0000               |       |\n   * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n   * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n   * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n   * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n   * |                                 |     | PP      | May 29, 1453                      |       |\n   * |                                 |     | PPP     | May 29th, 1453                    |       |\n   * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n   * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n   * |                                 |     | pp      | 12:00:00 AM                       |       |\n   * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n   * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n   * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n   * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n   * Notes:\n   * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n   *    are the same as \"stand-alone\" units, but are different in some languages.\n   *    \"Formatting\" units are declined according to the rules of the language\n   *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n   *    In `format` function, they will produce different result:\n   *\n   *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n   *\n   *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n   *\n   *    `parse` will try to match both formatting and stand-alone units interchangably.\n   *\n   * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n   *    the single quote characters (see below).\n   *    If the sequence is longer than listed in table:\n   *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n   *      as wide as the sequence\n   *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n   *      These variations are marked with \"2\" in the last column of the table.\n   *\n   * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n   *    These tokens represent the shortest form of the quarter.\n   *\n   * 4. The main difference between `y` and `u` patterns are B.C. years:\n   *\n   *    | Year | `y` | `u` |\n   *    |------|-----|-----|\n   *    | AC 1 |   1 |   1 |\n   *    | BC 1 |   1 |   0 |\n   *    | BC 2 |   2 |  -1 |\n   *\n   *    Also `yy` will try to guess the century of two digit year by proximity with `backupDate`:\n   *\n   *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n   *\n   *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n   *\n   *    while `uu` will just assign the year as is:\n   *\n   *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n   *\n   *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n   *\n   *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n   *    except local week-numbering years are dependent on `options.weekStartsOn`\n   *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n   *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n   *\n   * 5. These patterns are not in the Unicode Technical Standard #35:\n   *    - `i`: ISO day of week\n   *    - `I`: ISO week of year\n   *    - `R`: ISO week-numbering year\n   *    - `o`: ordinal number modifier\n   *    - `P`: long localized date\n   *    - `p`: long localized time\n   *\n   * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n   *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n   *\n   * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n   *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n   *\n   * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n   *    on the given locale.\n   *\n   *    using `en-US` locale: `P` => `MM/dd/yyyy`\n   *    using `en-US` locale: `p` => `hh:mm a`\n   *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n   *    using `pt-BR` locale: `p` => `HH:mm`\n   *\n   * Values will be assigned to the date in the descending order of its unit's priority.\n   * Units of an equal priority overwrite each other in the order of appearance.\n   *\n   * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n   * the values will be taken from 3rd argument `backupDate` which works as a context of parsing.\n   *\n   * `backupDate` must be passed for correct work of the function.\n   * If you're not sure which `backupDate` to supply, create a new instance of Date:\n   * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n   * In this case parsing will be done in the context of the current date.\n   * If `backupDate` is `Invalid Date` or a value not convertible to valid `Date`,\n   * then `Invalid Date` will be returned.\n   *\n   * The result may vary by locale.\n   *\n   * If `formatString` matches with `dateString` but does not provides tokens, `backupDate` will be returned.\n   *\n   * If parsing failed, `Invalid Date` will be returned.\n   * Invalid Date is a Date, whose time value is NaN.\n   * Time value of Date: http://es5.github.io/#x15.9.1.1\n   *\n   * ### v2.0.0 breaking changes:\n   *\n   * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n   *\n   * - Old `parse` was renamed to `toDate`.\n   *   Now `parse` is a new function which parses a string using a provided format.\n   *\n   *   ```javascript\n   *   // Before v2.0.0\n   *   parse('2016-01-01')\n   *\n   *   // v2.0.0 onward\n   *   toDate('2016-01-01')\n   *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n   *   ```\n   *\n   * @param {String} dateString - the string to parse\n   * @param {String} formatString - the string of tokens\n   * @param {Date|Number} backupDate - defines values missing from the parsed dateString\n   * @param {Object} [options] - an object with options.\n   * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n   * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n   * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n   * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n   *   see: https://git.io/fxCyr\n   * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n   *   see: https://git.io/fxCyr\n   * @returns {Date} the parsed date\n   * @throws {TypeError} 3 arguments required\n   * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n   * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n   * @throws {RangeError} `options.locale` must contain `match` property\n   * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n   * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n   * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n   * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n   * @throws {RangeError} format string contains an unescaped latin alphabet character\n   *\n   * @example\n   * // Parse 11 February 2014 from middle-endian format:\n   * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n   * //=> Tue Feb 11 2014 00:00:00\n   *\n   * @example\n   * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n   * import eo from 'date-fns/locale/eo'\n   * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n   *   locale: eo\n   * })\n   * //=> Sun Feb 28 2010 00:00:00\n   */\n\n  function parse(dirtyDateString, dirtyFormatString, dirtyBackupDate, dirtyOptions) {\n    if (arguments.length < 3) {\n      throw new TypeError('3 arguments required, but only ' + arguments.length + ' present');\n    }\n\n    var dateString = String(dirtyDateString);\n    var formatString = String(dirtyFormatString);\n    var options = dirtyOptions || {};\n    var locale$1 = options.locale || locale;\n\n    if (!locale$1.match) {\n      throw new RangeError('locale must contain match property');\n    }\n\n    var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;\n    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n      throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n    }\n\n    var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;\n    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n      throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n    }\n\n    if (formatString === '') {\n      if (dateString === '') {\n        return toDate(dirtyBackupDate);\n      } else {\n        return new Date(NaN);\n      }\n    }\n\n    var subFnOptions = {\n      firstWeekContainsDate: firstWeekContainsDate,\n      weekStartsOn: weekStartsOn,\n      locale: locale$1 // If timezone isn't specified, it will be set to the system timezone\n\n    };\n    var setters = [{\n      priority: TIMEZONE_UNIT_PRIORITY,\n      set: dateToSystemTimezone,\n      index: 0\n    }];\n    var i;\n    var tokens = formatString.match(longFormattingTokensRegExp$1).map(function (substring) {\n      var firstCharacter = substring[0];\n\n      if (firstCharacter === 'p' || firstCharacter === 'P') {\n        var longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale$1.formatLong, subFnOptions);\n      }\n\n      return substring;\n    }).join('').match(formattingTokensRegExp$1);\n    var usedTokens = [];\n\n    for (i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n        throwProtectedError(token);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n        throwProtectedError(token);\n      }\n\n      var firstCharacter = token[0];\n      var parser = parsers[firstCharacter];\n\n      if (parser) {\n        var incompatibleTokens = parser.incompatibleTokens;\n\n        if (Array.isArray(incompatibleTokens)) {\n          var incompatibleToken = void 0;\n\n          for (var _i = 0; _i < usedTokens.length; _i++) {\n            var usedToken = usedTokens[_i].token;\n\n            if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n              incompatibleToken = usedTokens[_i];\n              break;\n            }\n          }\n\n          if (incompatibleToken) {\n            throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n          }\n        } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n        }\n\n        usedTokens.push({\n          token: firstCharacter,\n          fullToken: token\n        });\n        var parseResult = parser.parse(dateString, token, locale$1.match, subFnOptions);\n\n        if (!parseResult) {\n          return new Date(NaN);\n        }\n\n        setters.push({\n          priority: parser.priority,\n          set: parser.set,\n          validate: parser.validate,\n          value: parseResult.value,\n          index: setters.length\n        });\n        dateString = parseResult.rest;\n      } else {\n        if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {\n          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n        } // Replace two single quote characters with one single quote character\n\n\n        if (token === \"''\") {\n          token = \"'\";\n        } else if (firstCharacter === \"'\") {\n          token = cleanEscapedString$1(token);\n        } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n        if (dateString.indexOf(token) === 0) {\n          dateString = dateString.slice(token.length);\n        } else {\n          return new Date(NaN);\n        }\n      }\n    } // Check if the remaining input contains something other than whitespace\n\n\n    if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n      return new Date(NaN);\n    }\n\n    var uniquePrioritySetters = setters.map(function (setter) {\n      return setter.priority;\n    }).sort(function (a, b) {\n      return b - a;\n    }).filter(function (priority, index, array) {\n      return array.indexOf(priority) === index;\n    }).map(function (priority) {\n      return setters.filter(function (setter) {\n        return setter.priority === priority;\n      }).reverse();\n    }).map(function (setterArray) {\n      return setterArray[0];\n    });\n    var date = toDate(dirtyBackupDate);\n\n    if (isNaN(date)) {\n      return new Date(NaN);\n    } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n    // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n    var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n    var flags = {};\n\n    for (i = 0; i < uniquePrioritySetters.length; i++) {\n      var setter = uniquePrioritySetters[i];\n\n      if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n        return new Date(NaN);\n      }\n\n      var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n      if (result[0]) {\n        utcDate = result[0];\n        assign(flags, result[1]); // Result is date\n      } else {\n        utcDate = result;\n      }\n    }\n\n    return utcDate;\n  }\n\n  function dateToSystemTimezone(date, flags) {\n    if (flags.timestampIsSet) {\n      return date;\n    }\n\n    var convertedDate = new Date(0);\n    convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n    convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    return convertedDate;\n  }\n\n  function cleanEscapedString$1(input) {\n    return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, \"'\");\n  }\n\n  function formatDA(date) {\n    var strFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MMM d, yyyy';\n\n    if (!date) {\n      return;\n    } // Goal: 'Apr 5, 1999'\n\n\n    try {\n      var parsedDateTime = parse(date, 'yyyyMMdd', new Date());\n      var formattedDateTime = format(parsedDateTime, strFormat);\n      return formattedDateTime;\n    } catch (err) {// swallow?\n    }\n\n    return;\n  }\n\n  function formatTM(time) {\n    var strFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HH:mm:ss';\n\n    if (!time) {\n      return;\n    } // DICOM Time is stored as HHmmss.SSS, where:\n    //      HH 24 hour time:\n    //      m mm    0..59   Minutes\n    //      s ss    0..59   Seconds\n    //      S SS SSS    0..999  Fractional seconds\n    //\n    // Goal: '24:12:12'\n\n\n    try {\n      var inputFormat = 'HHmmss.SSS';\n      var strTime = time.toString().substring(0, inputFormat.length);\n      var parsedDateTime = parse(strTime, 'HHmmss.SSS', new Date(0));\n      var formattedDateTime = format(parsedDateTime, strFormat);\n      return formattedDateTime;\n    } catch (err) {// swallow?\n    }\n\n    return;\n  }\n\n  function formatNumberPrecision(number, precision) {\n    if (number !== null) {\n      return parseFloat(number).toFixed(precision);\n    }\n  }\n\n  function isValidNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n\n  var helpers = {\n    formatPN: formatPN,\n    formatDA: formatDA,\n    formatTM: formatTM,\n    formatNumberPrecision: formatNumberPrecision,\n    isValidNumber: isValidNumber\n  };\n\n  var css$1 = \".imageViewerViewport.empty ~ .ViewportOverlay {\\n  display: none;\\n}\\n.ViewportOverlay {\\n  color: #9ccef9;\\n}\\n.ViewportOverlay .overlay-element {\\n  position: absolute;\\n  font-weight: 400;\\n  text-shadow: 1px 1px #000;\\n  pointer-events: none;\\n}\\n.ViewportOverlay .top-left {\\n  top: 20px;\\n  left: 20px;\\n}\\n.ViewportOverlay .top-center {\\n  top: 20px;\\n  padding-top: 20px;\\n  width: 100%;\\n  text-align: center;\\n}\\n.ViewportOverlay .top-right {\\n  top: 20px;\\n  right: 20px;\\n  text-align: right;\\n}\\n.ViewportOverlay .bottom-left {\\n  bottom: 20px;\\n  left: 20px;\\n}\\n.ViewportOverlay .bottom-right {\\n  bottom: 20px;\\n  right: 20px;\\n  text-align: right;\\n}\\n.ViewportOverlay.controlsVisible .topright,\\n.ViewportOverlay.controlsVisible .bottomright {\\n  right: calc(20px + 19px);\\n}\\n.ViewportOverlay svg {\\n  color: #9ccef9;\\n  fill: #9ccef9;\\n  stroke: #9ccef9;\\n  background-color: transparent;\\n  margin: 2px;\\n  width: 18px;\\n  height: 18px;\\n}\\n\";\n  styleInject(css$1);\n\n  var formatPN$1 = helpers.formatPN,\n      formatDA$1 = helpers.formatDA,\n      formatNumberPrecision$1 = helpers.formatNumberPrecision,\n      formatTM$1 = helpers.formatTM,\n      isValidNumber$1 = helpers.isValidNumber;\n\n  function getCompression(imageId) {\n    var generalImageModule = cornerstone.metaData.get('generalImageModule', imageId) || {};\n    var lossyImageCompression = generalImageModule.lossyImageCompression,\n        lossyImageCompressionRatio = generalImageModule.lossyImageCompressionRatio,\n        lossyImageCompressionMethod = generalImageModule.lossyImageCompressionMethod;\n\n    if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\n      var compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\n      var compressionRatio = formatNumberPrecision$1(lossyImageCompressionRatio, 2);\n      return compressionMethod + compressionRatio + ' : 1';\n    }\n\n    return 'Lossless / Uncompressed';\n  }\n\n  var ViewportOverlay =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    inherits(ViewportOverlay, _PureComponent);\n\n    function ViewportOverlay() {\n      classCallCheck(this, ViewportOverlay);\n\n      return possibleConstructorReturn(this, getPrototypeOf(ViewportOverlay).apply(this, arguments));\n    }\n\n    createClass(ViewportOverlay, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            imageId = _this$props.imageId,\n            scale = _this$props.scale,\n            windowWidth = _this$props.windowWidth,\n            windowCenter = _this$props.windowCenter;\n\n        if (!imageId) {\n          return null;\n        }\n\n        var zoomPercentage = formatNumberPrecision$1(scale * 100, 0);\n        var seriesMetadata = cornerstone.metaData.get('generalSeriesModule', imageId) || {};\n        var imagePlaneModule = cornerstone.metaData.get('imagePlaneModule', imageId) || {};\n        var rows = imagePlaneModule.rows,\n            columns = imagePlaneModule.columns,\n            sliceThickness = imagePlaneModule.sliceThickness,\n            sliceLocation = imagePlaneModule.sliceLocation;\n        var seriesNumber = seriesMetadata.seriesNumber,\n            seriesDescription = seriesMetadata.seriesDescription;\n        var generalStudyModule = cornerstone.metaData.get('generalStudyModule', imageId) || {};\n        var studyDate = generalStudyModule.studyDate,\n            studyTime = generalStudyModule.studyTime,\n            studyDescription = generalStudyModule.studyDescription;\n        var patientModule = cornerstone.metaData.get('patientModule', imageId) || {};\n        var patientId = patientModule.patientId,\n            patientName = patientModule.patientName;\n        var generalImageModule = cornerstone.metaData.get('generalImageModule', imageId) || {};\n        var instanceNumber = generalImageModule.instanceNumber;\n        var cineModule = cornerstone.metaData.get('cineModule', imageId) || {};\n        var frameTime = cineModule.frameTime;\n        var frameRate = formatNumberPrecision$1(1000 / frameTime, 1);\n        var compression = getCompression(imageId);\n        var wwwc = \"W: \".concat(windowWidth.toFixed ? windowWidth.toFixed(0) : windowWidth, \" L: \").concat(windowWidth.toFixed ? windowCenter.toFixed(0) : windowCenter);\n        var imageDimensions = \"\".concat(columns, \" x \").concat(rows);\n        var _this$props2 = this.props,\n            imageIndex = _this$props2.imageIndex,\n            stackSize = _this$props2.stackSize;\n        var normal = React__default.createElement(React__default.Fragment, null, React__default.createElement(\"div\", {\n          className: \"top-left overlay-element\"\n        }, React__default.createElement(\"div\", null, formatPN$1(patientName)), React__default.createElement(\"div\", null, patientId)), React__default.createElement(\"div\", {\n          className: \"top-right overlay-element\"\n        }, React__default.createElement(\"div\", null, studyDescription), React__default.createElement(\"div\", null, formatDA$1(studyDate), \" \", formatTM$1(studyTime))), React__default.createElement(\"div\", {\n          className: \"bottom-right overlay-element\"\n        }, React__default.createElement(\"div\", null, \"Zoom: \", zoomPercentage, \"%\"), React__default.createElement(\"div\", null, wwwc), React__default.createElement(\"div\", {\n          className: \"compressionIndicator\"\n        }, compression)), React__default.createElement(\"div\", {\n          className: \"bottom-left overlay-element\"\n        }, React__default.createElement(\"div\", null, seriesNumber >= 0 ? \"Ser: \".concat(seriesNumber) : ''), React__default.createElement(\"div\", null, stackSize > 1 ? \"Img: \".concat(instanceNumber, \" \").concat(imageIndex, \"/\").concat(stackSize) : ''), React__default.createElement(\"div\", null, frameRate >= 0 ? \"\".concat(formatNumberPrecision$1(frameRate, 2), \" FPS\") : '', React__default.createElement(\"div\", null, imageDimensions), React__default.createElement(\"div\", null, isValidNumber$1(sliceLocation) ? \"Loc: \".concat(formatNumberPrecision$1(sliceLocation, 2), \" mm \") : '', sliceThickness ? \"Thick: \".concat(formatNumberPrecision$1(sliceThickness, 2), \" mm\") : ''), React__default.createElement(\"div\", null, seriesDescription))));\n        return React__default.createElement(\"div\", {\n          className: \"ViewportOverlay\"\n        }, normal);\n      }\n    }]);\n\n    return ViewportOverlay;\n  }(React.PureComponent);\n\n  defineProperty(ViewportOverlay, \"propTypes\", {\n    scale: propTypes.number.isRequired,\n    windowWidth: propTypes.oneOfType([propTypes.number.isRequired, propTypes.string.isRequired]),\n    windowCenter: propTypes.oneOfType([propTypes.number.isRequired, propTypes.string.isRequired]),\n    imageId: propTypes.string.isRequired,\n    imageIndex: propTypes.number.isRequired,\n    stackSize: propTypes.number.isRequired\n  });\n\n  var css$2 = \".imageViewerLoadingIndicator {\\n  color: #91b9cd;\\n}\\n\\n.faded {\\n  opacity: 0.5;\\n}\\n\\n.imageViewerErrorLoadingIndicator {\\n  color: #e29e4a;\\n}\\n\\n.imageViewerErrorLoadingIndicator p,\\n.imageViewerErrorLoadingIndicator h4 {\\n  padding: 4px 0;\\n  text-align: center;\\n  word-wrap: break-word;\\n}\\n\\n.imageViewerErrorLoadingIndicator p {\\n  font-size: 11pt;\\n}\\n\\n.loadingIndicator {\\n  background-color: rgba(0, 0, 0, 0.75);\\n  font-size: 18px;\\n  height: 100%;\\n  overflow: hidden;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 0;\\n  width: 100%;\\n  z-index: 1;\\n}\\n\\n.loadingIndicator .indicatorContents {\\n  font-weight: 300;\\n  position: absolute;\\n  text-align: center;\\n  top: 50%;\\n  transform: translateY(-50%);\\n  width: 100%;\\n}\\n\";\n  styleInject(css$2);\n\n  var LoadingIndicator =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    inherits(LoadingIndicator, _PureComponent);\n\n    function LoadingIndicator() {\n      classCallCheck(this, LoadingIndicator);\n\n      return possibleConstructorReturn(this, getPrototypeOf(LoadingIndicator).apply(this, arguments));\n    }\n\n    createClass(LoadingIndicator, [{\n      key: \"render\",\n      value: function render() {\n        var pc = this.props.percentComplete;\n        return React__default.createElement(React__default.Fragment, null, this.props.error ? React__default.createElement(\"div\", {\n          className: \"imageViewerErrorLoadingIndicator loadingIndicator\"\n        }, React__default.createElement(\"div\", {\n          className: \"indicatorContents\"\n        }, React__default.createElement(\"h4\", null, \"Error Loading Image\"), React__default.createElement(\"p\", {\n          className: \"description\"\n        }, \"An error has occurred.\"), React__default.createElement(\"p\", {\n          className: \"details\"\n        }, this.props.error.message))) : React__default.createElement(\"div\", {\n          className: \"imageViewerLoadingIndicator loadingIndicator\"\n        }, React__default.createElement(\"div\", {\n          className: \"indicatorContents\"\n        }, React__default.createElement(\"h2\", null, pc < 100 ? 'Loading...' : 'Loaded -', React__default.createElement(\"i\", {\n          className: \"fa fa-spin fa-circle-o-notch fa-fw\"\n        }), ' '), pc === 100 && React__default.createElement(\"p\", null, \"Processing...\"))));\n      }\n    }]);\n\n    return LoadingIndicator;\n  }(React.PureComponent);\n\n  defineProperty(LoadingIndicator, \"propTypes\", {\n    percentComplete: propTypes.number.isRequired,\n    error: propTypes.object\n  });\n\n  defineProperty(LoadingIndicator, \"defaultProps\", {\n    percentComplete: 0,\n    error: null\n  });\n\n  var css$3 = \".ViewportOrientationMarkers {\\n  pointer-events: none;\\n  font-size: 15px;\\n  color: #ccc;\\n  line-height: 18px;\\n}\\n.ViewportOrientationMarkers .orientation-marker {\\n  position: absolute;\\n}\\n.ViewportOrientationMarkers .top-mid {\\n  top: 5px;\\n  left: 50%;\\n}\\n.ViewportOrientationMarkers .left-mid {\\n  top: 47%;\\n  left: 5px;\\n}\\n\";\n  styleInject(css$3);\n\n  /**\n   *\n   * Computes the orientation labels on a Cornerstone-enabled Viewport element\n   * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\n   *\n   * @param {*} rowCosines\n   * @param {*} columnCosines\n   * @param {*} rotationDegrees\n   * @param {*} isFlippedVertically\n   * @param {*} isFlippedHorizontally\n   * @returns\n   */\n\n  function getOrientationMarkers(rowCosines, columnCosines, rotationDegrees, isFlippedVertically, isFlippedHorizontally) {\n    var _cornerstoneTools$ori = cornerstoneTools.orientation,\n        getOrientationString = _cornerstoneTools$ori.getOrientationString,\n        invertOrientationString = _cornerstoneTools$ori.invertOrientationString;\n    var rowString = getOrientationString(rowCosines);\n    var columnString = getOrientationString(columnCosines);\n    var oppositeRowString = invertOrientationString(rowString);\n    var oppositeColumnString = invertOrientationString(columnString);\n    var markers = {\n      top: oppositeColumnString,\n      left: oppositeRowString\n    }; // If any vertical or horizontal flips are applied, change the orientation strings ahead of\n    // the rotation applications\n\n    if (isFlippedVertically) {\n      markers.top = invertOrientationString(markers.top);\n    }\n\n    if (isFlippedHorizontally) {\n      markers.left = invertOrientationString(markers.left);\n    } // Swap the labels accordingly if the viewport has been rotated\n    // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\n\n\n    if (rotationDegrees === 90 || rotationDegrees === -270) {\n      return {\n        top: markers.left,\n        left: invertOrientationString(markers.top)\n      };\n    } else if (rotationDegrees === -90 || rotationDegrees === 270) {\n      return {\n        top: invertOrientationString(markers.left),\n        left: markers.top\n      };\n    } else if (rotationDegrees === 180 || rotationDegrees === -180) {\n      return {\n        top: invertOrientationString(markers.top),\n        left: invertOrientationString(markers.left)\n      };\n    }\n\n    return markers;\n  }\n\n  var ViewportOrientationMarkers =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    inherits(ViewportOrientationMarkers, _PureComponent);\n\n    function ViewportOrientationMarkers() {\n      classCallCheck(this, ViewportOrientationMarkers);\n\n      return possibleConstructorReturn(this, getPrototypeOf(ViewportOrientationMarkers).apply(this, arguments));\n    }\n\n    createClass(ViewportOrientationMarkers, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            rowCosines = _this$props.rowCosines,\n            columnCosines = _this$props.columnCosines,\n            rotationDegrees = _this$props.rotationDegrees,\n            isFlippedVertically = _this$props.isFlippedVertically,\n            isFlippedHorizontally = _this$props.isFlippedHorizontally;\n\n        if (!rowCosines || !columnCosines) {\n          return '';\n        }\n\n        var markers = getOrientationMarkers(rowCosines, columnCosines, rotationDegrees, isFlippedVertically, isFlippedHorizontally);\n        return React__default.createElement(\"div\", {\n          className: \"ViewportOrientationMarkers noselect\"\n        }, React__default.createElement(\"div\", {\n          className: \"top-mid orientation-marker\"\n        }, markers.top), React__default.createElement(\"div\", {\n          className: \"left-mid orientation-marker\"\n        }, markers.left));\n      }\n    }]);\n\n    return ViewportOrientationMarkers;\n  }(React.PureComponent);\n\n  defineProperty(ViewportOrientationMarkers, \"propTypes\", {\n    rowCosines: propTypes.array.isRequired,\n    columnCosines: propTypes.array.isRequired,\n    rotationDegrees: propTypes.number.isRequired,\n    isFlippedVertically: propTypes.bool.isRequired,\n    isFlippedHorizontally: propTypes.bool.isRequired\n  });\n\n  /**\r\n   * A collection of shims that provide minimal functionality of the ES6 collections.\r\n   *\r\n   * These implementations are not meant to be used outside of the ResizeObserver\r\n   * modules as they cover only a limited range of use cases.\r\n   */\r\n  /* eslint-disable require-jsdoc, valid-jsdoc */\r\n  var MapShim = (function () {\r\n      if (typeof Map !== 'undefined') {\r\n          return Map;\r\n      }\r\n      /**\r\n       * Returns index in provided array that matches the specified key.\r\n       *\r\n       * @param {Array<Array>} arr\r\n       * @param {*} key\r\n       * @returns {number}\r\n       */\r\n      function getIndex(arr, key) {\r\n          var result = -1;\r\n          arr.some(function (entry, index) {\r\n              if (entry[0] === key) {\r\n                  result = index;\r\n                  return true;\r\n              }\r\n              return false;\r\n          });\r\n          return result;\r\n      }\r\n      return /** @class */ (function () {\r\n          function class_1() {\r\n              this.__entries__ = [];\r\n          }\r\n          Object.defineProperty(class_1.prototype, \"size\", {\r\n              /**\r\n               * @returns {boolean}\r\n               */\r\n              get: function () {\r\n                  return this.__entries__.length;\r\n              },\r\n              enumerable: true,\r\n              configurable: true\r\n          });\r\n          /**\r\n           * @param {*} key\r\n           * @returns {*}\r\n           */\r\n          class_1.prototype.get = function (key) {\r\n              var index = getIndex(this.__entries__, key);\r\n              var entry = this.__entries__[index];\r\n              return entry && entry[1];\r\n          };\r\n          /**\r\n           * @param {*} key\r\n           * @param {*} value\r\n           * @returns {void}\r\n           */\r\n          class_1.prototype.set = function (key, value) {\r\n              var index = getIndex(this.__entries__, key);\r\n              if (~index) {\r\n                  this.__entries__[index][1] = value;\r\n              }\r\n              else {\r\n                  this.__entries__.push([key, value]);\r\n              }\r\n          };\r\n          /**\r\n           * @param {*} key\r\n           * @returns {void}\r\n           */\r\n          class_1.prototype.delete = function (key) {\r\n              var entries = this.__entries__;\r\n              var index = getIndex(entries, key);\r\n              if (~index) {\r\n                  entries.splice(index, 1);\r\n              }\r\n          };\r\n          /**\r\n           * @param {*} key\r\n           * @returns {void}\r\n           */\r\n          class_1.prototype.has = function (key) {\r\n              return !!~getIndex(this.__entries__, key);\r\n          };\r\n          /**\r\n           * @returns {void}\r\n           */\r\n          class_1.prototype.clear = function () {\r\n              this.__entries__.splice(0);\r\n          };\r\n          /**\r\n           * @param {Function} callback\r\n           * @param {*} [ctx=null]\r\n           * @returns {void}\r\n           */\r\n          class_1.prototype.forEach = function (callback, ctx) {\r\n              if (ctx === void 0) { ctx = null; }\r\n              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                  var entry = _a[_i];\r\n                  callback.call(ctx, entry[1], entry[0]);\r\n              }\r\n          };\r\n          return class_1;\r\n      }());\r\n  })();\n\n  /**\r\n   * Detects whether window and document objects are available in current environment.\r\n   */\r\n  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n  // Returns global object of a current environment.\r\n  var global$1 = (function () {\r\n      if (typeof global !== 'undefined' && global.Math === Math) {\r\n          return global;\r\n      }\r\n      if (typeof self !== 'undefined' && self.Math === Math) {\r\n          return self;\r\n      }\r\n      if (typeof window !== 'undefined' && window.Math === Math) {\r\n          return window;\r\n      }\r\n      // eslint-disable-next-line no-new-func\r\n      return Function('return this')();\r\n  })();\n\n  /**\r\n   * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n   * first one is not supported.\r\n   *\r\n   * @returns {number} Requests' identifier.\r\n   */\r\n  var requestAnimationFrame$1 = (function () {\r\n      if (typeof requestAnimationFrame === 'function') {\r\n          // It's required to use a bounded function because IE sometimes throws\r\n          // an \"Invalid calling object\" error if rAF is invoked without the global\r\n          // object on the left hand side.\r\n          return requestAnimationFrame.bind(global$1);\r\n      }\r\n      return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n  })();\n\n  // Defines minimum timeout before adding a trailing call.\r\n  var trailingTimeout = 2;\r\n  /**\r\n   * Creates a wrapper function which ensures that provided callback will be\r\n   * invoked only once during the specified delay period.\r\n   *\r\n   * @param {Function} callback - Function to be invoked after the delay period.\r\n   * @param {number} delay - Delay after which to invoke callback.\r\n   * @returns {Function}\r\n   */\r\n  function throttle (callback, delay) {\r\n      var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n      /**\r\n       * Invokes the original callback function and schedules new invocation if\r\n       * the \"proxy\" was called during current request.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      function resolvePending() {\r\n          if (leadingCall) {\r\n              leadingCall = false;\r\n              callback();\r\n          }\r\n          if (trailingCall) {\r\n              proxy();\r\n          }\r\n      }\r\n      /**\r\n       * Callback invoked after the specified delay. It will further postpone\r\n       * invocation of the original function delegating it to the\r\n       * requestAnimationFrame.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      function timeoutCallback() {\r\n          requestAnimationFrame$1(resolvePending);\r\n      }\r\n      /**\r\n       * Schedules invocation of the original function.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      function proxy() {\r\n          var timeStamp = Date.now();\r\n          if (leadingCall) {\r\n              // Reject immediately following calls.\r\n              if (timeStamp - lastCallTime < trailingTimeout) {\r\n                  return;\r\n              }\r\n              // Schedule new call to be in invoked when the pending one is resolved.\r\n              // This is important for \"transitions\" which never actually start\r\n              // immediately so there is a chance that we might miss one if change\r\n              // happens amids the pending invocation.\r\n              trailingCall = true;\r\n          }\r\n          else {\r\n              leadingCall = true;\r\n              trailingCall = false;\r\n              setTimeout(timeoutCallback, delay);\r\n          }\r\n          lastCallTime = timeStamp;\r\n      }\r\n      return proxy;\r\n  }\n\n  // Minimum delay before invoking the update of observers.\r\n  var REFRESH_DELAY = 20;\r\n  // A list of substrings of CSS properties used to find transition events that\r\n  // might affect dimensions of observed elements.\r\n  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n  // Check if MutationObserver is available.\r\n  var mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n  /**\r\n   * Singleton controller class which handles updates of ResizeObserver instances.\r\n   */\r\n  var ResizeObserverController = /** @class */ (function () {\r\n      /**\r\n       * Creates a new instance of ResizeObserverController.\r\n       *\r\n       * @private\r\n       */\r\n      function ResizeObserverController() {\r\n          /**\r\n           * Indicates whether DOM listeners have been added.\r\n           *\r\n           * @private {boolean}\r\n           */\r\n          this.connected_ = false;\r\n          /**\r\n           * Tells that controller has subscribed for Mutation Events.\r\n           *\r\n           * @private {boolean}\r\n           */\r\n          this.mutationEventsAdded_ = false;\r\n          /**\r\n           * Keeps reference to the instance of MutationObserver.\r\n           *\r\n           * @private {MutationObserver}\r\n           */\r\n          this.mutationsObserver_ = null;\r\n          /**\r\n           * A list of connected observers.\r\n           *\r\n           * @private {Array<ResizeObserverSPI>}\r\n           */\r\n          this.observers_ = [];\r\n          this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n          this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n      }\r\n      /**\r\n       * Adds observer to observers list.\r\n       *\r\n       * @param {ResizeObserverSPI} observer - Observer to be added.\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverController.prototype.addObserver = function (observer) {\r\n          if (!~this.observers_.indexOf(observer)) {\r\n              this.observers_.push(observer);\r\n          }\r\n          // Add listeners if they haven't been added yet.\r\n          if (!this.connected_) {\r\n              this.connect_();\r\n          }\r\n      };\r\n      /**\r\n       * Removes observer from observers list.\r\n       *\r\n       * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverController.prototype.removeObserver = function (observer) {\r\n          var observers = this.observers_;\r\n          var index = observers.indexOf(observer);\r\n          // Remove observer if it's present in registry.\r\n          if (~index) {\r\n              observers.splice(index, 1);\r\n          }\r\n          // Remove listeners if controller has no connected observers.\r\n          if (!observers.length && this.connected_) {\r\n              this.disconnect_();\r\n          }\r\n      };\r\n      /**\r\n       * Invokes the update of observers. It will continue running updates insofar\r\n       * it detects changes.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverController.prototype.refresh = function () {\r\n          var changesDetected = this.updateObservers_();\r\n          // Continue running updates if changes have been detected as there might\r\n          // be future ones caused by CSS transitions.\r\n          if (changesDetected) {\r\n              this.refresh();\r\n          }\r\n      };\r\n      /**\r\n       * Updates every observer from observers list and notifies them of queued\r\n       * entries.\r\n       *\r\n       * @private\r\n       * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n       *      dimensions of it's elements.\r\n       */\r\n      ResizeObserverController.prototype.updateObservers_ = function () {\r\n          // Collect observers that have active observations.\r\n          var activeObservers = this.observers_.filter(function (observer) {\r\n              return observer.gatherActive(), observer.hasActive();\r\n          });\r\n          // Deliver notifications in a separate cycle in order to avoid any\r\n          // collisions between observers, e.g. when multiple instances of\r\n          // ResizeObserver are tracking the same element and the callback of one\r\n          // of them changes content dimensions of the observed target. Sometimes\r\n          // this may result in notifications being blocked for the rest of observers.\r\n          activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n          return activeObservers.length > 0;\r\n      };\r\n      /**\r\n       * Initializes DOM listeners.\r\n       *\r\n       * @private\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverController.prototype.connect_ = function () {\r\n          // Do nothing if running in a non-browser environment or if listeners\r\n          // have been already added.\r\n          if (!isBrowser || this.connected_) {\r\n              return;\r\n          }\r\n          // Subscription to the \"Transitionend\" event is used as a workaround for\r\n          // delayed transitions. This way it's possible to capture at least the\r\n          // final state of an element.\r\n          document.addEventListener('transitionend', this.onTransitionEnd_);\r\n          window.addEventListener('resize', this.refresh);\r\n          if (mutationObserverSupported) {\r\n              this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n              this.mutationsObserver_.observe(document, {\r\n                  attributes: true,\r\n                  childList: true,\r\n                  characterData: true,\r\n                  subtree: true\r\n              });\r\n          }\r\n          else {\r\n              document.addEventListener('DOMSubtreeModified', this.refresh);\r\n              this.mutationEventsAdded_ = true;\r\n          }\r\n          this.connected_ = true;\r\n      };\r\n      /**\r\n       * Removes DOM listeners.\r\n       *\r\n       * @private\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverController.prototype.disconnect_ = function () {\r\n          // Do nothing if running in a non-browser environment or if listeners\r\n          // have been already removed.\r\n          if (!isBrowser || !this.connected_) {\r\n              return;\r\n          }\r\n          document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n          window.removeEventListener('resize', this.refresh);\r\n          if (this.mutationsObserver_) {\r\n              this.mutationsObserver_.disconnect();\r\n          }\r\n          if (this.mutationEventsAdded_) {\r\n              document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n          }\r\n          this.mutationsObserver_ = null;\r\n          this.mutationEventsAdded_ = false;\r\n          this.connected_ = false;\r\n      };\r\n      /**\r\n       * \"Transitionend\" event handler.\r\n       *\r\n       * @private\r\n       * @param {TransitionEvent} event\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n          var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n          // Detect whether transition may affect dimensions of an element.\r\n          var isReflowProperty = transitionKeys.some(function (key) {\r\n              return !!~propertyName.indexOf(key);\r\n          });\r\n          if (isReflowProperty) {\r\n              this.refresh();\r\n          }\r\n      };\r\n      /**\r\n       * Returns instance of the ResizeObserverController.\r\n       *\r\n       * @returns {ResizeObserverController}\r\n       */\r\n      ResizeObserverController.getInstance = function () {\r\n          if (!this.instance_) {\r\n              this.instance_ = new ResizeObserverController();\r\n          }\r\n          return this.instance_;\r\n      };\r\n      /**\r\n       * Holds reference to the controller's instance.\r\n       *\r\n       * @private {ResizeObserverController}\r\n       */\r\n      ResizeObserverController.instance_ = null;\r\n      return ResizeObserverController;\r\n  }());\n\n  /**\r\n   * Defines non-writable/enumerable properties of the provided target object.\r\n   *\r\n   * @param {Object} target - Object for which to define properties.\r\n   * @param {Object} props - Properties to be defined.\r\n   * @returns {Object} Target object.\r\n   */\r\n  var defineConfigurable = (function (target, props) {\r\n      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n          var key = _a[_i];\r\n          Object.defineProperty(target, key, {\r\n              value: props[key],\r\n              enumerable: false,\r\n              writable: false,\r\n              configurable: true\r\n          });\r\n      }\r\n      return target;\r\n  });\n\n  /**\r\n   * Returns the global object associated with provided element.\r\n   *\r\n   * @param {Object} target\r\n   * @returns {Object}\r\n   */\r\n  var getWindowOf = (function (target) {\r\n      // Assume that the element is an instance of Node, which means that it\r\n      // has the \"ownerDocument\" property from which we can retrieve a\r\n      // corresponding global object.\r\n      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n      // Return the local global object if it's not possible extract one from\r\n      // provided element.\r\n      return ownerGlobal || global$1;\r\n  });\n\n  // Placeholder of an empty content rectangle.\r\n  var emptyRect = createRectInit(0, 0, 0, 0);\r\n  /**\r\n   * Converts provided string to a number.\r\n   *\r\n   * @param {number|string} value\r\n   * @returns {number}\r\n   */\r\n  function toFloat(value) {\r\n      return parseFloat(value) || 0;\r\n  }\r\n  /**\r\n   * Extracts borders size from provided styles.\r\n   *\r\n   * @param {CSSStyleDeclaration} styles\r\n   * @param {...string} positions - Borders positions (top, right, ...)\r\n   * @returns {number}\r\n   */\r\n  function getBordersSize(styles) {\r\n      var positions = [];\r\n      for (var _i = 1; _i < arguments.length; _i++) {\r\n          positions[_i - 1] = arguments[_i];\r\n      }\r\n      return positions.reduce(function (size, position) {\r\n          var value = styles['border-' + position + '-width'];\r\n          return size + toFloat(value);\r\n      }, 0);\r\n  }\r\n  /**\r\n   * Extracts paddings sizes from provided styles.\r\n   *\r\n   * @param {CSSStyleDeclaration} styles\r\n   * @returns {Object} Paddings box.\r\n   */\r\n  function getPaddings(styles) {\r\n      var positions = ['top', 'right', 'bottom', 'left'];\r\n      var paddings = {};\r\n      for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n          var position = positions_1[_i];\r\n          var value = styles['padding-' + position];\r\n          paddings[position] = toFloat(value);\r\n      }\r\n      return paddings;\r\n  }\r\n  /**\r\n   * Calculates content rectangle of provided SVG element.\r\n   *\r\n   * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n   *      to be calculated.\r\n   * @returns {DOMRectInit}\r\n   */\r\n  function getSVGContentRect(target) {\r\n      var bbox = target.getBBox();\r\n      return createRectInit(0, 0, bbox.width, bbox.height);\r\n  }\r\n  /**\r\n   * Calculates content rectangle of provided HTMLElement.\r\n   *\r\n   * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n   * @returns {DOMRectInit}\r\n   */\r\n  function getHTMLElementContentRect(target) {\r\n      // Client width & height properties can't be\r\n      // used exclusively as they provide rounded values.\r\n      var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n      // By this condition we can catch all non-replaced inline, hidden and\r\n      // detached elements. Though elements with width & height properties less\r\n      // than 0.5 will be discarded as well.\r\n      //\r\n      // Without it we would need to implement separate methods for each of\r\n      // those cases and it's not possible to perform a precise and performance\r\n      // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n      // gives wrong results for elements with width & height less than 0.5.\r\n      if (!clientWidth && !clientHeight) {\r\n          return emptyRect;\r\n      }\r\n      var styles = getWindowOf(target).getComputedStyle(target);\r\n      var paddings = getPaddings(styles);\r\n      var horizPad = paddings.left + paddings.right;\r\n      var vertPad = paddings.top + paddings.bottom;\r\n      // Computed styles of width & height are being used because they are the\r\n      // only dimensions available to JS that contain non-rounded values. It could\r\n      // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n      // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n      var width = toFloat(styles.width), height = toFloat(styles.height);\r\n      // Width & height include paddings and borders when the 'border-box' box\r\n      // model is applied (except for IE).\r\n      if (styles.boxSizing === 'border-box') {\r\n          // Following conditions are required to handle Internet Explorer which\r\n          // doesn't include paddings and borders to computed CSS dimensions.\r\n          //\r\n          // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n          // properties then it's either IE, and thus we don't need to subtract\r\n          // anything, or an element merely doesn't have paddings/borders styles.\r\n          if (Math.round(width + horizPad) !== clientWidth) {\r\n              width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n          }\r\n          if (Math.round(height + vertPad) !== clientHeight) {\r\n              height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n          }\r\n      }\r\n      // Following steps can't be applied to the document's root element as its\r\n      // client[Width/Height] properties represent viewport area of the window.\r\n      // Besides, it's as well not necessary as the <html> itself neither has\r\n      // rendered scroll bars nor it can be clipped.\r\n      if (!isDocumentElement(target)) {\r\n          // In some browsers (only in Firefox, actually) CSS width & height\r\n          // include scroll bars size which can be removed at this step as scroll\r\n          // bars are the only difference between rounded dimensions + paddings\r\n          // and \"client\" properties, though that is not always true in Chrome.\r\n          var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n          var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n          // Chrome has a rather weird rounding of \"client\" properties.\r\n          // E.g. for an element with content width of 314.2px it sometimes gives\r\n          // the client width of 315px and for the width of 314.7px it may give\r\n          // 314px. And it doesn't happen all the time. So just ignore this delta\r\n          // as a non-relevant.\r\n          if (Math.abs(vertScrollbar) !== 1) {\r\n              width -= vertScrollbar;\r\n          }\r\n          if (Math.abs(horizScrollbar) !== 1) {\r\n              height -= horizScrollbar;\r\n          }\r\n      }\r\n      return createRectInit(paddings.left, paddings.top, width, height);\r\n  }\r\n  /**\r\n   * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n   *\r\n   * @param {Element} target - Element to be checked.\r\n   * @returns {boolean}\r\n   */\r\n  var isSVGGraphicsElement = (function () {\r\n      // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n      // interface.\r\n      if (typeof SVGGraphicsElement !== 'undefined') {\r\n          return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n      }\r\n      // If it's so, then check that element is at least an instance of the\r\n      // SVGElement and that it has the \"getBBox\" method.\r\n      // eslint-disable-next-line no-extra-parens\r\n      return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n          typeof target.getBBox === 'function'); };\r\n  })();\r\n  /**\r\n   * Checks whether provided element is a document element (<html>).\r\n   *\r\n   * @param {Element} target - Element to be checked.\r\n   * @returns {boolean}\r\n   */\r\n  function isDocumentElement(target) {\r\n      return target === getWindowOf(target).document.documentElement;\r\n  }\r\n  /**\r\n   * Calculates an appropriate content rectangle for provided html or svg element.\r\n   *\r\n   * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n   * @returns {DOMRectInit}\r\n   */\r\n  function getContentRect(target) {\r\n      if (!isBrowser) {\r\n          return emptyRect;\r\n      }\r\n      if (isSVGGraphicsElement(target)) {\r\n          return getSVGContentRect(target);\r\n      }\r\n      return getHTMLElementContentRect(target);\r\n  }\r\n  /**\r\n   * Creates rectangle with an interface of the DOMRectReadOnly.\r\n   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n   *\r\n   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n   * @returns {DOMRectReadOnly}\r\n   */\r\n  function createReadOnlyRect(_a) {\r\n      var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n      // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n      var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n      var rect = Object.create(Constr.prototype);\r\n      // Rectangle's properties are not writable and non-enumerable.\r\n      defineConfigurable(rect, {\r\n          x: x, y: y, width: width, height: height,\r\n          top: y,\r\n          right: x + width,\r\n          bottom: height + y,\r\n          left: x\r\n      });\r\n      return rect;\r\n  }\r\n  /**\r\n   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n   *\r\n   * @param {number} x - X coordinate.\r\n   * @param {number} y - Y coordinate.\r\n   * @param {number} width - Rectangle's width.\r\n   * @param {number} height - Rectangle's height.\r\n   * @returns {DOMRectInit}\r\n   */\r\n  function createRectInit(x, y, width, height) {\r\n      return { x: x, y: y, width: width, height: height };\r\n  }\n\n  /**\r\n   * Class that is responsible for computations of the content rectangle of\r\n   * provided DOM element and for keeping track of it's changes.\r\n   */\r\n  var ResizeObservation = /** @class */ (function () {\r\n      /**\r\n       * Creates an instance of ResizeObservation.\r\n       *\r\n       * @param {Element} target - Element to be observed.\r\n       */\r\n      function ResizeObservation(target) {\r\n          /**\r\n           * Broadcasted width of content rectangle.\r\n           *\r\n           * @type {number}\r\n           */\r\n          this.broadcastWidth = 0;\r\n          /**\r\n           * Broadcasted height of content rectangle.\r\n           *\r\n           * @type {number}\r\n           */\r\n          this.broadcastHeight = 0;\r\n          /**\r\n           * Reference to the last observed content rectangle.\r\n           *\r\n           * @private {DOMRectInit}\r\n           */\r\n          this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n          this.target = target;\r\n      }\r\n      /**\r\n       * Updates content rectangle and tells whether it's width or height properties\r\n       * have changed since the last broadcast.\r\n       *\r\n       * @returns {boolean}\r\n       */\r\n      ResizeObservation.prototype.isActive = function () {\r\n          var rect = getContentRect(this.target);\r\n          this.contentRect_ = rect;\r\n          return (rect.width !== this.broadcastWidth ||\r\n              rect.height !== this.broadcastHeight);\r\n      };\r\n      /**\r\n       * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n       * from the corresponding properties of the last observed content rectangle.\r\n       *\r\n       * @returns {DOMRectInit} Last observed content rectangle.\r\n       */\r\n      ResizeObservation.prototype.broadcastRect = function () {\r\n          var rect = this.contentRect_;\r\n          this.broadcastWidth = rect.width;\r\n          this.broadcastHeight = rect.height;\r\n          return rect;\r\n      };\r\n      return ResizeObservation;\r\n  }());\n\n  var ResizeObserverEntry = /** @class */ (function () {\r\n      /**\r\n       * Creates an instance of ResizeObserverEntry.\r\n       *\r\n       * @param {Element} target - Element that is being observed.\r\n       * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n       */\r\n      function ResizeObserverEntry(target, rectInit) {\r\n          var contentRect = createReadOnlyRect(rectInit);\r\n          // According to the specification following properties are not writable\r\n          // and are also not enumerable in the native implementation.\r\n          //\r\n          // Property accessors are not being used as they'd require to define a\r\n          // private WeakMap storage which may cause memory leaks in browsers that\r\n          // don't support this type of collections.\r\n          defineConfigurable(this, { target: target, contentRect: contentRect });\r\n      }\r\n      return ResizeObserverEntry;\r\n  }());\n\n  var ResizeObserverSPI = /** @class */ (function () {\r\n      /**\r\n       * Creates a new instance of ResizeObserver.\r\n       *\r\n       * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n       *      when one of the observed elements changes it's content dimensions.\r\n       * @param {ResizeObserverController} controller - Controller instance which\r\n       *      is responsible for the updates of observer.\r\n       * @param {ResizeObserver} callbackCtx - Reference to the public\r\n       *      ResizeObserver instance which will be passed to callback function.\r\n       */\r\n      function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n          /**\r\n           * Collection of resize observations that have detected changes in dimensions\r\n           * of elements.\r\n           *\r\n           * @private {Array<ResizeObservation>}\r\n           */\r\n          this.activeObservations_ = [];\r\n          /**\r\n           * Registry of the ResizeObservation instances.\r\n           *\r\n           * @private {Map<Element, ResizeObservation>}\r\n           */\r\n          this.observations_ = new MapShim();\r\n          if (typeof callback !== 'function') {\r\n              throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n          }\r\n          this.callback_ = callback;\r\n          this.controller_ = controller;\r\n          this.callbackCtx_ = callbackCtx;\r\n      }\r\n      /**\r\n       * Starts observing provided element.\r\n       *\r\n       * @param {Element} target - Element to be observed.\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverSPI.prototype.observe = function (target) {\r\n          if (!arguments.length) {\r\n              throw new TypeError('1 argument required, but only 0 present.');\r\n          }\r\n          // Do nothing if current environment doesn't have the Element interface.\r\n          if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n              return;\r\n          }\r\n          if (!(target instanceof getWindowOf(target).Element)) {\r\n              throw new TypeError('parameter 1 is not of type \"Element\".');\r\n          }\r\n          var observations = this.observations_;\r\n          // Do nothing if element is already being observed.\r\n          if (observations.has(target)) {\r\n              return;\r\n          }\r\n          observations.set(target, new ResizeObservation(target));\r\n          this.controller_.addObserver(this);\r\n          // Force the update of observations.\r\n          this.controller_.refresh();\r\n      };\r\n      /**\r\n       * Stops observing provided element.\r\n       *\r\n       * @param {Element} target - Element to stop observing.\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverSPI.prototype.unobserve = function (target) {\r\n          if (!arguments.length) {\r\n              throw new TypeError('1 argument required, but only 0 present.');\r\n          }\r\n          // Do nothing if current environment doesn't have the Element interface.\r\n          if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n              return;\r\n          }\r\n          if (!(target instanceof getWindowOf(target).Element)) {\r\n              throw new TypeError('parameter 1 is not of type \"Element\".');\r\n          }\r\n          var observations = this.observations_;\r\n          // Do nothing if element is not being observed.\r\n          if (!observations.has(target)) {\r\n              return;\r\n          }\r\n          observations.delete(target);\r\n          if (!observations.size) {\r\n              this.controller_.removeObserver(this);\r\n          }\r\n      };\r\n      /**\r\n       * Stops observing all elements.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverSPI.prototype.disconnect = function () {\r\n          this.clearActive();\r\n          this.observations_.clear();\r\n          this.controller_.removeObserver(this);\r\n      };\r\n      /**\r\n       * Collects observation instances the associated element of which has changed\r\n       * it's content rectangle.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverSPI.prototype.gatherActive = function () {\r\n          var _this = this;\r\n          this.clearActive();\r\n          this.observations_.forEach(function (observation) {\r\n              if (observation.isActive()) {\r\n                  _this.activeObservations_.push(observation);\r\n              }\r\n          });\r\n      };\r\n      /**\r\n       * Invokes initial callback function with a list of ResizeObserverEntry\r\n       * instances collected from active resize observations.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverSPI.prototype.broadcastActive = function () {\r\n          // Do nothing if observer doesn't have active observations.\r\n          if (!this.hasActive()) {\r\n              return;\r\n          }\r\n          var ctx = this.callbackCtx_;\r\n          // Create ResizeObserverEntry instance for every active observation.\r\n          var entries = this.activeObservations_.map(function (observation) {\r\n              return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n          });\r\n          this.callback_.call(ctx, entries, ctx);\r\n          this.clearActive();\r\n      };\r\n      /**\r\n       * Clears the collection of active observations.\r\n       *\r\n       * @returns {void}\r\n       */\r\n      ResizeObserverSPI.prototype.clearActive = function () {\r\n          this.activeObservations_.splice(0);\r\n      };\r\n      /**\r\n       * Tells whether observer has active observations.\r\n       *\r\n       * @returns {boolean}\r\n       */\r\n      ResizeObserverSPI.prototype.hasActive = function () {\r\n          return this.activeObservations_.length > 0;\r\n      };\r\n      return ResizeObserverSPI;\r\n  }());\n\n  // Registry of internal observers. If WeakMap is not available use current shim\r\n  // for the Map collection as it has all required methods and because WeakMap\r\n  // can't be fully polyfilled anyway.\r\n  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n  /**\r\n   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n   * exposing only those methods and properties that are defined in the spec.\r\n   */\r\n  var ResizeObserver = /** @class */ (function () {\r\n      /**\r\n       * Creates a new instance of ResizeObserver.\r\n       *\r\n       * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n       *      dimensions of the observed elements change.\r\n       */\r\n      function ResizeObserver(callback) {\r\n          if (!(this instanceof ResizeObserver)) {\r\n              throw new TypeError('Cannot call a class as a function.');\r\n          }\r\n          if (!arguments.length) {\r\n              throw new TypeError('1 argument required, but only 0 present.');\r\n          }\r\n          var controller = ResizeObserverController.getInstance();\r\n          var observer = new ResizeObserverSPI(callback, controller, this);\r\n          observers.set(this, observer);\r\n      }\r\n      return ResizeObserver;\r\n  }());\r\n  // Expose public methods of ResizeObserver.\r\n  [\r\n      'observe',\r\n      'unobserve',\r\n      'disconnect'\r\n  ].forEach(function (method) {\r\n      ResizeObserver.prototype[method] = function () {\r\n          var _a;\r\n          return (_a = observers.get(this))[method].apply(_a, arguments);\r\n      };\r\n  });\n\n  var index = (function () {\r\n      // Export existing implementation if available.\r\n      if (typeof global$1.ResizeObserver !== 'undefined') {\r\n          return global$1.ResizeObserver;\r\n      }\r\n      return ResizeObserver;\r\n  })();\n\n  var rafSchd = function rafSchd(fn) {\n    var lastArgs = [];\n    var frameId = null;\n\n    var wrapperFn = function wrapperFn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      lastArgs = args;\n\n      if (frameId) {\n        return;\n      }\n\n      frameId = requestAnimationFrame(function () {\n        frameId = null;\n        fn.apply(void 0, lastArgs);\n      });\n    };\n\n    wrapperFn.cancel = function () {\n      if (!frameId) {\n        return;\n      }\n\n      cancelAnimationFrame(frameId);\n      frameId = null;\n    };\n\n    return wrapperFn;\n  };\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n\n  var isObject_1 = isObject;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  var _freeGlobal = freeGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = _freeGlobal || freeSelf || Function('return this')();\n\n  var _root = root;\n\n  /**\n   * Gets the timestamp of the number of milliseconds that have elapsed since\n   * the Unix epoch (1 January 1970 00:00:00 UTC).\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Date\n   * @returns {number} Returns the timestamp.\n   * @example\n   *\n   * _.defer(function(stamp) {\n   *   console.log(_.now() - stamp);\n   * }, _.now());\n   * // => Logs the number of milliseconds it took for the deferred invocation.\n   */\n  var now = function() {\n    return _root.Date.now();\n  };\n\n  var now_1 = now;\n\n  /** Built-in value references. */\n  var Symbol$1 = _root.Symbol;\n\n  var _Symbol = Symbol$1;\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$1 = objectProto.hasOwnProperty;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString = objectProto.toString;\n\n  /** Built-in value references. */\n  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty$1.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n    return result;\n  }\n\n  var _getRawTag = getRawTag;\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString$1 = objectProto$1.toString;\n\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n  function objectToString(value) {\n    return nativeObjectToString$1.call(value);\n  }\n\n  var _objectToString = objectToString;\n\n  /** `Object#toString` result references. */\n  var nullTag = '[object Null]',\n      undefinedTag = '[object Undefined]';\n\n  /** Built-in value references. */\n  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;\n\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n    return (symToStringTag$1 && symToStringTag$1 in Object(value))\n      ? _getRawTag(value)\n      : _objectToString(value);\n  }\n\n  var _baseGetTag = baseGetTag;\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n\n  var isObjectLike_1 = isObjectLike;\n\n  /** `Object#toString` result references. */\n  var symbolTag = '[object Symbol]';\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);\n  }\n\n  var isSymbol_1 = isSymbol;\n\n  /** Used as references for various `Number` constants. */\n  var NAN = 0 / 0;\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt;\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol_1(value)) {\n      return NAN;\n    }\n    if (isObject_1(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject_1(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim, '');\n    var isBinary = reIsBinary.test(value);\n    return (isBinary || reIsOctal.test(value))\n      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex.test(value) ? NAN : +value);\n  }\n\n  var toNumber_1 = toNumber;\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax = Math.max,\n      nativeMin = Math.min;\n\n  /**\n   * Creates a debounced function that delays invoking `func` until after `wait`\n   * milliseconds have elapsed since the last time the debounced function was\n   * invoked. The debounced function comes with a `cancel` method to cancel\n   * delayed `func` invocations and a `flush` method to immediately invoke them.\n   * Provide `options` to indicate whether `func` should be invoked on the\n   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n   * with the last arguments provided to the debounced function. Subsequent\n   * calls to the debounced function return the result of the last `func`\n   * invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the debounced function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.debounce` and `_.throttle`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to debounce.\n   * @param {number} [wait=0] The number of milliseconds to delay.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=false]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {number} [options.maxWait]\n   *  The maximum time `func` is allowed to be delayed before it's invoked.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * // Avoid costly calculations while the window size is in flux.\n   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n   *\n   * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n   * jQuery(element).on('click', _.debounce(sendMail, 300, {\n   *   'leading': true,\n   *   'trailing': false\n   * }));\n   *\n   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n   * var source = new EventSource('/stream');\n   * jQuery(source).on('message', debounced);\n   *\n   * // Cancel the trailing debounced invocation.\n   * jQuery(window).on('popstate', debounced.cancel);\n   */\n  function debounce(func, wait, options) {\n    var lastArgs,\n        lastThis,\n        maxWait,\n        result,\n        timerId,\n        lastCallTime,\n        lastInvokeTime = 0,\n        leading = false,\n        maxing = false,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    wait = toNumber_1(wait) || 0;\n    if (isObject_1(options)) {\n      leading = !!options.leading;\n      maxing = 'maxWait' in options;\n      maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n\n    function invokeFunc(time) {\n      var args = lastArgs,\n          thisArg = lastThis;\n\n      lastArgs = lastThis = undefined;\n      lastInvokeTime = time;\n      result = func.apply(thisArg, args);\n      return result;\n    }\n\n    function leadingEdge(time) {\n      // Reset any `maxWait` timer.\n      lastInvokeTime = time;\n      // Start the timer for the trailing edge.\n      timerId = setTimeout(timerExpired, wait);\n      // Invoke the leading edge.\n      return leading ? invokeFunc(time) : result;\n    }\n\n    function remainingWait(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime,\n          timeWaiting = wait - timeSinceLastCall;\n\n      return maxing\n        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n    }\n\n    function shouldInvoke(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n    }\n\n    function timerExpired() {\n      var time = now_1();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // Restart the timer.\n      timerId = setTimeout(timerExpired, remainingWait(time));\n    }\n\n    function trailingEdge(time) {\n      timerId = undefined;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs) {\n        return invokeFunc(time);\n      }\n      lastArgs = lastThis = undefined;\n      return result;\n    }\n\n    function cancel() {\n      if (timerId !== undefined) {\n        clearTimeout(timerId);\n      }\n      lastInvokeTime = 0;\n      lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n\n    function flush() {\n      return timerId === undefined ? result : trailingEdge(now_1());\n    }\n\n    function debounced() {\n      var time = now_1(),\n          isInvoking = shouldInvoke(time);\n\n      lastArgs = arguments;\n      lastThis = this;\n      lastCallTime = time;\n\n      if (isInvoking) {\n        if (timerId === undefined) {\n          return leadingEdge(lastCallTime);\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          clearTimeout(timerId);\n          timerId = setTimeout(timerExpired, wait);\n          return invokeFunc(lastCallTime);\n        }\n      }\n      if (timerId === undefined) {\n        timerId = setTimeout(timerExpired, wait);\n      }\n      return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    return debounced;\n  }\n\n  var debounce_1 = debounce;\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n  /**\n   * Creates a throttled function that only invokes `func` at most once per\n   * every `wait` milliseconds. The throttled function comes with a `cancel`\n   * method to cancel delayed `func` invocations and a `flush` method to\n   * immediately invoke them. Provide `options` to indicate whether `func`\n   * should be invoked on the leading and/or trailing edge of the `wait`\n   * timeout. The `func` is invoked with the last arguments provided to the\n   * throttled function. Subsequent calls to the throttled function return the\n   * result of the last `func` invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the throttled function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.throttle` and `_.debounce`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to throttle.\n   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=true]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * // Avoid excessively updating the position while scrolling.\n   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n   *\n   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n   * jQuery(element).on('click', throttled);\n   *\n   * // Cancel the trailing throttled invocation.\n   * jQuery(window).on('popstate', throttled.cancel);\n   */\n  function throttle$1(func, wait, options) {\n    var leading = true,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT$1);\n    }\n    if (isObject_1(options)) {\n      leading = 'leading' in options ? !!options.leading : leading;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n    return debounce_1(func, wait, {\n      'leading': leading,\n      'maxWait': wait,\n      'trailing': trailing\n    });\n  }\n\n  var throttle_1 = throttle$1;\n\n  var utils = createCommonjsModule(function (module, exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isDOMElement = exports.isSSR = exports.isFunction = exports.getHandle = exports.listHandle = void 0;\n\n  var _debounce = _interopRequireDefault(debounce_1);\n\n  var _throttle = _interopRequireDefault(throttle_1);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n  var listHandle = {\n    debounce: _debounce[\"default\"],\n    throttle: _throttle[\"default\"]\n  };\n  exports.listHandle = listHandle;\n\n  var getHandle = function getHandle(type) {\n    return listHandle[type];\n  };\n\n  exports.getHandle = getHandle;\n\n  var isFunction = function isFunction(fn) {\n    return typeof fn === 'function';\n  };\n\n  exports.isFunction = isFunction;\n\n  var isSSR = function isSSR() {\n    return typeof window === 'undefined';\n  };\n\n  exports.isSSR = isSSR;\n\n  var isDOMElement = function isDOMElement(element) {\n    return element instanceof Element || element instanceof HTMLDocument;\n  };\n\n  exports.isDOMElement = isDOMElement;\n  });\n\n  unwrapExports(utils);\n  var utils_1 = utils.isDOMElement;\n  var utils_2 = utils.isSSR;\n  var utils_3 = utils.isFunction;\n  var utils_4 = utils.getHandle;\n  var utils_5 = utils.listHandle;\n\n  var ChildWrapper_1 = createCommonjsModule(function (module, exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n\n\n\n  function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var ChildWrapper =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inherits(ChildWrapper, _PureComponent);\n\n    function ChildWrapper() {\n      _classCallCheck(this, ChildWrapper);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ChildWrapper).apply(this, arguments));\n    }\n\n    _createClass(ChildWrapper, [{\n      key: \"render\",\n      value: function render() {\n        // eslint-disable-next-line react/prop-types\n        return this.props.children;\n      }\n    }]);\n\n    return ChildWrapper;\n  }(React__default.PureComponent);\n\n  var _default = ChildWrapper;\n  exports[\"default\"] = _default;\n  });\n\n  unwrapExports(ChildWrapper_1);\n\n  var ResizeDetector_1 = createCommonjsModule(function (module, exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n\n  var _react = _interopRequireWildcard(React__default);\n\n\n\n  var _resizeObserverPolyfill = _interopRequireDefault(index);\n\n  var _rafSchd = _interopRequireDefault(rafSchd);\n\n\n\n\n\n  var _ChildWrapper = _interopRequireDefault(ChildWrapper_1);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  var ResizeDetector =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inherits(ResizeDetector, _PureComponent);\n\n    function ResizeDetector(props) {\n      var _this;\n\n      _classCallCheck(this, ResizeDetector);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ResizeDetector).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_this), \"cancelHandler\", function () {\n        if (_this.resizeHandler && _this.resizeHandler.cancel) {\n          // cancel debounced handler\n          _this.resizeHandler.cancel();\n\n          _this.resizeHandler = null;\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"rafClean\", function () {\n        if (_this.raf && _this.raf.cancel) {\n          _this.raf.cancel();\n\n          _this.raf = null;\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"toggleObserver\", function (type) {\n        var element = _this.getElement();\n\n        if (!element || !_this.resizeObserver[type]) return;\n\n        _this.resizeObserver[type](element);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"getElement\", function () {\n        var _this$props = _this.props,\n            querySelector = _this$props.querySelector,\n            targetDomEl = _this$props.targetDomEl;\n        if ((0, utils.isSSR)()) return undefined;\n        if (querySelector) return document.querySelector(querySelector);\n        if (targetDomEl && (0, utils.isDOMElement)(targetDomEl)) return targetDomEl; // eslint-disable-next-line react/no-find-dom-node\n\n        var currentElement = _this.element && (0, reactDom.findDOMNode)(_this.element);\n        if (!currentElement) return undefined;\n        return currentElement.parentElement;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"createUpdater\", function () {\n        _this.rafClean();\n\n        _this.raf = (0, _rafSchd[\"default\"])(function (_ref) {\n          var width = _ref.width,\n              height = _ref.height;\n          var onResize = _this.props.onResize;\n\n          if ((0, utils.isFunction)(onResize)) {\n            onResize(width, height);\n          }\n\n          _this.setState({\n            width: width,\n            height: height\n          });\n        });\n        return _this.raf;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"createResizeHandler\", function (entries) {\n        var _this$state = _this.state,\n            widthCurrent = _this$state.width,\n            heightCurrent = _this$state.height;\n        var _this$props2 = _this.props,\n            handleWidth = _this$props2.handleWidth,\n            handleHeight = _this$props2.handleHeight;\n        if (!handleWidth && !handleHeight) return;\n\n        var updater = _this.createUpdater();\n\n        entries.forEach(function (entry) {\n          var _ref2 = entry && entry.contentRect || {},\n              width = _ref2.width,\n              height = _ref2.height;\n\n          var isWidthChanged = handleWidth && widthCurrent !== width;\n          var isHeightChanged = handleHeight && heightCurrent !== height;\n          var isSizeChanged = isWidthChanged || isHeightChanged;\n          var shouldSetSize = !_this.skipOnMount && isSizeChanged && !(0, utils.isSSR)();\n\n          if (shouldSetSize) {\n            updater({\n              width: width,\n              height: height\n            });\n          }\n\n          _this.skipOnMount = false;\n        });\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"onRef\", function (el) {\n        _this.element = el;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"getRenderType\", function () {\n        var _this$props3 = _this.props,\n            render = _this$props3.render,\n            children = _this$props3.children;\n\n        if ((0, utils.isFunction)(render)) {\n          return 'renderProp';\n        }\n\n        if ((0, utils.isFunction)(children)) {\n          return 'childFunction';\n        }\n\n        if ((0, _react.isValidElement)(children)) {\n          return 'child';\n        }\n\n        if (Array.isArray(children)) {\n          return 'childArray';\n        }\n\n        return 'parent';\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"getTargetComponent\", function () {\n        var _this$props4 = _this.props,\n            render = _this$props4.render,\n            children = _this$props4.children,\n            nodeType = _this$props4.nodeType;\n        var _this$state2 = _this.state,\n            width = _this$state2.width,\n            height = _this$state2.height;\n        var childProps = {\n          width: width,\n          height: height\n        };\n\n        var renderType = _this.getRenderType();\n\n        switch (renderType) {\n          case 'renderProp':\n            return (0, _react.cloneElement)(render(childProps), {\n              key: 'resize-detector'\n            });\n\n          case 'childFunction':\n            return (0, _react.cloneElement)(children(childProps));\n\n          case 'child':\n            return (0, _react.cloneElement)(children, childProps);\n\n          case 'childArray':\n            return children.map(function (el) {\n              return !!el && (0, _react.cloneElement)(el, childProps);\n            });\n\n          default:\n            return (0, _react.createElement)(nodeType);\n        }\n      });\n\n      var skipOnMount = props.skipOnMount,\n          refreshMode = props.refreshMode,\n          refreshRate = props.refreshRate,\n          refreshOptions = props.refreshOptions;\n      _this.state = {\n        width: undefined,\n        height: undefined\n      };\n      _this.skipOnMount = skipOnMount;\n      _this.raf = null;\n      _this.element = null;\n      _this.unmounted = false;\n      var handle = (0, utils.getHandle)(refreshMode);\n      _this.resizeHandler = handle ? handle(_this.createResizeHandler, refreshRate, refreshOptions) : _this.createResizeHandler;\n      _this.resizeObserver = new _resizeObserverPolyfill[\"default\"](_this.resizeHandler);\n      return _this;\n    }\n\n    _createClass(ResizeDetector, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.toggleObserver('observe');\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.toggleObserver('unobserve');\n        this.rafClean();\n        this.cancelHandler();\n        this.unmounted = true;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _react[\"default\"].createElement(_ChildWrapper[\"default\"], {\n          ref: this.onRef\n        }, this.getTargetComponent());\n      }\n    }]);\n\n    return ResizeDetector;\n  }(_react.PureComponent);\n\n  ResizeDetector.propTypes = {\n    handleWidth: propTypes.bool,\n    handleHeight: propTypes.bool,\n    skipOnMount: propTypes.bool,\n    refreshRate: propTypes.number,\n    refreshMode: propTypes.string,\n    refreshOptions: (0, propTypes.shape)({\n      leading: propTypes.bool,\n      trailing: propTypes.bool\n    }),\n    querySelector: propTypes.string,\n    targetDomEl: propTypes.any,\n    // eslint-disable-line react/forbid-prop-types\n    onResize: propTypes.func,\n    render: propTypes.func,\n    children: propTypes.any,\n    // eslint-disable-line react/forbid-prop-types\n    nodeType: propTypes.node\n  };\n  ResizeDetector.defaultProps = {\n    handleWidth: false,\n    handleHeight: false,\n    skipOnMount: false,\n    refreshRate: 1000,\n    refreshMode: undefined,\n    refreshOptions: undefined,\n    querySelector: null,\n    targetDomEl: null,\n    onResize: null,\n    render: undefined,\n    children: null,\n    nodeType: 'div'\n  };\n  var _default = ResizeDetector;\n  exports[\"default\"] = _default;\n  });\n\n  unwrapExports(ResizeDetector_1);\n\n  var withResizeDetector_1 = createCommonjsModule(function (module, exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n\n  var _react = _interopRequireWildcard(React__default);\n\n  var _ResizeDetector = _interopRequireDefault(ResizeDetector_1);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n  function _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\n  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var withResizeDetector = function withResizeDetector(WrappedComponent) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      handleWidth: true,\n      handleHeight: true\n    };\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line\n      function (_Component) {\n        _inherits(ResizeDetectorHOC, _Component);\n\n        function ResizeDetectorHOC() {\n          _classCallCheck(this, ResizeDetectorHOC);\n\n          return _possibleConstructorReturn(this, _getPrototypeOf(ResizeDetectorHOC).apply(this, arguments));\n        }\n\n        _createClass(ResizeDetectorHOC, [{\n          key: \"render\",\n          value: function render() {\n            return _react[\"default\"].createElement(_ResizeDetector[\"default\"], props, _react[\"default\"].createElement(WrappedComponent, this.props));\n          }\n        }]);\n\n        return ResizeDetectorHOC;\n      }(_react.Component)\n    );\n  };\n\n  var _default = withResizeDetector;\n  exports[\"default\"] = _default;\n  });\n\n  unwrapExports(withResizeDetector_1);\n\n  var lib = createCommonjsModule(function (module, exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"withResizeDetector\", {\n    enumerable: true,\n    get: function get() {\n      return _withResizeDetector[\"default\"];\n    }\n  });\n  exports[\"default\"] = void 0;\n\n  var _ResizeDetector = _interopRequireDefault(ResizeDetector_1);\n\n  var _withResizeDetector = _interopRequireDefault(withResizeDetector_1);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n  var _default = _ResizeDetector[\"default\"];\n  exports[\"default\"] = _default;\n  });\n\n  var ReactResizeDetector = unwrapExports(lib);\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT$2 = 'Expected a function';\n\n  /** Used as references for various `Number` constants. */\n  var NAN$1 = 0 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag$1 = '[object Symbol]';\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim$1 = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary$1 = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal$1 = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt$1 = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n  /** Detect free variable `self`. */\n  var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n\n  /** Used for built-in method references. */\n  var objectProto$2 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$1 = objectProto$2.toString;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$1 = Math.max,\n      nativeMin$1 = Math.min;\n\n  /**\n   * Gets the timestamp of the number of milliseconds that have elapsed since\n   * the Unix epoch (1 January 1970 00:00:00 UTC).\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Date\n   * @returns {number} Returns the timestamp.\n   * @example\n   *\n   * _.defer(function(stamp) {\n   *   console.log(_.now() - stamp);\n   * }, _.now());\n   * // => Logs the number of milliseconds it took for the deferred invocation.\n   */\n  var now$1 = function() {\n    return root$1.Date.now();\n  };\n\n  /**\n   * Creates a debounced function that delays invoking `func` until after `wait`\n   * milliseconds have elapsed since the last time the debounced function was\n   * invoked. The debounced function comes with a `cancel` method to cancel\n   * delayed `func` invocations and a `flush` method to immediately invoke them.\n   * Provide `options` to indicate whether `func` should be invoked on the\n   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n   * with the last arguments provided to the debounced function. Subsequent\n   * calls to the debounced function return the result of the last `func`\n   * invocation.\n   *\n   * **Note:** If `leading` and `trailing` options are `true`, `func` is\n   * invoked on the trailing edge of the timeout only if the debounced function\n   * is invoked more than once during the `wait` timeout.\n   *\n   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n   * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n   *\n   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n   * for details over the differences between `_.debounce` and `_.throttle`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to debounce.\n   * @param {number} [wait=0] The number of milliseconds to delay.\n   * @param {Object} [options={}] The options object.\n   * @param {boolean} [options.leading=false]\n   *  Specify invoking on the leading edge of the timeout.\n   * @param {number} [options.maxWait]\n   *  The maximum time `func` is allowed to be delayed before it's invoked.\n   * @param {boolean} [options.trailing=true]\n   *  Specify invoking on the trailing edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * // Avoid costly calculations while the window size is in flux.\n   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n   *\n   * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n   * jQuery(element).on('click', _.debounce(sendMail, 300, {\n   *   'leading': true,\n   *   'trailing': false\n   * }));\n   *\n   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n   * var source = new EventSource('/stream');\n   * jQuery(source).on('message', debounced);\n   *\n   * // Cancel the trailing debounced invocation.\n   * jQuery(window).on('popstate', debounced.cancel);\n   */\n  function debounce$1(func, wait, options) {\n    var lastArgs,\n        lastThis,\n        maxWait,\n        result,\n        timerId,\n        lastCallTime,\n        lastInvokeTime = 0,\n        leading = false,\n        maxing = false,\n        trailing = true;\n\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT$2);\n    }\n    wait = toNumber$1(wait) || 0;\n    if (isObject$1(options)) {\n      leading = !!options.leading;\n      maxing = 'maxWait' in options;\n      maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;\n      trailing = 'trailing' in options ? !!options.trailing : trailing;\n    }\n\n    function invokeFunc(time) {\n      var args = lastArgs,\n          thisArg = lastThis;\n\n      lastArgs = lastThis = undefined;\n      lastInvokeTime = time;\n      result = func.apply(thisArg, args);\n      return result;\n    }\n\n    function leadingEdge(time) {\n      // Reset any `maxWait` timer.\n      lastInvokeTime = time;\n      // Start the timer for the trailing edge.\n      timerId = setTimeout(timerExpired, wait);\n      // Invoke the leading edge.\n      return leading ? invokeFunc(time) : result;\n    }\n\n    function remainingWait(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime,\n          result = wait - timeSinceLastCall;\n\n      return maxing ? nativeMin$1(result, maxWait - timeSinceLastInvoke) : result;\n    }\n\n    function shouldInvoke(time) {\n      var timeSinceLastCall = time - lastCallTime,\n          timeSinceLastInvoke = time - lastInvokeTime;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n    }\n\n    function timerExpired() {\n      var time = now$1();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // Restart the timer.\n      timerId = setTimeout(timerExpired, remainingWait(time));\n    }\n\n    function trailingEdge(time) {\n      timerId = undefined;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs) {\n        return invokeFunc(time);\n      }\n      lastArgs = lastThis = undefined;\n      return result;\n    }\n\n    function cancel() {\n      if (timerId !== undefined) {\n        clearTimeout(timerId);\n      }\n      lastInvokeTime = 0;\n      lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n\n    function flush() {\n      return timerId === undefined ? result : trailingEdge(now$1());\n    }\n\n    function debounced() {\n      var time = now$1(),\n          isInvoking = shouldInvoke(time);\n\n      lastArgs = arguments;\n      lastThis = this;\n      lastCallTime = time;\n\n      if (isInvoking) {\n        if (timerId === undefined) {\n          return leadingEdge(lastCallTime);\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          timerId = setTimeout(timerExpired, wait);\n          return invokeFunc(lastCallTime);\n        }\n      }\n      if (timerId === undefined) {\n        timerId = setTimeout(timerExpired, wait);\n      }\n      return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    return debounced;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject$1(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$1(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol$1(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);\n  }\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber$1(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol$1(value)) {\n      return NAN$1;\n    }\n    if (isObject$1(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject$1(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim$1, '');\n    var isBinary = reIsBinary$1.test(value);\n    return (isBinary || reIsOctal$1.test(value))\n      ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex$1.test(value) ? NAN$1 : +value);\n  }\n\n  var lodash_debounce = debounce$1;\n\n  /**\n   * Compare equality of two string arrays.\n   *\n   * @param {string[]} [arr1] - String array #1\n   * @param {string[]} [arr2] - String array #2\n   * @returns {boolean}\n   */\n  function areStringArraysEqual(arr1, arr2) {\n    if (arr1 === arr2) return true; // Identity\n\n    if (!arr1 || !arr2) return false; // One is undef/null\n\n    if (arr1.length !== arr2.length) return false; // Diff length\n\n    for (var i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) return false;\n    }\n\n    return true;\n  }\n\n  var css$4 = \".viewport-wrapper {\\n  width: 100%;\\n  height: 100%; /* MUST have `height` to prevent resize infinite loop */\\n  position: relative;\\n}\\n\\n.viewport-element {\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  background-color: black;\\n\\n  /* Prevent the blue outline in Chrome when a viewport is selected */\\n  outline: 0 !important;\\n\\n  /* Prevents the entire page from getting larger\\n     when the magnify tool is near the sides/corners of the page */\\n  overflow: hidden;\\n}\\n\";\n  styleInject(css$4);\n\n  var scrollToIndex = cornerstoneTools.importInternal('util/scrollToIndex');\n  var loadHandlerManager = cornerstoneTools.loadHandlerManager;\n\n  var CornerstoneViewport =\n  /*#__PURE__*/\n  function (_Component) {\n    inherits(CornerstoneViewport, _Component);\n\n    function CornerstoneViewport(props) {\n      var _this;\n\n      classCallCheck(this, CornerstoneViewport);\n\n      _this = possibleConstructorReturn(this, getPrototypeOf(CornerstoneViewport).call(this, props));\n\n      defineProperty(assertThisInitialized(_this), \"_handleOnElementEnabledEvent\", function () {\n        var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        var handler = function handler(evt) {\n          var elementThatWasEnabled = evt.detail.element;\n\n          if (elementThatWasEnabled === _this.element) {\n            // Pass Event\n            _this.props.onElementEnabled(evt);\n          }\n        }; // Start Listening\n\n\n        if (_this.props.onElementEnabled && !clear) {\n          cornerstone.events.addEventListener(cornerstone.EVENTS.ELEMENT_ENABLED, handler);\n        } // Stop Listening\n\n\n        if (clear) {\n          cornerstone.events.removeEventListener(cornerstone.EVENTS.ELEMENT_ENABLED, handler);\n        }\n      });\n\n      defineProperty(assertThisInitialized(_this), \"onImageRendered\", function (event) {\n        var viewport = event.detail.viewport;\n\n        _this.setState({\n          scale: viewport.scale,\n          windowCenter: viewport.voi.windowCenter,\n          windowWidth: viewport.voi.windowWidth,\n          rotationDegrees: viewport.rotation,\n          isFlippedVertically: viewport.vflip,\n          isFlippedHorizontally: viewport.hflip\n        });\n      });\n\n      defineProperty(assertThisInitialized(_this), \"onNewImageHandler\", function (event, callback) {\n        var imageId = event.detail.image.imageId;\n\n        var _ref = cornerstone.metaData.get('generalImageModule', imageId) || {},\n            sopInstanceUid = _ref.sopInstanceUid;\n\n        var currentImageIdIndex = _this.props.imageIds.indexOf(imageId); // TODO: Should we grab and set some imageId specific metadata here?\n        // Could prevent cornerstone dependencies in child components.\n\n\n        _this.setState({\n          imageIdIndex: currentImageIdIndex\n        });\n\n        if (callback) {\n          callback({\n            currentImageIdIndex: currentImageIdIndex,\n            sopInstanceUid: sopInstanceUid\n          });\n        }\n      });\n\n      defineProperty(assertThisInitialized(_this), \"onNewImage\", function (event) {\n        return _this.onNewImageHandler(event, _this.props.onNewImage);\n      });\n\n      defineProperty(assertThisInitialized(_this), \"onNewImageDebounced\", lodash_debounce(function (event) {\n        _this.onNewImageHandler(event, _this.props.onNewImageDebounced);\n      }, _this.props.onNewImageDebounceTime));\n\n      defineProperty(assertThisInitialized(_this), \"onImageLoaded\", function () {\n        // TODO: This is not necessarily true :thinking:\n        // We need better cache reporting a layer up\n        _this.numImagesLoaded++;\n      });\n\n      defineProperty(assertThisInitialized(_this), \"onImageProgress\", function (e) {\n        _this.setState({\n          imageProgress: e.detail.percentComplete\n        });\n      });\n\n      defineProperty(assertThisInitialized(_this), \"imageSliderOnInputCallback\", function (value) {\n        _this.setViewportActive();\n\n        scrollToIndex(_this.element, value);\n      });\n\n      defineProperty(assertThisInitialized(_this), \"setViewportActive\", function () {\n        if (_this.props.setViewportActive) {\n          _this.props.setViewportActive(); // TODO: should take viewport index/ident?\n\n        }\n      });\n\n      defineProperty(assertThisInitialized(_this), \"onResize\", function () {\n        cornerstone.resize(_this.element);\n      });\n\n      var imageIdIndex = props.imageIdIndex;\n      var _imageId = props.imageIds[imageIdIndex];\n      var isOverlayVisible = props.isOverlayVisible;\n      _this.state = {\n        // Used for metadata lookup (imagePlane, orientation markers)\n        // We can probs grab this once and hold on to? (updated on newImage)\n        imageId: _imageId,\n        imageIdIndex: imageIdIndex,\n        // Maybe\n        imageProgress: 0,\n        isLoading: true,\n        error: null,\n        // Overlay\n        scale: undefined,\n        windowWidth: undefined,\n        windowCenter: undefined,\n        isOverlayVisible: isOverlayVisible,\n        // Orientation Markers\n        rotationDegrees: undefined,\n        isFlippedVertically: undefined,\n        isFlippedHorizontally: undefined\n      };\n\n      _this._validateExternalEventsListeners(); // TODO: Deep Copy? How does that work w/ handlers?\n      // Save a copy. Props could change before `willUnmount`\n\n\n      _this.startLoadHandler = _this.props.startLoadHandler;\n      _this.endLoadHandler = _this.props.endLoadHandler;\n      _this.loadHandlerTimeout = undefined; // \"Loading...\" timer\n\n      _this.numImagesLoaded = 0;\n      return _this;\n    } // ~~ LIFECYCLE\n\n\n    createClass(CornerstoneViewport, [{\n      key: \"componentDidMount\",\n      value: function () {\n        var _componentDidMount = asyncToGenerator(\n        /*#__PURE__*/\n        regenerator.mark(function _callee() {\n          var _this$props, tools, isStackPrefetchEnabled, cornerstoneOptions, imageIds, isPlaying, frameRate, imageIdIndex, imageId, image, validFrameRate;\n\n          return regenerator.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this$props = this.props, tools = _this$props.tools, isStackPrefetchEnabled = _this$props.isStackPrefetchEnabled, cornerstoneOptions = _this$props.cornerstoneOptions, imageIds = _this$props.imageIds, isPlaying = _this$props.isPlaying, frameRate = _this$props.frameRate;\n                  imageIdIndex = this.state.imageIdIndex;\n                  imageId = imageIds[imageIdIndex]; // ~~ EVENTS: CORNERSTONE\n\n                  this._handleOnElementEnabledEvent();\n\n                  this._bindInternalCornerstoneEventListeners();\n\n                  this._bindExternalEventListeners('cornerstone');\n\n                  cornerstone.enable(this.element, cornerstoneOptions); // ~~ EVENTS: ELEMENT\n\n                  this._bindInternalElementEventListeners();\n\n                  this._bindExternalEventListeners('element'); // Only after `uuid` is set for enabledElement\n\n\n                  this._setupLoadHandlers();\n\n                  _context.prev = 10;\n                  // Setup \"Stack State\"\n                  cornerstoneTools.clearToolState(this.element, 'stack');\n                  cornerstoneTools.addStackStateManager(this.element, ['stack', 'playClip', 'referenceLines']);\n                  cornerstoneTools.addToolState(this.element, 'stack', {\n                    imageIds: toConsumableArray(imageIds),\n                    currentImageIdIndex: imageIdIndex\n                  }); // Load first image in stack\n\n                  _context.next = 16;\n                  return cornerstone.loadAndCacheImage(imageId);\n\n                case 16:\n                  image = _context.sent;\n                  // Display\n                  cornerstone.displayImage(this.element, image);\n\n                  if (isStackPrefetchEnabled) {\n                    cornerstoneTools.stackPrefetch.enable(this.element);\n                  }\n\n                  if (isPlaying) {\n                    validFrameRate = Math.max(frameRate, 1);\n                    cornerstoneTools.playClip(this.element, validFrameRate);\n                  }\n\n                  _addAndConfigureInitialToolsForElement(tools, this.element);\n\n                  _trySetActiveTool(this.element, this.props.activeTool);\n\n                  this.setState({\n                    isLoading: false\n                  });\n                  _context.next = 28;\n                  break;\n\n                case 25:\n                  _context.prev = 25;\n                  _context.t0 = _context[\"catch\"](10);\n                  this.setState({\n                    error: _context.t0,\n                    isLoading: false\n                  });\n\n                case 28:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[10, 25]]);\n        }));\n\n        function componentDidMount() {\n          return _componentDidMount.apply(this, arguments);\n        }\n\n        return componentDidMount;\n      }()\n    }, {\n      key: \"componentDidUpdate\",\n      value: function () {\n        var _componentDidUpdate = asyncToGenerator(\n        /*#__PURE__*/\n        regenerator.mark(function _callee2(prevProps, prevState) {\n          var _this$props2, stack, imageIndex, isStackPrefetchEnabled, prevStack, prevImageIndex, prevIsStackPrefetchEnabled, hasStackChanged, hasImageIndexChanged, updatedState, imageId, image, shouldStopStartStackPrefetch, activeTool, prevActiveTool, hasActiveToolChanges, _this$props3, frameRate, isPlaying, isOverlayVisible, prevFrameRate, prevIsPlaying, prevIsOverlayVisible, validFrameRate, shouldStart, shouldPause, hasFrameRateChanged;\n\n          return regenerator.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // ~~ STACK/IMAGE\n                  _this$props2 = this.props, stack = _this$props2.imageIds, imageIndex = _this$props2.imageIdIndex, isStackPrefetchEnabled = _this$props2.isStackPrefetchEnabled;\n                  prevStack = prevProps.imageIds, prevImageIndex = prevProps.imageIdIndex, prevIsStackPrefetchEnabled = prevProps.isStackPrefetchEnabled;\n                  hasStackChanged = !areStringArraysEqual(prevStack, stack);\n                  hasImageIndexChanged = imageIndex != null && imageIndex !== prevImageIndex;\n                  updatedState = {};\n\n                  if (!hasStackChanged) {\n                    _context2.next = 24;\n                    break;\n                  }\n\n                  // update stack toolstate\n                  cornerstoneTools.clearToolState(this.element, 'stack');\n                  cornerstoneTools.addToolState(this.element, 'stack', {\n                    imageIds: toConsumableArray(stack),\n                    currentImageIdIndex: imageIndex || 0\n                  }); // New stack; reset counter\n\n                  updatedState['numImagesLoaded'] = 0;\n                  updatedState['error'] = null; // Reset error on new stack\n\n                  _context2.prev = 10;\n                  // load + display image\n                  imageId = stack[imageIndex || 0];\n                  cornerstoneTools.stopClip(this.element);\n                  _context2.next = 15;\n                  return cornerstone.loadAndCacheImage(imageId);\n\n                case 15:\n                  image = _context2.sent;\n                  cornerstone.displayImage(this.element, image);\n                  cornerstone.reset(this.element);\n                  _context2.next = 22;\n                  break;\n\n                case 20:\n                  _context2.prev = 20;\n                  _context2.t0 = _context2[\"catch\"](10);\n\n                case 22:\n                  _context2.next = 25;\n                  break;\n\n                case 24:\n                  if (!hasStackChanged && hasImageIndexChanged) {\n                    scrollToIndex(this.element, imageIndex);\n                  }\n\n                case 25:\n                  shouldStopStartStackPrefetch = isStackPrefetchEnabled && hasStackChanged || !prevIsStackPrefetchEnabled && isStackPrefetchEnabled === true; // Need to stop/start to pickup stack changes in prefetcher\n\n                  if (shouldStopStartStackPrefetch) {\n                    cornerstoneTools.stackPrefetch.enable(this.element);\n                  } // ~~ ACTIVE TOOL\n\n\n                  activeTool = this.props.activeTool;\n                  prevActiveTool = prevProps.activeTool;\n                  hasActiveToolChanges = activeTool !== prevActiveTool;\n\n                  if (hasActiveToolChanges) {\n                    _trySetActiveTool(this.element, activeTool);\n                  } // ~~ CINE\n\n\n                  _this$props3 = this.props, frameRate = _this$props3.frameRate, isPlaying = _this$props3.isPlaying, isOverlayVisible = _this$props3.isOverlayVisible;\n                  prevFrameRate = prevProps.frameRate, prevIsPlaying = prevProps.isPlaying, prevIsOverlayVisible = prevProps.isOverlayVisible;\n                  validFrameRate = Math.max(frameRate, 1);\n                  shouldStart = isPlaying !== prevIsPlaying && isPlaying || isPlaying && hasStackChanged;\n                  shouldPause = isPlaying !== prevIsPlaying && !isPlaying;\n                  hasFrameRateChanged = isPlaying && frameRate !== prevFrameRate;\n\n                  if (shouldStart || hasFrameRateChanged) {\n                    cornerstoneTools.playClip(this.element, validFrameRate);\n                  } else if (shouldPause) {\n                    cornerstoneTools.stopClip(this.element);\n                  } // ~~ OVERLAY\n\n\n                  if (isOverlayVisible !== prevIsOverlayVisible) updatedState.isOverlayVisible = isOverlayVisible; // ~~ STATE: Update aggregated state changes\n\n                  if (Object.keys(updatedState).length > 0) {\n                    this.setState(updatedState);\n                  }\n\n                  this._validateExternalEventsListeners();\n\n                case 41:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this, [[10, 20]]);\n        }));\n\n        function componentDidUpdate(_x, _x2) {\n          return _componentDidUpdate.apply(this, arguments);\n        }\n\n        return componentDidUpdate;\n      }()\n      /**\n       * Tear down any listeners/handlers, and stop any asynchronous/queued operations\n       * that could fire after Unmount and cause errors.\n       *\n       * @memberof CornerstoneViewport\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var clear = true;\n\n        this._handleOnElementEnabledEvent(clear);\n\n        this._bindInternalCornerstoneEventListeners(clear);\n\n        this._bindInternalElementEventListeners(clear);\n\n        this._bindExternalEventListeners('cornerstone', clear);\n\n        this._bindExternalEventListeners('element', clear);\n\n        this._setupLoadHandlers(clear);\n\n        if (this.props.isStackPrefetchEnabled) {\n          cornerstoneTools.stackPrefetch.disable(this.element);\n        }\n\n        cornerstoneTools.clearToolState(this.element, 'stackPrefetch');\n        cornerstoneTools.stopClip(this.element);\n        cornerstone.disable(this.element);\n      }\n      /**\n       * @returns Component\n       * @memberof CornerstoneViewport\n       */\n\n    }, {\n      key: \"getLoadingIndicator\",\n      value: function getLoadingIndicator() {\n        var Component = this.props.loadingIndicatorComponent;\n        var _this$state = this.state,\n            error = _this$state.error,\n            imageProgress = _this$state.imageProgress;\n        return React__default.createElement(Component, {\n          error: error,\n          percentComplete: imageProgress\n        });\n      }\n      /**\n       *\n       *\n       * @returns\n       * @memberof CornerstoneViewport\n       */\n\n    }, {\n      key: \"getOverlay\",\n      value: function getOverlay() {\n        var _this$props4 = this.props,\n            Component = _this$props4.viewportOverlayComponent,\n            imageIds = _this$props4.imageIds;\n        var _this$state2 = this.state,\n            imageIdIndex = _this$state2.imageIdIndex,\n            scale = _this$state2.scale,\n            windowWidth = _this$state2.windowWidth,\n            windowCenter = _this$state2.windowCenter,\n            isOverlayVisible = _this$state2.isOverlayVisible;\n        var imageId = imageIds[imageIdIndex];\n        return imageId && windowWidth && isOverlayVisible && React__default.createElement(Component, {\n          imageIndex: imageIdIndex + 1,\n          stackSize: imageIds.length,\n          scale: scale,\n          windowWidth: windowWidth,\n          windowCenter: windowCenter,\n          imageId: imageId\n        });\n      }\n      /**\n       *\n       *\n       * @returns\n       * @memberof CornerstoneViewport\n       */\n\n    }, {\n      key: \"getOrientationMarkersOverlay\",\n      value: function getOrientationMarkersOverlay() {\n        var imageIds = this.props.imageIds;\n        var _this$state3 = this.state,\n            imageIdIndex = _this$state3.imageIdIndex,\n            rotationDegrees = _this$state3.rotationDegrees,\n            isFlippedVertically = _this$state3.isFlippedVertically,\n            isFlippedHorizontally = _this$state3.isFlippedHorizontally;\n        var imageId = imageIds[imageIdIndex]; // Workaround for below TODO stub\n\n        if (!imageId) {\n          return false;\n        } // TODO: This is throwing an error with an undefined `imageId`, and it shouldn't be\n\n\n        var _ref2 = cornerstone.metaData.get('imagePlaneModule', imageId) || {},\n            rowCosines = _ref2.rowCosines,\n            columnCosines = _ref2.columnCosines;\n\n        if (!rowCosines || !columnCosines || rotationDegrees === undefined) {\n          return false;\n        }\n\n        return React__default.createElement(ViewportOrientationMarkers, {\n          rowCosines: rowCosines,\n          columnCosines: columnCosines,\n          rotationDegrees: rotationDegrees,\n          isFlippedVertically: isFlippedVertically,\n          isFlippedHorizontally: isFlippedHorizontally\n        });\n      }\n      /**\n       *\n       *\n       * @param {boolean} [clear=false] - True to clear event listeners\n       * @memberof CornerstoneViewport\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"_bindInternalCornerstoneEventListeners\",\n      value: function _bindInternalCornerstoneEventListeners() {\n        var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var addOrRemoveEventListener = clear ? 'removeEventListener' : 'addEventListener'; // Update image load progress\n\n        cornerstone.events[addOrRemoveEventListener]('cornerstoneimageloadprogress', this.onImageProgress); // Update number of images loaded\n\n        cornerstone.events[addOrRemoveEventListener](cornerstone.EVENTS.IMAGE_LOADED, this.onImageLoaded);\n      }\n      /**\n       *\n       *\n       * @param {boolean} [clear=false] - True to clear event listeners\n       * @memberof CornerstoneViewport\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"_bindInternalElementEventListeners\",\n      value: function _bindInternalElementEventListeners() {\n        var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var addOrRemoveEventListener = clear ? 'removeEventListener' : 'addEventListener'; // Updates state's imageId, and imageIndex\n\n        this.element[addOrRemoveEventListener](cornerstone.EVENTS.NEW_IMAGE, this.onNewImage); // Updates state's imageId, and imageIndex\n\n        this.element[addOrRemoveEventListener](cornerstone.EVENTS.NEW_IMAGE, this.onNewImageDebounced); // Updates state's viewport\n\n        this.element[addOrRemoveEventListener](cornerstone.EVENTS.IMAGE_RENDERED, this.onImageRendered); // Set Viewport Active\n\n        this.element[addOrRemoveEventListener](cornerstoneTools.EVENTS.MOUSE_CLICK, this.setViewportActive);\n        this.element[addOrRemoveEventListener](cornerstoneTools.EVENTS.MOUSE_DOWN, this.setViewportActive);\n        this.element[addOrRemoveEventListener](cornerstoneTools.EVENTS.TOUCH_PRESS, this.setViewportActive);\n        this.element[addOrRemoveEventListener](cornerstoneTools.EVENTS.TOUCH_START, this.setViewportActive);\n        this.element[addOrRemoveEventListener](cornerstoneTools.EVENTS.STACK_SCROLL, this.setViewportActive);\n      }\n      /**\n       * TODO: The ordering here will cause ELEMENT_ENABLED and ELEMENT_DISABLED\n       *       events to never fire. We should have explicit callbacks for these,\n       *       and warn appropriately if user attempts to use them with this prop.\n       *\n       *\n       * Listens out for all events and then defers handling to a single listener to\n       * act on them\n       *\n       * @param {string} target - \"cornerstone\" || \"element\"\n       * @param {boolean} [clear=false] - True to clear event listeners\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"_bindExternalEventListeners\",\n      value: function _bindExternalEventListeners(targetType) {\n        var clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var addOrRemoveEventListener = clear ? 'removeEventListener' : 'addEventListener'; // Unique list of event names\n\n        var cornerstoneEvents = Object.values(cornerstone.EVENTS);\n        var cornerstoneToolsEvents = Object.values(cornerstoneTools.EVENTS);\n        var csEventNames = cornerstoneEvents.concat(cornerstoneToolsEvents);\n        var targetElementOrCornerstone = targetType === 'element' ? this.element : cornerstone.events;\n\n        var boundMethod = this._handleExternalEventListeners.bind(this); // Bind our single handler to every cornerstone event\n\n\n        for (var i = 0; i < csEventNames.length; i++) {\n          targetElementOrCornerstone[addOrRemoveEventListener](csEventNames[i], boundMethod);\n        }\n      }\n      /**\n       * Called to validate that events passed into the event listeners prop are valid\n       *\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"_validateExternalEventsListeners\",\n      value: function _validateExternalEventsListeners() {\n        if (!this.props.eventListeners) return;\n        var cornerstoneEvents = Object.values(cornerstone.EVENTS);\n        var cornerstoneToolsEvents = Object.values(cornerstoneTools.EVENTS);\n\n        for (var i = 0; i < this.props.eventListeners.length; i++) {\n          var _this$props$eventList = this.props.eventListeners[i],\n              targetType = _this$props$eventList.target,\n              eventName = _this$props$eventList.eventName,\n              handler = _this$props$eventList.handler;\n\n          if (!cornerstoneEvents.includes(eventName) && !cornerstoneToolsEvents.includes(eventName)) {\n            console.warn(\"No cornerstone or cornerstone-tools event exists for event name: \".concat(eventName));\n            continue;\n          }\n        }\n      }\n      /**\n       * Handles delegating of events from cornerstone back to the defined\n       * external events handlers\n       *\n       * @param {event}\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"_handleExternalEventListeners\",\n      value: function _handleExternalEventListeners(event) {\n        if (!this.props.eventListeners) {\n          return;\n        }\n\n        for (var i = 0; i < this.props.eventListeners.length; i++) {\n          var _this$props$eventList2 = this.props.eventListeners[i],\n              eventName = _this$props$eventList2.eventName,\n              handler = _this$props$eventList2.handler;\n\n          if (event.type === eventName) {\n            handler(event);\n          }\n        }\n      }\n      /**\n       * Convenience handler to pass the \"Element Enabled\" event back up to the\n       * parent via a callback. Can be used as an escape hatch for more advanced\n       * cornerstone fucntionality.\n       *\n       * @memberof CornerstoneViewport\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"_setupLoadHandlers\",\n\n      /**\n       * There is a \"GLOBAL/DEFAULT\" load handler for start/end/error,\n       * and one that can be defined per element. We use start/end handlers in this\n       * component to show the \"Loading...\" indicator if a loading request is taking\n       * longer than expected.\n       *\n       * Because we're using the \"per element\" handler, we need to call the user's\n       * handler within our own (if it's set). Load Handlers are not well documented,\n       * but you can find [their source here]{@link https://github.com/cornerstonejs/cornerstoneTools/blob/master/src/stateManagement/loadHandlerManager.js}\n       *\n       * @param {boolean} [clear=false] - true to remove previously set load handlers\n       * @memberof CornerstoneViewport\n       * @returns {undefined}\n       */\n      value: function _setupLoadHandlers() {\n        var _this2 = this;\n\n        var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (clear) {\n          loadHandlerManager.removeHandlers(this.element);\n          return;\n        } // We use this to \"flip\" `isLoading` to true, if our startLoading request\n        // takes longer than our \"loadIndicatorDelay\"\n\n\n        var startLoadHandler = function startLoadHandler(element) {\n          clearTimeout(_this2.loadHandlerTimeout); // Call user defined loadHandler\n\n          if (_this2.startLoadHandler) {\n            _this2.startLoadHandler(element);\n          } // We're taking too long. Indicate that we're \"Loading\".\n\n\n          _this2.loadHandlerTimeout = setTimeout(function () {\n            _this2.setState({\n              isLoading: true\n            });\n          }, _this2.props.loadIndicatorDelay);\n        };\n\n        var endLoadHandler = function endLoadHandler(element, image) {\n          clearTimeout(_this2.loadHandlerTimeout); // Call user defined loadHandler\n\n          if (_this2.endLoadHandler) {\n            _this2.endLoadHandler(element, image);\n          }\n\n          if (_this2.state.isLoading) {\n            _this2.setState({\n              isLoading: false\n            });\n          }\n        };\n\n        loadHandlerManager.setStartLoadHandler(startLoadHandler, this.element);\n        loadHandlerManager.setEndLoadHandler(endLoadHandler, this.element);\n      } // TODO: May need to throttle?\n\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var isLoading = this.state.isLoading;\n        var displayLoadingIndicator = isLoading || this.state.error;\n        var scrollbarMax = this.props.imageIds.length - 1;\n        var scrollbarHeight = this.element ? \"\".concat(this.element.clientHeight - 20, \"px\") : '100px';\n        return React__default.createElement(\"div\", {\n          style: this.props.style,\n          className: classnames('viewport-wrapper', this.props.className)\n        }, this.props.enableResizeDetector && React__default.createElement(ReactResizeDetector, {\n          handleWidth: true,\n          handleHeight: true,\n          skipOnMount: true,\n          refreshMode: this.props.resizeRefreshMode,\n          refreshRate: this.props.resizeRefreshRateMs,\n          onResize: this.onResize\n        }), React__default.createElement(\"div\", {\n          className: \"viewport-element\",\n          onContextMenu: function onContextMenu(e) {\n            return e.preventDefault();\n          },\n          onMouseDown: function onMouseDown(e) {\n            return e.preventDefault();\n          },\n          ref: function ref(input) {\n            _this3.element = input;\n          }\n        }, displayLoadingIndicator && this.getLoadingIndicator(), React__default.createElement(\"canvas\", {\n          className: \"cornerstone-canvas\"\n        }), this.getOverlay(), this.getOrientationMarkersOverlay()), React__default.createElement(ImageScrollbar, {\n          onInputCallback: this.imageSliderOnInputCallback,\n          max: scrollbarMax,\n          height: scrollbarHeight,\n          value: this.state.imageIdIndex\n        }), this.props.children);\n      }\n    }]);\n\n    return CornerstoneViewport;\n  }(React.Component);\n  /**\n   *\n   *\n   * @param {HTMLElement} element\n   * @param {string} activeToolName\n   * @returns\n   */\n\n\n  defineProperty(CornerstoneViewport, \"propTypes\", {\n    imageIds: propTypes.arrayOf(propTypes.string).isRequired,\n    imageIdIndex: propTypes.number,\n    // Controlled\n    activeTool: propTypes.string,\n    tools: propTypes.arrayOf(propTypes.oneOfType([// String\n    propTypes.string, // Object\n    propTypes.shape({\n      name: propTypes.string,\n      // Tool Name\n      toolClass: propTypes.func,\n      // Custom (ToolClass)\n      props: propTypes.Object,\n      // Props to Pass to `addTool`\n      mode: propTypes.string,\n      // Initial mode, if one other than default\n      modeOptions: propTypes.Object // { mouseButtonMask: [int] }\n\n    })])),\n    // Optional\n    // isActive ?? classname -> active\n    children: propTypes.node,\n    cornerstoneOptions: propTypes.object,\n    // cornerstone.enable options\n    isStackPrefetchEnabled: propTypes.bool,\n    // should prefetch?\n    // CINE\n    isPlaying: propTypes.bool,\n    frameRate: propTypes.number,\n    // Between 1 and ?\n    //\n    setViewportActive: propTypes.func,\n    // Called when viewport should be set to active?\n    onNewImage: propTypes.func,\n    onNewImageDebounced: propTypes.func,\n    onNewImageDebounceTime: propTypes.number,\n    viewportOverlayComponent: propTypes.oneOfType([propTypes.string, propTypes.func]),\n    // Cornerstone Events\n    onElementEnabled: propTypes.func,\n    // Escape hatch\n    eventListeners: propTypes.arrayOf(propTypes.shape({\n      target: propTypes.oneOf(['element', 'cornerstone']).isRequired,\n      eventName: propTypes.string.isRequired,\n      handler: propTypes.func.isRequired\n    })),\n    startLoadHandler: propTypes.func,\n    endLoadHandler: propTypes.func,\n    loadIndicatorDelay: propTypes.number,\n    loadingIndicatorComponent: propTypes.oneOfType([propTypes.element, propTypes.func]),\n\n    /** false to enable automatic viewport resizing */\n    enableResizeDetector: propTypes.bool,\n\n    /** rate at witch to apply resize mode's logic */\n    resizeRefreshRateMs: propTypes.number,\n\n    /** whether resize refresh behavior is exhibited as throttle or debounce */\n    resizeRefreshMode: propTypes.oneOf(['throttle', 'debounce']),\n    //\n    style: propTypes.object,\n    className: propTypes.string,\n    isOverlayVisible: propTypes.bool\n  });\n\n  defineProperty(CornerstoneViewport, \"defaultProps\", {\n    // Watch\n    imageIdIndex: 0,\n    isPlaying: false,\n    cineFrameRate: 24,\n    viewportOverlayComponent: ViewportOverlay,\n    imageIds: ['no-id://'],\n    // Init\n    cornerstoneOptions: {},\n    isStackPrefetchEnabled: false,\n    isOverlayVisible: true,\n    loadIndicatorDelay: 45,\n    loadingIndicatorComponent: LoadingIndicator,\n    enableResizeDetector: true,\n    resizeRefreshRateMs: 200,\n    resizeRefreshMode: 'debounce',\n    tools: [],\n    onNewImageDebounceTime: 0\n  });\n\n  function _trySetActiveTool(element, activeToolName) {\n    if (!element || !activeToolName) {\n      return;\n    }\n\n    var validTools = cornerstoneTools.store.state.tools.filter(function (tool) {\n      return tool.element === element;\n    });\n    var validToolNames = validTools.map(function (tool) {\n      return tool.name;\n    });\n\n    if (!validToolNames.includes(activeToolName)) {\n      console.warn(\"Trying to set a tool active that is not \\\"added\\\". Available tools include: \".concat(validToolNames.join(', ')));\n    }\n\n    cornerstoneTools.setToolActiveForElement(element, activeToolName, {\n      mouseButtonMask: 1\n    });\n  }\n  /**\n   * Iterate over the provided tools; Add each tool to the target element\n   *\n   * @param {string[]|object[]} tools\n   * @param {HTMLElement} element\n   */\n\n\n  function _addAndConfigureInitialToolsForElement(tools, element) {\n    for (var i = 0; i < tools.length; i++) {\n      var tool = typeof tools[i] === 'string' ? {\n        name: tools[i]\n      } : Object.assign({}, tools[i]);\n      var toolName = \"\".concat(tool.name, \"Tool\"); // Top level CornerstoneTools follow this pattern\n\n      tool.toolClass = tool.toolClass || cornerstoneTools[toolName];\n\n      if (!tool.toolClass) {\n        console.warn(\"Unable to add tool with name '\".concat(tool.name, \"'.\"));\n        continue;\n      }\n\n      cornerstoneTools.addToolForElement(element, tool.toolClass, tool.props || {});\n      var hasInitialMode = tool.mode && AVAILABLE_TOOL_MODES.includes(tool.mode);\n\n      if (hasInitialMode) {\n        // TODO: We may need to check `tool.props` and the tool class's prototype\n        // to determine the name it registered with cornerstone. `tool.name` is not\n        // reliable.\n        var setToolModeFn = TOOL_MODE_FUNCTIONS[tool.mode];\n        setToolModeFn(element, tool.name, tool.modeOptions || {});\n      }\n    }\n  }\n\n  var AVAILABLE_TOOL_MODES = ['active', 'passive', 'enabled', 'disabled'];\n  var TOOL_MODE_FUNCTIONS = {\n    active: cornerstoneTools.setToolActiveForElement,\n    passive: cornerstoneTools.setToolPassiveForElement,\n    enabled: cornerstoneTools.setToolEnabledForElement,\n    disabled: cornerstoneTools.setToolDisabledForElement\n  };\n\n  exports.ViewportOverlay = ViewportOverlay;\n  exports.default = CornerstoneViewport;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=index.umd.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"../../../node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../node_modules/react-cornerstone-viewport/dist/index.umd.js\n");

/***/ })

}]);